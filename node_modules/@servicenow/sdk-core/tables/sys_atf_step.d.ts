import * as db from '../db';
export type sys_atf_step = typeof sys_atf_step;
export declare const sys_atf_step: {
    readonly name: "sys_atf_step";
    readonly schema: {
        readonly test: db.Typed<string | db.Record<{
            readonly name: "sys_atf_test";
            readonly schema: {
                readonly name: db.Typed<string, {
                    readonly mandatory: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly active: db.Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly fail_on_server_error: db.Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly description: db.Typed<string, {
                    readonly maxLength: 4000;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
            };
        }>, {
            readonly referenceTable: {
                readonly name: "sys_atf_test";
                readonly schema: {
                    readonly name: db.Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly active: db.Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly fail_on_server_error: db.Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly description: db.Typed<string, {
                        readonly maxLength: 4000;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                };
            };
            readonly mandatory: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly step_config: db.Typed<string | db.Record<{
            readonly name: "sys_atf_step_config";
            readonly schema: {
                readonly name: db.Typed<string, {
                    readonly mandatory: true;
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly active: db.Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly inputs: db.Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
            };
        }>, {
            readonly referenceTable: {
                readonly name: "sys_atf_step_config";
                readonly schema: {
                    readonly name: db.Typed<string, {
                        readonly mandatory: true;
                        readonly maxLength: 250;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly active: db.Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly inputs: db.Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                };
            };
            readonly mandatory: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly order: db.Typed<number, {
            readonly default: 1;
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly active: db.Typed<boolean, {
            readonly default: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly inputs: db.Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
    };
};
