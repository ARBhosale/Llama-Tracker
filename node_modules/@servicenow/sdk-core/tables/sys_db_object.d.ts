import * as db from '../db';
export type sys_db_object = typeof sys_db_object;
export declare const sys_db_object: {
    readonly name: "sys_db_object";
    readonly extends: {
        readonly name: "sys_metadata";
        readonly schema: {
            readonly sys_class_name: db.Typed<string, {
                readonly label: "Class";
                readonly default: "javascript:current.getTableName();";
            }> & {
                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
            };
            readonly sys_name: db.Typed<string, {
                readonly maxLength: 255;
            }> & {
                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
            };
            readonly sys_package: db.Typed<string | db.Record<{
                readonly name: "sys_package";
                readonly schema: {
                    readonly active: db.Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly enforce_license: db.Typed<"none" | "log" | "enforce", {
                        readonly label: "Subscription requirement";
                        readonly choices: {
                            readonly none: {
                                readonly label: "None";
                                readonly sequence: 1;
                            };
                            readonly log: {
                                readonly label: "Monitor";
                                readonly sequence: 2;
                            };
                            readonly enforce: {
                                readonly label: "Required";
                                readonly sequence: 3;
                            };
                        };
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly ide_created: db.Typed<string, {
                        readonly label: "IDE Created";
                        readonly maxLength: 10;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly licensable: db.Typed<boolean, {}> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly license_category: db.Typed<string, {
                        readonly label: "Subscription Category";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly license_model: db.Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                        readonly label: "Subscription Model";
                        readonly choices: {
                            readonly none: {
                                readonly label: "Not applicable";
                                readonly sequence: 1;
                            };
                            readonly fulfiller: {
                                readonly label: "Fulfiller/Requester";
                                readonly sequence: 2;
                            };
                            readonly producer: {
                                readonly label: "Producer";
                                readonly sequence: 3;
                            };
                            readonly capacity: {
                                readonly label: "Capacity";
                                readonly sequence: 4;
                            };
                            readonly mixed: {
                                readonly label: "Mixed";
                                readonly sequence: 5;
                            };
                            readonly app_use: {
                                readonly label: "Application in use";
                                readonly sequence: 6;
                            };
                        };
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly name: db.Typed<string, {
                        readonly maxLength: 100;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly package_json: db.Typed<string, {
                        readonly label: "Package JSON";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly source: db.Typed<string, {
                        readonly label: "ID";
                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly trackable: db.Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly version: db.Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                };
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: db.Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly enforce_license: db.Typed<"none" | "log" | "enforce", {
                            readonly label: "Subscription requirement";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "None";
                                    readonly sequence: 1;
                                };
                                readonly log: {
                                    readonly label: "Monitor";
                                    readonly sequence: 2;
                                };
                                readonly enforce: {
                                    readonly label: "Required";
                                    readonly sequence: 3;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly ide_created: db.Typed<string, {
                            readonly label: "IDE Created";
                            readonly maxLength: 10;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly licensable: db.Typed<boolean, {}> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly license_category: db.Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly license_model: db.Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly name: db.Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly package_json: db.Typed<string, {
                            readonly label: "Package JSON";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly source: db.Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly trackable: db.Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly version: db.Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
            };
            readonly sys_policy: db.Typed<"read" | "protected", {
                readonly label: "Protection policy";
                readonly choices: {
                    readonly read: "Read-only";
                    readonly protected: "Protected";
                };
            }> & {
                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
            };
            readonly sys_scope: db.Typed<string | db.Record<{
                readonly name: "sys_scope";
                readonly extends: {
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: db.Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly enforce_license: db.Typed<"none" | "log" | "enforce", {
                            readonly label: "Subscription requirement";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "None";
                                    readonly sequence: 1;
                                };
                                readonly log: {
                                    readonly label: "Monitor";
                                    readonly sequence: 2;
                                };
                                readonly enforce: {
                                    readonly label: "Required";
                                    readonly sequence: 3;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly ide_created: db.Typed<string, {
                            readonly label: "IDE Created";
                            readonly maxLength: 10;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly licensable: db.Typed<boolean, {}> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly license_category: db.Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly license_model: db.Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly name: db.Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly package_json: db.Typed<string, {
                            readonly label: "Package JSON";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly source: db.Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly trackable: db.Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly version: db.Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                    };
                };
                readonly schema: {
                    readonly can_edit_in_studio: db.Typed<boolean, {
                        readonly label: "Can Edit Application in Studio";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly js_level: db.Typed<"es_latest" | "traditional" | "helsinki_es5", {
                        readonly label: "JavaScript Mode";
                        readonly default: "es_latest";
                        readonly choices: {
                            readonly traditional: "Compatibility Mode";
                            readonly helsinki_es5: "ES5 Standards Mode";
                            readonly es_latest: "ECMAScript 2021 (ES12)";
                        };
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly logo: db.Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly private: db.Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly restrict_table_access: db.Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly runtime_access_tracking: db.Typed<"permissive" | "enforcing", {
                        readonly choices: {
                            readonly permissive: "Tracking";
                            readonly enforcing: "Enforcing";
                        };
                        readonly dropdown: "dropdown with none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly scope: db.Typed<string, {
                        readonly maxLength: 18;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly scoped_administration: db.Typed<boolean, {
                        readonly label: "Application administration";
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly short_description: db.Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly template: db.Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly vendor: db.Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly vendor_prefix: db.Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                };
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: db.Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly enforce_license: db.Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly ide_created: db.Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly licensable: db.Typed<boolean, {}> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly license_category: db.Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly license_model: db.Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly name: db.Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly package_json: db.Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly source: db.Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly trackable: db.Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                            readonly version: db.Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: db.Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly js_level: db.Typed<"es_latest" | "traditional" | "helsinki_es5", {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                            readonly choices: {
                                readonly traditional: "Compatibility Mode";
                                readonly helsinki_es5: "ES5 Standards Mode";
                                readonly es_latest: "ECMAScript 2021 (ES12)";
                            };
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly logo: db.Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly private: db.Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly restrict_table_access: db.Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly runtime_access_tracking: db.Typed<"permissive" | "enforcing", {
                            readonly choices: {
                                readonly permissive: "Tracking";
                                readonly enforcing: "Enforcing";
                            };
                            readonly dropdown: "dropdown with none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly scope: db.Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly scoped_administration: db.Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly short_description: db.Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly template: db.Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly vendor: db.Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                        readonly vendor_prefix: db.Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
            };
            readonly sys_update_name: db.Typed<string, {
                readonly label: "Update name";
                readonly maxLength: 250;
            }> & {
                readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
            };
        };
    };
    readonly schema: {
        readonly name: db.Typed<string, {
            readonly mandatory: true;
            readonly maxLength: 80;
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly label: db.Typed<string, {
            readonly mandatory: true;
            readonly maxLength: 80;
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly extends: db.Typed<db.Table, {}> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly accessible: db.Typed<"All App Scopes" | "This App Scope", {
            readonly mandatory: true;
            readonly choices: ["All App Scopes", "This App Scope"];
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly actions_access: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Allow UI actions";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly alter_access: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Allow new fields";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly caller_access: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Caller access";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly client_script_access: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Allow client scripts";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly configuration_access: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Allow configuration";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly create_access: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Can create";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly delete_access: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Can delete";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly update_access: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Can update";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly read_access: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Can read";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly ws_access: db.Typed<boolean, {
            readonly default: true;
            readonly display: "Allow access via web services";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly create_access_controls: db.Typed<boolean, {
            readonly default: true;
            readonly display: "Create access controls";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly is_extensible: db.Typed<boolean, {
            readonly default: false;
            readonly display: "extensible";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly live_feed_enabled: db.Typed<boolean, {
            readonly default: false;
            readonly display: "Live feed";
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly user_role: db.Typed<string, {
            readonly mandatory: false;
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly number_ref: db.Typed<string | db.Record<{
            readonly name: "sys_number";
            readonly schema: {
                readonly category: db.Typed<db.Table, {
                    readonly mandatory: false;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly maximum_digits: db.Typed<number, {
                    readonly label: "Number of Digits";
                    readonly default: 7;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly number: db.Typed<number, {
                    readonly default: 1000;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly prefix: db.Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
            };
        }>, {
            readonly referenceTable: {
                readonly name: "sys_number";
                readonly schema: {
                    readonly category: db.Typed<db.Table, {
                        readonly mandatory: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly maximum_digits: db.Typed<number, {
                        readonly label: "Number of Digits";
                        readonly default: 7;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly number: db.Typed<number, {
                        readonly default: 1000;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                    readonly prefix: db.Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                    };
                };
            };
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
    };
};
