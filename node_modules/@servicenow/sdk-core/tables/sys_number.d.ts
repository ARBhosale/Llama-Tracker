import { Record } from '../db';
import { Table } from '../db/Table';
import { Entity } from '../entity';
export type sys_number = typeof sys_number;
export declare const sys_number: {
    readonly name: "sys_number";
    readonly schema: {
        readonly category: import("../db").Typed<Table, {
            readonly mandatory: false;
        }> & {
            readonly asRecord: () => Entity<Record<Table>, Table>;
        };
        readonly maximum_digits: import("../db").Typed<number, {
            readonly label: "Number of Digits";
            readonly default: 7;
        }> & {
            readonly asRecord: () => Entity<Record<Table>, Table>;
        };
        readonly number: import("../db").Typed<number, {
            readonly default: 1000;
        }> & {
            readonly asRecord: () => Entity<Record<Table>, Table>;
        };
        readonly prefix: import("../db").Typed<string, {}> & {
            readonly asRecord: () => Entity<Record<Table>, Table>;
        };
    };
};
export type SysNumber = typeof SysNumber;
export declare function SysNumber(category: Table, maximum_digits: number | undefined, number?: number | undefined, prefix?: string | undefined): {
    readonly category: Table;
    readonly maximum_digits: number | undefined;
    readonly number: number | undefined;
    readonly prefix: string | undefined;
} & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_number";
        readonly schema: {
            readonly category: import("../db").Typed<Table, {
                readonly mandatory: false;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly maximum_digits: import("../db").Typed<number, {
                readonly label: "Number of Digits";
                readonly default: 7;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly number: import("../db").Typed<number, {
                readonly default: 1000;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly prefix: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
        };
    }>, Table>;
};
