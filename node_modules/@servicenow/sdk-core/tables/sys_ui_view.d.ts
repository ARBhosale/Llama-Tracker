import { Record, Table } from '../db';
export type sys_ui_view = typeof sys_ui_view;
export declare const sys_ui_view: {
    readonly name: "sys_ui_view";
    readonly schema: {
        readonly title: import("../db").Typed<string, {
            readonly mandatory: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<Record<Table>, Table>;
        };
        readonly name: import("../db").Typed<string, {
            readonly mandatory: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<Record<Table>, Table>;
        };
        readonly hidden: import("../db").Typed<boolean, {
            readonly default: false;
        }> & {
            readonly asRecord: () => import("../entity").Entity<Record<Table>, Table>;
        };
    };
};
export declare const default_view: {
    readonly table: {
        readonly name: "sys_ui_view";
        readonly schema: {
            readonly title: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => import("../entity").Entity<Record<Table>, Table>;
            };
            readonly name: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => import("../entity").Entity<Record<Table>, Table>;
            };
            readonly hidden: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => import("../entity").Entity<Record<Table>, Table>;
            };
        };
    };
    readonly id: "Default view";
    readonly data: {
        readonly title: "Default view";
        readonly name: "default_view";
    };
} & {
    readonly asRecord: () => import("../entity").Entity<Record<{
        readonly name: "sys_ui_view";
        readonly schema: {
            readonly title: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => import("../entity").Entity<Record<Table>, Table>;
            };
            readonly name: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => import("../entity").Entity<Record<Table>, Table>;
            };
            readonly hidden: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => import("../entity").Entity<Record<Table>, Table>;
            };
        };
    }>, Table>;
};
