import { Table } from '../db';
export declare const task: {
    readonly name: "task";
    readonly schema: {
        readonly sys_class_name: import("../db").Typed<string, {
            readonly label: "Class";
            readonly default: "javascript:current.getTableName();";
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly sys_name: import("../db").Typed<string, {
            readonly maxLength: 255;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly sys_package: import("../db").Typed<string | import("../db").Record<{
            readonly name: "sys_package";
            readonly schema: {
                readonly active: import("../db").Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                    readonly label: "Subscription requirement";
                    readonly choices: {
                        readonly none: {
                            readonly label: "None";
                            readonly sequence: 1;
                        };
                        readonly log: {
                            readonly label: "Monitor";
                            readonly sequence: 2;
                        };
                        readonly enforce: {
                            readonly label: "Required";
                            readonly sequence: 3;
                        };
                    };
                    readonly default: "none";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly ide_created: import("../db").Typed<string, {
                    readonly label: "IDE Created";
                    readonly maxLength: 10;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly licensable: import("../db").Typed<boolean, {}> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly license_category: import("../db").Typed<string, {
                    readonly label: "Subscription Category";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                    readonly label: "Subscription Model";
                    readonly choices: {
                        readonly none: {
                            readonly label: "Not applicable";
                            readonly sequence: 1;
                        };
                        readonly fulfiller: {
                            readonly label: "Fulfiller/Requester";
                            readonly sequence: 2;
                        };
                        readonly producer: {
                            readonly label: "Producer";
                            readonly sequence: 3;
                        };
                        readonly capacity: {
                            readonly label: "Capacity";
                            readonly sequence: 4;
                        };
                        readonly mixed: {
                            readonly label: "Mixed";
                            readonly sequence: 5;
                        };
                        readonly app_use: {
                            readonly label: "Application in use";
                            readonly sequence: 6;
                        };
                    };
                    readonly default: "none";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly name: import("../db").Typed<string, {
                    readonly maxLength: 100;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly package_json: import("../db").Typed<string, {
                    readonly label: "Package JSON";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly source: import("../db").Typed<string, {
                    readonly label: "ID";
                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly trackable: import("../db").Typed<boolean, {
                    readonly default: false;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
            };
        }>, {
            readonly referenceTable: {
                readonly name: "sys_package";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                        readonly label: "Subscription requirement";
                        readonly choices: {
                            readonly none: {
                                readonly label: "None";
                                readonly sequence: 1;
                            };
                            readonly log: {
                                readonly label: "Monitor";
                                readonly sequence: 2;
                            };
                            readonly enforce: {
                                readonly label: "Required";
                                readonly sequence: 3;
                            };
                        };
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly ide_created: import("../db").Typed<string, {
                        readonly label: "IDE Created";
                        readonly maxLength: 10;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly licensable: import("../db").Typed<boolean, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly license_category: import("../db").Typed<string, {
                        readonly label: "Subscription Category";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                        readonly label: "Subscription Model";
                        readonly choices: {
                            readonly none: {
                                readonly label: "Not applicable";
                                readonly sequence: 1;
                            };
                            readonly fulfiller: {
                                readonly label: "Fulfiller/Requester";
                                readonly sequence: 2;
                            };
                            readonly producer: {
                                readonly label: "Producer";
                                readonly sequence: 3;
                            };
                            readonly capacity: {
                                readonly label: "Capacity";
                                readonly sequence: 4;
                            };
                            readonly mixed: {
                                readonly label: "Mixed";
                                readonly sequence: 5;
                            };
                            readonly app_use: {
                                readonly label: "Application in use";
                                readonly sequence: 6;
                            };
                        };
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly maxLength: 100;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly package_json: import("../db").Typed<string, {
                        readonly label: "Package JSON";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly source: import("../db").Typed<string, {
                        readonly label: "ID";
                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly trackable: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                };
            };
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly sys_policy: import("../db").Typed<"read" | "protected", {
            readonly label: "Protection policy";
            readonly choices: {
                readonly read: "Read-only";
                readonly protected: "Protected";
            };
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly sys_scope: import("../db").Typed<string | import("../db").Record<{
            readonly name: "sys_scope";
            readonly extends: {
                readonly name: "sys_package";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                        readonly label: "Subscription requirement";
                        readonly choices: {
                            readonly none: {
                                readonly label: "None";
                                readonly sequence: 1;
                            };
                            readonly log: {
                                readonly label: "Monitor";
                                readonly sequence: 2;
                            };
                            readonly enforce: {
                                readonly label: "Required";
                                readonly sequence: 3;
                            };
                        };
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly ide_created: import("../db").Typed<string, {
                        readonly label: "IDE Created";
                        readonly maxLength: 10;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly licensable: import("../db").Typed<boolean, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly license_category: import("../db").Typed<string, {
                        readonly label: "Subscription Category";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                        readonly label: "Subscription Model";
                        readonly choices: {
                            readonly none: {
                                readonly label: "Not applicable";
                                readonly sequence: 1;
                            };
                            readonly fulfiller: {
                                readonly label: "Fulfiller/Requester";
                                readonly sequence: 2;
                            };
                            readonly producer: {
                                readonly label: "Producer";
                                readonly sequence: 3;
                            };
                            readonly capacity: {
                                readonly label: "Capacity";
                                readonly sequence: 4;
                            };
                            readonly mixed: {
                                readonly label: "Mixed";
                                readonly sequence: 5;
                            };
                            readonly app_use: {
                                readonly label: "Application in use";
                                readonly sequence: 6;
                            };
                        };
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly maxLength: 100;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly package_json: import("../db").Typed<string, {
                        readonly label: "Package JSON";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly source: import("../db").Typed<string, {
                        readonly label: "ID";
                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly trackable: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                };
            };
            readonly schema: {
                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                    readonly label: "Can Edit Application in Studio";
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                    readonly label: "JavaScript Mode";
                    readonly default: "es_latest";
                    readonly choices: {
                        readonly traditional: "Compatibility Mode";
                        readonly helsinki_es5: "ES5 Standards Mode";
                        readonly es_latest: "ECMAScript 2021 (ES12)";
                    };
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly logo: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly private: import("../db").Typed<boolean, {
                    readonly default: false;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly restrict_table_access: import("../db").Typed<boolean, {
                    readonly default: false;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                    readonly choices: {
                        readonly permissive: "Tracking";
                        readonly enforcing: "Enforcing";
                    };
                    readonly dropdown: "dropdown with none";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly scope: import("../db").Typed<string, {
                    readonly maxLength: 18;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly scoped_administration: import("../db").Typed<boolean, {
                    readonly label: "Application administration";
                    readonly default: false;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly short_description: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly template: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly vendor: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
            };
        }>, {
            readonly referenceTable: {
                readonly name: "sys_scope";
                readonly extends: {
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                            readonly label: "Subscription requirement";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "None";
                                    readonly sequence: 1;
                                };
                                readonly log: {
                                    readonly label: "Monitor";
                                    readonly sequence: 2;
                                };
                                readonly enforce: {
                                    readonly label: "Required";
                                    readonly sequence: 3;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly ide_created: import("../db").Typed<string, {
                            readonly label: "IDE Created";
                            readonly maxLength: 10;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly package_json: import("../db").Typed<string, {
                            readonly label: "Package JSON";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                    };
                };
                readonly schema: {
                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                        readonly label: "Can Edit Application in Studio";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                        readonly label: "JavaScript Mode";
                        readonly default: "es_latest";
                        readonly choices: {
                            readonly traditional: "Compatibility Mode";
                            readonly helsinki_es5: "ES5 Standards Mode";
                            readonly es_latest: "ECMAScript 2021 (ES12)";
                        };
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly logo: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly private: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly restrict_table_access: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                        readonly choices: {
                            readonly permissive: "Tracking";
                            readonly enforcing: "Enforcing";
                        };
                        readonly dropdown: "dropdown with none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly scope: import("../db").Typed<string, {
                        readonly maxLength: 18;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly scoped_administration: import("../db").Typed<boolean, {
                        readonly label: "Application administration";
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly short_description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly template: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly vendor: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                };
            };
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly sys_update_name: import("../db").Typed<string, {
            readonly label: "Update name";
            readonly maxLength: 250;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly state: import("../db").Typed<number, {
            readonly default: 1;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly sla_due: import("../db").Typed<Date, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly short_description: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly service_offering: import("../db").Typed<string | import("../db").Record<Table>, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly route_reason: import("../db").Typed<number, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly rejection_goto: import("../db").Typed<string | import("../db").Record<Table>, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly reassignment_count: import("../db").Typed<number, {
            readonly default: 0;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly priority: import("../db").Typed<number, {
            readonly default: 4;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly parent: import("../db").Typed<string | import("../db").Record<Table>, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly order: import("../db").Typed<number, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly opened_by: import("../db").Typed<string | import("../db").Record<{
            readonly name: "sys_user";
            readonly schema: {
                readonly active: import("../db").Typed<boolean, {
                    readonly label: "Active";
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly city: import("../db").Typed<string, {
                    readonly label: "City";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly email: import("../db").Typed<string, {
                    readonly label: "Email";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly first_name: import("../db").Typed<string, {
                    readonly label: "First Name";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly last_name: import("../db").Typed<string, {
                    readonly label: "Last Name";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly name: import("../db").Typed<string, {
                    readonly label: "Name";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly title: import("../db").Typed<string, {
                    readonly label: "Title";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
            };
        }>, {
            readonly referenceTable: {
                readonly name: "sys_user";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly label: "Active";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly city: import("../db").Typed<string, {
                        readonly label: "City";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly email: import("../db").Typed<string, {
                        readonly label: "Email";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly first_name: import("../db").Typed<string, {
                        readonly label: "First Name";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly last_name: import("../db").Typed<string, {
                        readonly label: "Last Name";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly label: "Name";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly title: import("../db").Typed<string, {
                        readonly label: "Title";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                };
            };
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly sys_domain_path: import("../db").Typed<string, {
            readonly default: "global";
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly work_end: import("../db").Typed<Date, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly work_start: import("../db").Typed<Date, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly urgency: import("../db").Typed<number, {
            readonly default: 3;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly upon_reject: import("../db").Typed<string, {
            readonly maxLength: 40;
            readonly default: "cancel";
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly upon_approval: import("../db").Typed<string, {
            readonly maxLength: 40;
            readonly default: "proceed";
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly universal_request: import("../db").Typed<string | import("../db").Record<Table>, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly task_effective_number: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly opened_at: import("../db").Typed<Date, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly number: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly close_notes: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly closed_by: import("../db").Typed<string | import("../db").Record<{
            readonly name: "sys_user";
            readonly schema: {
                readonly active: import("../db").Typed<boolean, {
                    readonly label: "Active";
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly city: import("../db").Typed<string, {
                    readonly label: "City";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly email: import("../db").Typed<string, {
                    readonly label: "Email";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly first_name: import("../db").Typed<string, {
                    readonly label: "First Name";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly last_name: import("../db").Typed<string, {
                    readonly label: "Last Name";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly name: import("../db").Typed<string, {
                    readonly label: "Name";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly title: import("../db").Typed<string, {
                    readonly label: "Title";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
            };
        }>, {
            readonly referenceTable: {
                readonly name: "sys_user";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly label: "Active";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly city: import("../db").Typed<string, {
                        readonly label: "City";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly email: import("../db").Typed<string, {
                        readonly label: "Email";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly first_name: import("../db").Typed<string, {
                        readonly label: "First Name";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly last_name: import("../db").Typed<string, {
                        readonly label: "Last Name";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly label: "Name";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly title: import("../db").Typed<string, {
                        readonly label: "Title";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                };
            };
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly closed_at: import("../db").Typed<Date, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly assigned_to: import("../db").Typed<string | import("../db").Record<{
            readonly name: "sys_user";
            readonly schema: {
                readonly active: import("../db").Typed<boolean, {
                    readonly label: "Active";
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly city: import("../db").Typed<string, {
                    readonly label: "City";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly email: import("../db").Typed<string, {
                    readonly label: "Email";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly first_name: import("../db").Typed<string, {
                    readonly label: "First Name";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly last_name: import("../db").Typed<string, {
                    readonly label: "Last Name";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly name: import("../db").Typed<string, {
                    readonly label: "Name";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly title: import("../db").Typed<string, {
                    readonly label: "Title";
                }> & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
            };
        }>, {
            readonly referenceTable: {
                readonly name: "sys_user";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly label: "Active";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly city: import("../db").Typed<string, {
                        readonly label: "City";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly email: import("../db").Typed<string, {
                        readonly label: "Email";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly first_name: import("../db").Typed<string, {
                        readonly label: "First Name";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly last_name: import("../db").Typed<string, {
                        readonly label: "Last Name";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly label: "Name";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly title: import("../db").Typed<string, {
                        readonly label: "Title";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                };
            };
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly approval_set: import("../db").Typed<Date, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly approval: import("../db").Typed<string, {
            readonly maxLength: 40;
            readonly default: "not requested";
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly contact_type: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly made_sla: import("../db").Typed<boolean, {
            readonly default: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly knowledge: import("../db").Typed<boolean, {
            readonly default: false;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly impact: import("../db").Typed<number, {
            readonly default: 3;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly follow_up: import("../db").Typed<Date, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly expected_start: import("../db").Typed<Date, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly escalation: import("../db").Typed<number, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly due_date: import("../db").Typed<Date, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly description: import("../db").Typed<string, {
            readonly maxLength: 4000;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly correlation_id: import("../db").Typed<string, {
            readonly maxLength: 100;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly correlation_display: import("../db").Typed<string, {
            readonly maxLength: 100;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly active: import("../db").Typed<boolean, {
            readonly default: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly activity_due: import("../db").Typed<boolean, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly comments: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
    };
};
