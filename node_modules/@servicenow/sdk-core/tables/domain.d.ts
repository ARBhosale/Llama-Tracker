import { Table } from '../db';
export type domain = typeof domain;
export declare const domain: {
    readonly name: "domain";
    readonly schema: {
        readonly active: import("../db").Typed<boolean, {
            readonly default: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly default: import("../db").Typed<boolean, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly description: import("../db").Typed<string, {
            readonly maxLength: 1000;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly name: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly primary: import("../db").Typed<boolean, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly sys_domain_code: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly sys_domain_path: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly type: import("../db").Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
    };
};
export declare const DomainSeparationColumns: {
    sys_domain: import("../db").Typed<"global" | import("../db").Record<{
        readonly name: "domain";
        readonly schema: {
            readonly active: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly default: import("../db").Typed<boolean, {}> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly description: import("../db").Typed<string, {
                readonly maxLength: 1000;
            }> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly name: import("../db").Typed<string, {}> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly primary: import("../db").Typed<boolean, {}> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly sys_domain_code: import("../db").Typed<string, {}> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly sys_domain_path: import("../db").Typed<string, {}> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly type: import("../db").Typed<string, {}> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
        };
    }>, {
        readonly default: "global";
    }> & {
        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
    };
    sys_domain_path: import("../db").Typed<string, {
        readonly maxLength: 255;
        readonly default: "/";
    }> & {
        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
    };
};
