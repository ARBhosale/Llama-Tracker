import * as db from '../db';
export type sys_atf_step_config = typeof sys_atf_step_config;
export declare const sys_atf_step_config: {
    readonly name: "sys_atf_step_config";
    readonly schema: {
        readonly name: db.Typed<string, {
            readonly mandatory: true;
            readonly maxLength: 250;
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly active: db.Typed<boolean, {
            readonly default: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
        readonly inputs: db.Typed<string, {}> & {
            readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
        };
    };
};
export declare namespace StepConfig {
    const OpenANewForm: {
        readonly table: {
            readonly name: "sys_atf_step_config";
            readonly schema: {
                readonly name: db.Typed<string, {
                    readonly mandatory: true;
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly active: db.Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly inputs: db.Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
            };
        };
        readonly id: 1;
        readonly data: {
            readonly name: "Open A New Form";
        };
    } & {
        readonly asRecord: () => import("../entity").Entity<db.Record<{
            readonly name: "sys_atf_step_config";
            readonly schema: {
                readonly name: db.Typed<string, {
                    readonly mandatory: true;
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly active: db.Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly inputs: db.Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
            };
        }>, db.Table>;
    };
    const SetFieldValues: {
        readonly table: {
            readonly name: "sys_atf_step_config";
            readonly schema: {
                readonly name: db.Typed<string, {
                    readonly mandatory: true;
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly active: db.Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly inputs: db.Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
            };
        };
        readonly id: 2;
        readonly data: {
            readonly name: "Set Field Values";
        };
    } & {
        readonly asRecord: () => import("../entity").Entity<db.Record<{
            readonly name: "sys_atf_step_config";
            readonly schema: {
                readonly name: db.Typed<string, {
                    readonly mandatory: true;
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly active: db.Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly inputs: db.Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
            };
        }>, db.Table>;
    };
    const SubmitAForm: {
        readonly table: {
            readonly name: "sys_atf_step_config";
            readonly schema: {
                readonly name: db.Typed<string, {
                    readonly mandatory: true;
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly active: db.Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly inputs: db.Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
            };
        };
        readonly id: 3;
        readonly data: {
            readonly name: "Submit A Form";
        };
    } & {
        readonly asRecord: () => import("../entity").Entity<db.Record<{
            readonly name: "sys_atf_step_config";
            readonly schema: {
                readonly name: db.Typed<string, {
                    readonly mandatory: true;
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly active: db.Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
                readonly inputs: db.Typed<string, {}> & {
                    readonly asRecord: () => import("../entity").Entity<db.Record<db.Table>, db.Table>;
                };
            };
        }>, db.Table>;
    };
}
