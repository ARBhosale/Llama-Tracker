import { Record, Table, TableSchemaDotWalk } from '../db';
import { Entity } from '../entity';
import { sys_ui_list, sys_ui_view } from '../tables';
export type ListElement<T extends Table> = {
    list_id: Record<typeof sys_ui_list>;
    element: TableSchemaDotWalk<T>;
    max_value?: boolean;
    min_value?: boolean;
    average_value?: boolean;
    sum?: boolean;
    position?: number;
};
export type List<T extends Table = Table> = {
    table: T;
    id?: string;
    columns: Array<ListElement<T>['element']> | Array<Omit<ListElement<T>, 'list_id'>>;
    view: string | Record<typeof sys_ui_view>;
};
export declare function List<const T extends Table>(config: List<T>): List<T> & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_ui_list";
        readonly schema: {
            readonly element: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly name: import("../db").Typed<Table, {}> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly parent: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly relationship: import("../db").Typed<string | Record<{
                readonly name: "sys_relationship";
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_relationship";
                };
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly view: import("../db").Typed<string | Record<{
                readonly name: "sys_ui_view";
                readonly schema: {
                    readonly title: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly hidden: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                };
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_ui_view";
                    readonly schema: {
                        readonly title: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly hidden: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly user: import("../db").Typed<string | Record<{
                readonly name: "sys_user";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly label: "Active";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly city: import("../db").Typed<string, {
                        readonly label: "City";
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly email: import("../db").Typed<string, {
                        readonly label: "Email";
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly first_name: import("../db").Typed<string, {
                        readonly label: "First Name";
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly last_name: import("../db").Typed<string, {
                        readonly label: "Last Name";
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly label: "Name";
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly title: import("../db").Typed<string, {
                        readonly label: "Title";
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                };
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_user";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly label: "Active";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly city: import("../db").Typed<string, {
                            readonly label: "City";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly email: import("../db").Typed<string, {
                            readonly label: "Email";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly first_name: import("../db").Typed<string, {
                            readonly label: "First Name";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly last_name: import("../db").Typed<string, {
                            readonly label: "Last Name";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly label: "Name";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly title: import("../db").Typed<string, {
                            readonly label: "Title";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly position: import("../db").Typed<number, {}> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly average_value: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly max_value: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly min_value: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly sum: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
        };
    }>, Table>;
};
export declare function View(config: {
    name: string;
    title?: string;
    hidden?: boolean;
}): {
    name: string;
    title?: string;
    hidden?: boolean;
} & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_ui_view";
        readonly schema: {
            readonly title: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly name: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly hidden: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
        };
    }>, Table>;
};
