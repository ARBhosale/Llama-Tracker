import { Record, Table } from '../db';
import { Entity } from '../entity';
import { AnnotationType, sys_ui_form, sys_ui_form_section, sys_ui_section, sys_ui_view } from '../tables';
type SplitElement = '.begin_split' | '.split' | '.end_split';
export type AnnotationElement = {
    type: AnnotationType;
    render_as: 'html' | 'text';
    text: string;
};
export type UIElement<T extends Table> = keyof T['schema'] | SplitElement | AnnotationElement;
export type FormSection<T extends Table> = {
    readonly caption: string;
    readonly elements: UIElement<T>[];
};
export type FormSchema<T extends Table> = {
    view: string | Record<sys_ui_view>;
    sections: Array<FormSection<T>>;
};
export type FormBuilder = {
    readonly type: 'form';
    readonly id: string | number;
    readonly table: string;
    readonly view?: Record<sys_ui_view>;
    readonly ui_sections: Array<Record<sys_ui_section>>;
    readonly ui_form: Record<sys_ui_form>;
    readonly ui_form_sections: Array<Record<sys_ui_form_section>>;
};
export type Form<T extends Table = Table> = {
    table: T;
    form: FormSchema<T>;
    actions?: unknown;
    policies?: unknown;
};
export declare function Form<const T extends Table>(config: Form<T>): Form<T> & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_ui_form";
        readonly schema: {
            readonly name: import("../db").Typed<Table, {}> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly view: import("../db").Typed<string | Record<{
                readonly name: "sys_ui_view";
                readonly schema: {
                    readonly title: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly hidden: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                };
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_ui_view";
                    readonly schema: {
                        readonly title: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly hidden: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
        };
    }>, Table>;
};
export {};
