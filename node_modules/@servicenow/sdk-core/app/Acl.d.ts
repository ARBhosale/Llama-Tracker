import { Record, Table } from '../db';
import { Entity } from '../entity';
import { Role } from './Role';
import { GlideRecord } from '../script';
type AclBase<T extends Table> = {
    active?: boolean;
    operations: (keyof typeof AclOperations)[];
    roles?: Entity<Role>[];
    script?: ((current: GlideRecord<T>) => boolean) | string;
    admin_overrides?: boolean;
    condition?: string;
    description?: string;
    local_or_existing?: 'Local' | 'Existing';
    security_attribute?: keyof typeof AclAttributes;
};
type TableAcl<T extends Table> = AclBase<T> & {
    type: keyof typeof AclRecordTypes;
    table: T;
    field?: '*' | keyof T['schema'];
};
type NamedAcl<T extends Table> = AclBase<T> & {
    type: keyof typeof AclNamedTypes;
    name: string;
};
type Acl<T extends Table> = TableAcl<T> | NamedAcl<T>;
declare const AclRecordTypes: {
    ux_data_broker: string;
    ux_page: string;
    ux_route: string;
    pd_action: string;
    record: string;
};
declare const AclNamedTypes: {
    client_callable_flow_object: string;
    client_callable_script_include: string;
    graphql: string;
    processor: string;
    rest_endpoint: string;
    ui_page: string;
};
export declare const AclOperations: {
    execute: string;
    create: string;
    read: string;
    write: string;
    delete: string;
    edit_task_relations: string;
    edit_ci_relations: string;
    save_as_template: string;
    add_to_list: string;
    report_on: string;
    list_edit: string;
    report_view: string;
    personalize_choices: string;
};
export declare const AclAttributes: {
    role_explicit: string;
    group_explicit: string;
    user_is_authenticated: string;
    impersonating: string;
    interactive_session: string;
    has_admin_role: string;
    role: string;
    logged_in: string;
    network_criteria: string;
    group: string;
    allow_unauth_roleless_acl: string;
};
export declare function Acl<T extends Table>(config: Acl<T>): (Acl<T> & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_security_acl";
        readonly extends: {
            readonly name: "sys_metadata";
            readonly schema: {
                readonly sys_class_name: import("../db").Typed<string, {
                    readonly label: "Class";
                    readonly default: "javascript:current.getTableName();";
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_name: import("../db").Typed<string, {
                    readonly maxLength: 255;
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_package: import("../db").Typed<string | Record<{
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                            readonly label: "Subscription requirement";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "None";
                                    readonly sequence: 1;
                                };
                                readonly log: {
                                    readonly label: "Monitor";
                                    readonly sequence: 2;
                                };
                                readonly enforce: {
                                    readonly label: "Required";
                                    readonly sequence: 3;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly ide_created: import("../db").Typed<string, {
                            readonly label: "IDE Created";
                            readonly maxLength: 10;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly package_json: import("../db").Typed<string, {
                            readonly label: "Package JSON";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                    readonly label: "Protection policy";
                    readonly choices: {
                        readonly read: "Read-only";
                        readonly protected: "Protected";
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_scope: import("../db").Typed<string | Record<{
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                            readonly choices: {
                                readonly traditional: "Compatibility Mode";
                                readonly helsinki_es5: "ES5 Standards Mode";
                                readonly es_latest: "ECMAScript 2021 (ES12)";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                            readonly choices: {
                                readonly permissive: "Tracking";
                                readonly enforcing: "Enforcing";
                            };
                            readonly dropdown: "dropdown with none";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                            };
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                                readonly choices: {
                                    readonly traditional: "Compatibility Mode";
                                    readonly helsinki_es5: "ES5 Standards Mode";
                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                readonly choices: {
                                    readonly permissive: "Tracking";
                                    readonly enforcing: "Enforcing";
                                };
                                readonly dropdown: "dropdown with none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_update_name: import("../db").Typed<string, {
                    readonly label: "Update name";
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
            };
        };
        readonly schema: {
            readonly name: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly active: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly advanced: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly script: import("../db").Typed<import("../db").ScriptModule<Function>, {}> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly admin_overrides: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly type: import("../db").Typed<string | Record<{
                readonly name: "sys_security_type";
                readonly extends: {
                    readonly name: "sys_metadata";
                    readonly schema: {
                        readonly sys_class_name: import("../db").Typed<string, {
                            readonly label: "Class";
                            readonly default: "javascript:current.getTableName();";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_name: import("../db").Typed<string, {
                            readonly maxLength: 255;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_package: import("../db").Typed<string | Record<{
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                            };
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_policy: import("../db").Typed<"read" | "protected", {
                            readonly label: "Protection policy";
                            readonly choices: {
                                readonly read: "Read-only";
                                readonly protected: "Protected";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_scope: import("../db").Typed<string | Record<{
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                    readonly choices: {
                                        readonly traditional: "Compatibility Mode";
                                        readonly helsinki_es5: "ES5 Standards Mode";
                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                    readonly choices: {
                                        readonly permissive: "Tracking";
                                        readonly enforcing: "Enforcing";
                                    };
                                    readonly dropdown: "dropdown with none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                            };
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                        readonly choices: {
                                            readonly traditional: "Compatibility Mode";
                                            readonly helsinki_es5: "ES5 Standards Mode";
                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                        readonly choices: {
                                            readonly permissive: "Tracking";
                                            readonly enforcing: "Enforcing";
                                        };
                                        readonly dropdown: "dropdown with none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_update_name: import("../db").Typed<string, {
                            readonly label: "Update name";
                            readonly maxLength: 250;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                };
                readonly schema: {
                    readonly description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                };
            }>, {
                readonly mandatory: true;
                readonly referenceTable: {
                    readonly name: "sys_security_type";
                    readonly extends: {
                        readonly name: "sys_metadata";
                        readonly schema: {
                            readonly sys_class_name: import("../db").Typed<string, {
                                readonly label: "Class";
                                readonly default: "javascript:current.getTableName();";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_name: import("../db").Typed<string, {
                                readonly maxLength: 255;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_package: import("../db").Typed<string | Record<{
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                readonly label: "Protection policy";
                                readonly choices: {
                                    readonly read: "Read-only";
                                    readonly protected: "Protected";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_scope: import("../db").Typed<string | Record<{
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                        readonly choices: {
                                            readonly traditional: "Compatibility Mode";
                                            readonly helsinki_es5: "ES5 Standards Mode";
                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                        readonly choices: {
                                            readonly permissive: "Tracking";
                                            readonly enforcing: "Enforcing";
                                        };
                                        readonly dropdown: "dropdown with none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                        };
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                            readonly choices: {
                                                readonly traditional: "Compatibility Mode";
                                                readonly helsinki_es5: "ES5 Standards Mode";
                                                readonly es_latest: "ECMAScript 2021 (ES12)";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                            readonly choices: {
                                                readonly permissive: "Tracking";
                                                readonly enforcing: "Enforcing";
                                            };
                                            readonly dropdown: "dropdown with none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_update_name: import("../db").Typed<string, {
                                readonly label: "Update name";
                                readonly maxLength: 250;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly condition: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly operation: import("../db").Typed<string | Record<{
                readonly name: "sys_security_operation";
                readonly extends: {
                    readonly name: "sys_metadata";
                    readonly schema: {
                        readonly sys_class_name: import("../db").Typed<string, {
                            readonly label: "Class";
                            readonly default: "javascript:current.getTableName();";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_name: import("../db").Typed<string, {
                            readonly maxLength: 255;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_package: import("../db").Typed<string | Record<{
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                            };
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_policy: import("../db").Typed<"read" | "protected", {
                            readonly label: "Protection policy";
                            readonly choices: {
                                readonly read: "Read-only";
                                readonly protected: "Protected";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_scope: import("../db").Typed<string | Record<{
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                    readonly choices: {
                                        readonly traditional: "Compatibility Mode";
                                        readonly helsinki_es5: "ES5 Standards Mode";
                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                    readonly choices: {
                                        readonly permissive: "Tracking";
                                        readonly enforcing: "Enforcing";
                                    };
                                    readonly dropdown: "dropdown with none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                            };
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                        readonly choices: {
                                            readonly traditional: "Compatibility Mode";
                                            readonly helsinki_es5: "ES5 Standards Mode";
                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                        readonly choices: {
                                            readonly permissive: "Tracking";
                                            readonly enforcing: "Enforcing";
                                        };
                                        readonly dropdown: "dropdown with none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_update_name: import("../db").Typed<string, {
                            readonly label: "Update name";
                            readonly maxLength: 250;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                };
                readonly schema: {
                    readonly name: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly order: import("../db").Typed<number, {}> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                };
            }>, {
                readonly mandatory: true;
                readonly referenceTable: {
                    readonly name: "sys_security_operation";
                    readonly extends: {
                        readonly name: "sys_metadata";
                        readonly schema: {
                            readonly sys_class_name: import("../db").Typed<string, {
                                readonly label: "Class";
                                readonly default: "javascript:current.getTableName();";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_name: import("../db").Typed<string, {
                                readonly maxLength: 255;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_package: import("../db").Typed<string | Record<{
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                readonly label: "Protection policy";
                                readonly choices: {
                                    readonly read: "Read-only";
                                    readonly protected: "Protected";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_scope: import("../db").Typed<string | Record<{
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                        readonly choices: {
                                            readonly traditional: "Compatibility Mode";
                                            readonly helsinki_es5: "ES5 Standards Mode";
                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                        readonly choices: {
                                            readonly permissive: "Tracking";
                                            readonly enforcing: "Enforcing";
                                        };
                                        readonly dropdown: "dropdown with none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                        };
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                            readonly choices: {
                                                readonly traditional: "Compatibility Mode";
                                                readonly helsinki_es5: "ES5 Standards Mode";
                                                readonly es_latest: "ECMAScript 2021 (ES12)";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                            readonly choices: {
                                                readonly permissive: "Tracking";
                                                readonly enforcing: "Enforcing";
                                            };
                                            readonly dropdown: "dropdown with none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_update_name: import("../db").Typed<string, {
                                readonly label: "Update name";
                                readonly maxLength: 250;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly name: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly order: import("../db").Typed<number, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly security_attribute: import("../db").Typed<string | Record<{
                readonly name: "sys_security_attribute";
                readonly extends: {
                    readonly name: "sys_metadata";
                    readonly schema: {
                        readonly sys_class_name: import("../db").Typed<string, {
                            readonly label: "Class";
                            readonly default: "javascript:current.getTableName();";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_name: import("../db").Typed<string, {
                            readonly maxLength: 255;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_package: import("../db").Typed<string | Record<{
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                            };
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_policy: import("../db").Typed<"read" | "protected", {
                            readonly label: "Protection policy";
                            readonly choices: {
                                readonly read: "Read-only";
                                readonly protected: "Protected";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_scope: import("../db").Typed<string | Record<{
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                    readonly choices: {
                                        readonly traditional: "Compatibility Mode";
                                        readonly helsinki_es5: "ES5 Standards Mode";
                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                    readonly choices: {
                                        readonly permissive: "Tracking";
                                        readonly enforcing: "Enforcing";
                                    };
                                    readonly dropdown: "dropdown with none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                            };
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                        readonly choices: {
                                            readonly traditional: "Compatibility Mode";
                                            readonly helsinki_es5: "ES5 Standards Mode";
                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                        readonly choices: {
                                            readonly permissive: "Tracking";
                                            readonly enforcing: "Enforcing";
                                        };
                                        readonly dropdown: "dropdown with none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly sys_update_name: import("../db").Typed<string, {
                            readonly label: "Update name";
                            readonly maxLength: 250;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                };
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly condition: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly is_dynamic: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly is_localized: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly is_system: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly label: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly lookup_table: import("../db").Typed<Table, {}> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                    readonly lookup_table_column: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => Entity<Record<Table>, Table>;
                    };
                };
            }>, {
                readonly mandatory: false;
                readonly referenceTable: {
                    readonly name: "sys_security_attribute";
                    readonly extends: {
                        readonly name: "sys_metadata";
                        readonly schema: {
                            readonly sys_class_name: import("../db").Typed<string, {
                                readonly label: "Class";
                                readonly default: "javascript:current.getTableName();";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_name: import("../db").Typed<string, {
                                readonly maxLength: 255;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_package: import("../db").Typed<string | Record<{
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                readonly label: "Protection policy";
                                readonly choices: {
                                    readonly read: "Read-only";
                                    readonly protected: "Protected";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_scope: import("../db").Typed<string | Record<{
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                        readonly choices: {
                                            readonly traditional: "Compatibility Mode";
                                            readonly helsinki_es5: "ES5 Standards Mode";
                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                        readonly choices: {
                                            readonly permissive: "Tracking";
                                            readonly enforcing: "Enforcing";
                                        };
                                        readonly dropdown: "dropdown with none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<Table>, Table>;
                                    };
                                };
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<Table>, Table>;
                                            };
                                        };
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                            readonly choices: {
                                                readonly traditional: "Compatibility Mode";
                                                readonly helsinki_es5: "ES5 Standards Mode";
                                                readonly es_latest: "ECMAScript 2021 (ES12)";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                            readonly choices: {
                                                readonly permissive: "Tracking";
                                                readonly enforcing: "Enforcing";
                                            };
                                            readonly dropdown: "dropdown with none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<Table>, Table>;
                                        };
                                    };
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly sys_update_name: import("../db").Typed<string, {
                                readonly label: "Update name";
                                readonly maxLength: 250;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly condition: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly is_dynamic: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly is_localized: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly is_system: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly label: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly lookup_table: import("../db").Typed<Table, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly lookup_table_column: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly description: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly local_or_existing: import("../db").Typed<string | number, {
                readonly default: "Local";
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
        };
    }>, Table>;
})[];
export {};
