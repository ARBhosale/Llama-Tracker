import { Record } from '../db';
import { Entity } from '../entity';
export type Role = {
    name: string;
    assignable_by?: string;
    can_delegate?: boolean;
    description?: string;
    elevated_privilege?: boolean;
    grantable?: boolean;
    includes_roles?: Entity<Role>[];
    scoped_admin?: boolean;
};
export declare function ScopedRole(scope?: string): (config: Role) => Role & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_user_role";
        readonly extends: {
            readonly name: "sys_metadata";
            readonly schema: {
                readonly sys_class_name: import("../db").Typed<string, {
                    readonly label: "Class";
                    readonly default: "javascript:current.getTableName();";
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_name: import("../db").Typed<string, {
                    readonly maxLength: 255;
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_package: import("../db").Typed<string | Record<{
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                            readonly label: "Subscription requirement";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "None";
                                    readonly sequence: 1;
                                };
                                readonly log: {
                                    readonly label: "Monitor";
                                    readonly sequence: 2;
                                };
                                readonly enforce: {
                                    readonly label: "Required";
                                    readonly sequence: 3;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly ide_created: import("../db").Typed<string, {
                            readonly label: "IDE Created";
                            readonly maxLength: 10;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly package_json: import("../db").Typed<string, {
                            readonly label: "Package JSON";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                    readonly label: "Protection policy";
                    readonly choices: {
                        readonly read: "Read-only";
                        readonly protected: "Protected";
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_scope: import("../db").Typed<string | Record<{
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                            readonly choices: {
                                readonly traditional: "Compatibility Mode";
                                readonly helsinki_es5: "ES5 Standards Mode";
                                readonly es_latest: "ECMAScript 2021 (ES12)";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                            readonly choices: {
                                readonly permissive: "Tracking";
                                readonly enforcing: "Enforcing";
                            };
                            readonly dropdown: "dropdown with none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                                readonly choices: {
                                    readonly traditional: "Compatibility Mode";
                                    readonly helsinki_es5: "ES5 Standards Mode";
                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                readonly choices: {
                                    readonly permissive: "Tracking";
                                    readonly enforcing: "Enforcing";
                                };
                                readonly dropdown: "dropdown with none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_update_name: import("../db").Typed<string, {
                    readonly label: "Update name";
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
            };
        };
        readonly schema: {
            readonly name: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly description: import("../db").Typed<string, {
                readonly maxLength: 1000;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly elevated_privilege: import("../db").Typed<boolean, {
                readonly label: "Elevated Privilege";
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly assignable_by: import("../db").Typed<string | Record<{
                readonly name: "sys_user";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly label: "Active";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly city: import("../db").Typed<string, {
                        readonly label: "City";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly email: import("../db").Typed<string, {
                        readonly label: "Email";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly first_name: import("../db").Typed<string, {
                        readonly label: "First Name";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly last_name: import("../db").Typed<string, {
                        readonly label: "Last Name";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly label: "Name";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly title: import("../db").Typed<string, {
                        readonly label: "Title";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                };
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_user";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly label: "Active";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly city: import("../db").Typed<string, {
                            readonly label: "City";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly email: import("../db").Typed<string, {
                            readonly label: "Email";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly first_name: import("../db").Typed<string, {
                            readonly label: "First Name";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly last_name: import("../db").Typed<string, {
                            readonly label: "Last Name";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly label: "Name";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly title: import("../db").Typed<string, {
                            readonly label: "Title";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly can_delegate: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly grantable: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly includes_roles: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly scoped_admin: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly suffix: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
        };
    }>, import("../db").Table>;
};
export declare const Role: (config: Role) => Role & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_user_role";
        readonly extends: {
            readonly name: "sys_metadata";
            readonly schema: {
                readonly sys_class_name: import("../db").Typed<string, {
                    readonly label: "Class";
                    readonly default: "javascript:current.getTableName();";
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_name: import("../db").Typed<string, {
                    readonly maxLength: 255;
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_package: import("../db").Typed<string | Record<{
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                            readonly label: "Subscription requirement";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "None";
                                    readonly sequence: 1;
                                };
                                readonly log: {
                                    readonly label: "Monitor";
                                    readonly sequence: 2;
                                };
                                readonly enforce: {
                                    readonly label: "Required";
                                    readonly sequence: 3;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly ide_created: import("../db").Typed<string, {
                            readonly label: "IDE Created";
                            readonly maxLength: 10;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly package_json: import("../db").Typed<string, {
                            readonly label: "Package JSON";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                    readonly label: "Protection policy";
                    readonly choices: {
                        readonly read: "Read-only";
                        readonly protected: "Protected";
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_scope: import("../db").Typed<string | Record<{
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                            readonly choices: {
                                readonly traditional: "Compatibility Mode";
                                readonly helsinki_es5: "ES5 Standards Mode";
                                readonly es_latest: "ECMAScript 2021 (ES12)";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                            readonly choices: {
                                readonly permissive: "Tracking";
                                readonly enforcing: "Enforcing";
                            };
                            readonly dropdown: "dropdown with none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                                readonly choices: {
                                    readonly traditional: "Compatibility Mode";
                                    readonly helsinki_es5: "ES5 Standards Mode";
                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                readonly choices: {
                                    readonly permissive: "Tracking";
                                    readonly enforcing: "Enforcing";
                                };
                                readonly dropdown: "dropdown with none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_update_name: import("../db").Typed<string, {
                    readonly label: "Update name";
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
            };
        };
        readonly schema: {
            readonly name: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly description: import("../db").Typed<string, {
                readonly maxLength: 1000;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly elevated_privilege: import("../db").Typed<boolean, {
                readonly label: "Elevated Privilege";
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly assignable_by: import("../db").Typed<string | Record<{
                readonly name: "sys_user";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly label: "Active";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly city: import("../db").Typed<string, {
                        readonly label: "City";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly email: import("../db").Typed<string, {
                        readonly label: "Email";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly first_name: import("../db").Typed<string, {
                        readonly label: "First Name";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly last_name: import("../db").Typed<string, {
                        readonly label: "Last Name";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly label: "Name";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly title: import("../db").Typed<string, {
                        readonly label: "Title";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                };
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_user";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly label: "Active";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly city: import("../db").Typed<string, {
                            readonly label: "City";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly email: import("../db").Typed<string, {
                            readonly label: "Email";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly first_name: import("../db").Typed<string, {
                            readonly label: "First Name";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly last_name: import("../db").Typed<string, {
                            readonly label: "Last Name";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly label: "Name";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly title: import("../db").Typed<string, {
                            readonly label: "Title";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly can_delegate: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly grantable: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly includes_roles: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly scoped_admin: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly suffix: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
        };
    }>, import("../db").Table>;
};
