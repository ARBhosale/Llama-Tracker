import { Record, Table } from '../db';
/**
 * An entity is a first-class object that represents a single conceptual unit
 * of an application. Entities should correspond directly to one top-level
 * database record, but can represent a logical grouping of records beneath
 * it. For example, an ATF test is a singular concept which corresponds directly
 * to a sys_atf_test record, but concretely consists of a logical grouping of
 * records including sys_atf_test, sys_atf_step, etc.
 *
 * Since entities always correspond to a single top-level database record,
 * they must be convertible to a record so that they can be referenced by
 * lower-level abstractions.
 *
 * The build system will extract data from entities and derive one or more
 * database records.
 */
export type Entity<D extends object = object, T extends Table = Table> = D & {
    /**
     * Convert this entity to its corresponding top-level record. For example,
     * an ATF test entity converts to a sys_atf_test record. This is useful
     * for establishing references between lower-level abstractions.
     */
    asRecord(): Entity<Record<T>>;
};
/**
 * Utility function to create an {@linkcode Entity} object.
 *
 * @see {@linkcode Entity}
 * @param entity The raw data object that represents the entity.
 * @param asRecord A function that accepts the raw entity as input and returns
 *                 the single top-level record that corresponds to that entity.
 *                 For example, an ATF test entity should correspond to a
 *                 sys_atf_test record.
 * @returns The original object which was passed in with the record converter
 *          function as a method.
 */
export declare function Entity<const E extends object, const T extends Table>(entity: E, asRecord: (this: E, entity: E) => Entity<Record<T>>): E & {
    readonly asRecord: () => Entity<Record<T>, Table>;
};
