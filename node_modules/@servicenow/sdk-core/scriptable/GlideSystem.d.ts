import { UpgradeDebuggerResult } from './UpgradeDebuggerResult';
import { GlideUser } from './GlideUser';
import { GlideRecord } from './GlideRecord';
import { GlideDateTime } from './GlideDateTime';
/**
 * The scoped GlideSystem (referred to by the variable name 'gs' in any server-side
 * JavaScript) API provides a number of convenient methods to get information about
 * the system, the current logged in u...
 */
declare class GlideSystem {
    _dropTable(tableName: string): void;
    _getScriptError(script: string, scopeId: string): string;
    /**
     * Adds an error message for the current session
     */
    addErrorMessage(error: any, messageKey: string): void;
    addErrorMessageNoSanitization(error: any, messageKey: string): void;
    /**
     * Adds an info message for the current session
     */
    addInfoMessage(message: any, messageKey: string): void;
    addInfoMessageNoSanitization(message: any, messageKey: string): void;
    addMessage(bucket: string, message: any, messageKey: string): void;
    addUpgradeDebuggerArtifact(tableName: string, sysId: string): void;
    alterSqlFieldDefintion(table: string, element: string, oldLength: any): void;
    appLoad(dirName: string): void;
    appLoadData(dirName: string): void;
    appLoadDemo(dirName: string): void;
    appUpdate(dirName: string): void;
    appUpgrade(dirName: string): void;
    beginningOfCurrentHour(): string;
    beginningOfCurrentMinute(): string;
    beginningOfDay(o: any): string;
    beginningOfLast120Days(): string;
    beginningOfLast12Months(): string;
    beginningOfLast15Minutes(): string;
    beginningOfLast2Hours(): string;
    beginningOfLast2Quarters(): string;
    beginningOfLast2Years(): string;
    beginningOfLast30Days(): string;
    beginningOfLast30Minutes(): string;
    beginningOfLast3Months(): string;
    beginningOfLast45Minutes(): string;
    beginningOfLast60Days(): string;
    beginningOfLast6Months(): string;
    beginningOfLast7Days(): string;
    beginningOfLast90Days(): string;
    beginningOfLast9Months(): string;
    beginningOfLastHour(): string;
    beginningOfLastMinute(): string;
    /**
     * Gets the date and time for the beginning of last month in UTC, adjusted for the timezone of the server
     */
    beginningOfLastMonth(): string;
    beginningOfLastQuarter(): string;
    beginningOfLastSchedulePeriod(scheduleId: string): string;
    /**
     * Gets the date and time for the beginning of last week in UTC, adjusted for the timezone of the server
     */
    beginningOfLastWeek(): string;
    /**
     * Gets the date and time for the beginning of last year in UTC, adjusted for the timezone of the server
     */
    beginningOfLastYear(): string;
    beginningOfMonth(o: any): string;
    beginningOfNext2Quarters(): string;
    /**
     * Gets the date and time for the beginning of next month in UTC, adjusted for the timezone of the server
     */
    beginningOfNextMonth(): string;
    beginningOfNextQuarter(): string;
    beginningOfNextSchedulePeriod(scheduleId: string): string;
    /**
     * Gets the date and time for the beginning of next week in UTC, adjusted for the timezone of the server
     */
    beginningOfNextWeek(): string;
    /**
     * Gets the date and time for the beginning of next year in UTC, adjusted for the timezone of the server
     */
    beginningOfNextYear(): string;
    beginningOfOneYearAgo(): string;
    beginningOfSchedulePeriodsAgo(periodsAgo: number, scheduleId: string): string;
    /**
     * Gets the date and time for the beginning of this month in UTC, adjusted for the timezone of the server
     */
    beginningOfThisMonth(): string;
    /**
     * Gets the date and time for the beginning of this quarter in UTC, adjusted for the timezone of the server
     */
    beginningOfThisQuarter(): string;
    beginningOfThisSchedulePeriod(scheduleId: string): string;
    /**
     * Gets the date and time for the beginning of this week in UTC, adjusted for the timezone of the server
     */
    beginningOfThisWeek(): string;
    /**
     * Gets the date and time for the beginning of this year in UTC, adjusted for the timezone of the server
     */
    beginningOfThisYear(): string;
    beginningOfToday(): string;
    beginningOfTomorrow(): string;
    /**
     * Returns the (UTC) beginning of the specified week adjusted for the timezone of the current session
     */
    beginningOfWeek(o: any): string;
    beginningOfYear(o: any): string;
    beginningOfYesterday(): string;
    calDateDiff(startDate: string, endDate: string, numericValue: boolean): string;
    createUser(common_name: string): string;
    dateAdd(unit: string, offset: number, basis: any): string;
    dateDiff(startDate: string, endDate: string, bnumericValue: boolean): string;
    dateGenerate(date: string, range: string): string;
    /**
     * Returns a String of the form :interval,value,operator
     */
    datePart(interval: string, value: string, oper: string): string;
    /**
     * Returns the (UTC) start of the day that was the specified number of days ago adjusted for the timezone of the
     * server
     */
    daysAgo(days: number): string;
    /**
     * Returns the (UTC) end of the day that was the specified number of days ago adjusted for the timezone of the server
     */
    daysAgoEnd(days: number): string;
    daysAgoLocal(days: number): string;
    /**
     * Returns the (UTC) start of the day that was the specified number of days ago adjusted for the timezone of the
     * server
     */
    daysAgoStart(days: number): string;
    /**
     * Uses the debug level to log a message to the system log
     */
    debug(message: string, parm1?: any, parm2?: any, parm3?: any, parm4?: any, parm5?: any): void;
    disableSessionScopeDebug(scopeName: string): void;
    dropColumn(tableName: string, fieldName: string): void;
    dropColumnQuick(tableName: string, fieldName: string): void;
    dropTable(tableName: string): void;
    dropTableRecord(dbObject: GlideRecord): void;
    enableSessionScopeDebug(scopeName: string): void;
    endOfCurrentHour(): string;
    endOfCurrentMinute(): string;
    endOfDay(o: any): string;
    endOfLast120Days(): string;
    endOfLast12Months(): string;
    endOfLast15Minutes(): string;
    endOfLast2Hours(): string;
    endOfLast2Quarters(): string;
    endOfLast2Years(): string;
    endOfLast30Days(): string;
    endOfLast30Minutes(): string;
    endOfLast3Months(): string;
    endOfLast45Minutes(): string;
    endOfLast60Days(): string;
    endOfLast6Months(): string;
    endOfLast7Days(): string;
    endOfLast90Days(): string;
    endOfLast9Months(): string;
    endOfLastHour(): string;
    endOfLastMinute(): string;
    /**
     * Gets the date and time for the end of last month in UTC, adjusted for the timezone of the server
     */
    endOfLastMonth(): string;
    endOfLastQuarter(): string;
    endOfLastSchedulePeriod(scheduleId: string): string;
    /**
     * Returns the (UTC) end of last week adjusted for the timezone of the server
     */
    endOfLastWeek(): string;
    /**
     * Gets the date and time for the end of last year in UTC, adjusted for the timezone of the server
     */
    endOfLastYear(): string;
    endOfMonth(o: any): string;
    endOfNext2Quarters(): string;
    /**
     * Gets the date and time for the end of next month in UTC, adjusted for the timezone of the server
     */
    endOfNextMonth(): string;
    endOfNextQuarter(): string;
    endOfNextSchedulePeriod(scheduleId: string): string;
    /**
     * Returns the (UTC) end of next week adjusted for the timezone of the server
     */
    endOfNextWeek(): string;
    /**
     * Gets the date and time for the end of next year in UTC, adjusted for the timezone of the server
     */
    endOfNextYear(): string;
    endOfOneYearAgo(): string;
    endOfSchedulePeriodsAgo(periodsAgo: number, scheduleId: string): string;
    /**
     * Gets the date and time for the end of this month in UTC, adjusted for the timezone of the server
     */
    endOfThisMonth(): string;
    /**
     * Gets the date and time for the end of this quarter in UTC, adjusted for the timezone of the server
     */
    endOfThisQuarter(): string;
    endOfThisSchedulePeriod(scheduleId: string): string;
    /**
     * Gets the date and time for the end of this week in UTC, adjusted for the timezone of the server
     */
    endOfThisWeek(): string;
    /**
     * Gets the date and time for the end of this year in UTC, adjusted for the timezone of the server
     */
    endOfThisYear(): string;
    endOfToday(): string;
    endOfTomorrow(): string;
    /**
     * Returns the (UTC) end of the specified week adjusted for the timezone of the current session
     */
    endOfWeek(o: any): string;
    endOfYear(o: any): string;
    endOfYesterday(): string;
    ensureCompositeIndex(tableName: string, sfields: string, indexName: string): void;
    ensureIndex(tableName: string, elementName: string): boolean;
    /**
     * Uses the error level to log a message to the system log
     */
    error(message: string, parm1?: any, parm2?: any, parm3?: any, parm4?: any, parm5?: any): void;
    /**
     * Queues an event for the event manager
     */
    eventQueue(name: string, instance: any, parm1: string, parm2: string, queue: string): void;
    fieldExists(tableName: string, fieldName: string): boolean;
    flushAccessMessages(): void;
    flushMessages(): void;
    flushStatus(): void;
    /**
     * Generates a GUID that can be used when a unique identifier is required
     */
    generateGUID(o: any): string;
    getAccessMessages(): Array<any>;
    /**
     * Gets the caller scope name, or returns null if there is no caller
     */
    getCallerScopeName(): string;
    /**
     * Gets a string representing the cache version for a CSS file
     */
    getCssCacheVersionString(theme: string): string;
    /**
     * Gets the ID of current application, defined as a user preference and set by the application picker
     */
    getCurrentApplicationId(): string;
    getCurrentApplicationName(): string;
    getCurrentApplicationScope(): string;
    /**
     * Gets the name of the current scope
     */
    getCurrentScopeName(): string;
    getDateFormat(): string;
    getDateTimeFormat(): string;
    getDictionaryEntryPackage(tableName: string, fieldName: string): string;
    getDictionaryEntryScope(tableName: string, fieldName: string): string;
    getDisplayValueFor(table: string, key: string, field: string): string;
    /**
     * Returns the date of the duration time after January 1
     */
    getDurationDate(duration: string): string;
    getErrorMessages(): Array<any>;
    getImpersonatingUserDisplayName(): string;
    getImpersonatingUserID(): string;
    getImpersonatingUserName(): string;
    getInScopeDBViews(): Array<string>;
    getInScopeTables(): Array<string>;
    getInfoMessages(): Array<any>;
    getMessages(type: string): Array<any>;
    getNavMessage(): any;
    getNodeName(o: any, i: number): string;
    getNodeValue(o: any, i: number): string;
    /**
     * Retrieves the value of the given property.
     */
    getProperty(key: string, alt: any): string;
    getScriptError(script: string): string;
    getScriptErrorFromScope(script: string, scopeId: string): string;
    /**
     * Gets a reference to the current Glide session
     */
    getSession(): any;
    /**
     * Gets the GlideSession Session ID
     */
    getSessionID(): string;
    getSessionToken(): string;
    getSysTimeZone(): string;
    getTimeFormat(): string;
    getTrivialMessages(): Array<any>;
    getUpgradeDebuggerResult(): UpgradeDebuggerResult;
    /**
     * Gets the current URI for the session
     */
    getUrlOnStack(): string;
    /**
     * Returns a reference to the GlideUser object for the current user
     */
    getUser(): GlideUser;
    /**
     * Gets the display name of the current user (e.g., Abel Tuter, as opposed to abel.tuter)
     */
    getUserDisplayName(): string;
    /**
     * Gets the sys_id of the current user
     */
    getUserID(): string;
    /**
     * Gets the username, or User ID, of the current user (e.g., abel.tuter)
     */
    getUserName(): string;
    getUserNameByUserID(userID: string): string;
    getXMLNodeList(xml: string): Array<any>;
    getXMLText(xml: string, xpath: string): string;
    hasMessages(buckets: any): boolean;
    /**
     * Determines if the current user has the specified role
     */
    hasRole(role: string): boolean;
    hasRoleInGroup(role: any, group: any): boolean;
    healthCheck(filePattern: string, reportonly: boolean): boolean;
    /**
     * number of hours ago
     */
    hoursAgo(hours: number): string;
    /**
     * Returns the (UTC) end of the hour that was the specified number of hours ago adjusted for the timezone of the
     * server
     */
    hoursAgoEnd(hours: number): string;
    hoursAgoLocal(hours: number): string;
    /**
     * Returns the (UTC) start of the hour that was the specified number of hours ago adjusted for the timezone of the
     * server
     */
    hoursAgoStart(hours: number): string;
    /**
     * Provides a safe way to call from the sandbox, allowing only trusted scripts to be included
     */
    include(name: string): boolean;
    indexUpdate(dirName: string): void;
    /**
     * Uses the info level to log a message to the system log
     */
    info(message: string, parm1?: any, parm2?: any, parm3?: any, parm4?: any, parm5?: any): void;
    isCleaningDemoData(): boolean;
    isCurrentApplicationCrossScopeProtected(): boolean;
    isCurrentApplicationCustom(): boolean;
    isCurrentApplicationInGlobalScope(): boolean;
    isDebugging(): boolean;
    isESLatest(): boolean;
    isFirstDayOfMonth(o: any): boolean;
    isFirstDayOfWeek(o: any): boolean;
    isFirstDayOfYear(o: any): boolean;
    /**
     * Checks if the current session is interactive
     */
    isInteractive(): boolean;
    isLastDayOfMonth(o: any): boolean;
    isLastDayOfWeek(o: any): boolean;
    isLastDayOfYear(o: any): boolean;
    /**
     * Determines if the current user is currently logged in
     */
    isLoggedIn(): boolean;
    /**
     * Determines if the UI is running as mobile
     */
    isMobile(): boolean;
    isScopeAdminForAnyApp(): boolean;
    isScopedAdminApp(): boolean;
    isScopedApp(): boolean;
    isSessionScopeDebugging(scopeName: string): boolean;
    isTableInScope(tableName: string): boolean;
    isUpgradeDebuggerEnabled(): boolean;
    isValidScript(script: string): boolean;
    isValidScriptFromScope(script: string, scopeId: string): boolean;
    lastWeek(): string;
    load(fileName: string): void;
    loadBatchScript(fileName: string): void;
    loadFixes(o: any): void;
    loadResource(pluginName: string, resourcePath: string): void;
    loadUpdates(o: any): void;
    /**
     * number of minutes ago
     */
    minutesAgo(minutes: number): string;
    /**
     * Returns the (UTC) end of the minute that was the specified number of minutes ago adjusted for the timezone of the
     * serve
     */
    minutesAgoEnd(minutes: number): string;
    /**
     * Returns the (UTC) start of the minute that was the specified number of minutes ago adjusted for the timezone of
     * the serve
     */
    minutesAgoStart(minutes: number): string;
    /**
     * Returns the (UTC) start of the quarter that was the specified number of months ago adjusted for the timezone
     * of the server
     */
    monthsAgo(month: number): string;
    monthsAgoEnd(month: number): string;
    /**
     * Returns the (UTC) start of the quarter that was the specified number of months ago adjusted for the timezone of
     * the server
     */
    monthsAgoStart(month: number): string;
    /**
     * Queries an object and returns true if the object is null, undefined, or contains an empty string
     */
    nil(o: any): boolean;
    now(): string;
    nowDateTime(): string;
    nowGlideDateTime(): GlideDateTime;
    nowNoTZ(): string;
    quartersAgo(quarters: number): string;
    /**
     * Returns the (UTC) end of the quarter that was the specified number of quarters ago adjusted for the timezone of
     * the server
     */
    quartersAgoEnd(quarters: number): string;
    /**
     * Returns the (UTC) start of the quarter that was the specified number of quarters ago adjusted for the timezone
     * of the server
     */
    quartersAgoStart(quarters: number): string;
    rebuildAllIndexes(): void;
    rebuildIndexes(tableName: string): void;
    renameTable(tableName: string, newTableName: string, cacheFlush: boolean): void;
    reset(): boolean;
    resetDB(dbName: string): void;
    scheduleScript(scriptName: string, currentObj: any, parmString: any): void;
    setCleaningDemoData(cleaning: boolean): void;
    setCurrentApplicationId(appId: string): string;
    /**
     * Set the redirect URI for this transaction. This determines the next page the user will see
     */
    setRedirect(o: any): void;
    setReturn(o: any): void;
    setTrackMetadataDeletes(onOrOff: boolean): boolean;
    sql(statement: string): void;
    sqlItemsByField(table: string, sfields: any, fwfield: string, value: string, limit: number): Array<any>;
    sqlItemsByID(table: string, sfields: any, sys_id: string, limit: number): Array<any>;
    statsThisSession(onOff: boolean): void;
    statsThisSessionThreshold(threshold: number): void;
    suppressTextIndex(suppress: boolean): boolean;
    suppressUpdateSynch(suppress: boolean): boolean;
    tableCreate(name: string, label: any): string;
    tableDrop(name: string): void;
    /**
     * Determines if a database table exists
     */
    tableExists(name: string): boolean;
    trace(onOff: boolean): void;
    truncateTable(name: string): void;
    unload(tableName: string, fileName: string): void;
    unloadAll(path: string): void;
    unloadChoices(tableName: string, fieldName: string, baseline: string): void;
    unloadRecordToXML(o: any, indent: boolean): string;
    unloadWithQuery(tableName: string, fileName: string, query: string): void;
    updateSave(o: any): void;
    updateUnload(): void;
    updateUserRoles(userSysId: string): void;
    user(): string;
    userID(): string;
    user_id(): string;
    /**
     * Uses the warn level to log a message to the system log
     */
    warn(message: string, parm1?: any, parm2?: any, parm3?: any, parm4?: any, parm5?: any): void;
    yearsAgo(year: number): string;
    /**
     * Returns (UTC) 24 hours ago adjusted for the timezone of the current session
     */
    yesterday(): string;
    constructor();
}
export declare const gs: GlideSystem;
export {};
