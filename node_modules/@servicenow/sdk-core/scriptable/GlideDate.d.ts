import { GlideDateTime } from './GlideDateTime';
/**
 * The scoped GlideDate class provides methods for performing operations on GlideDate objects, such as instantiating
 * GlideDate objects or working with GlideDate fields
 */
export declare class GlideDate extends GlideDateTime {
    constructor();
    constructor(date: Date);
    /**
     * Gets the date in the given date format
     */
    getByFormat(format: string): string;
    /**
     * Returns the day part of a date with no timezone conversion
     */
    getDayOfMonthNoTZ(): number;
    getDisplayValue(): string;
    /**
     * Gets the display value in the internal format (yyyy-MM-dd). Note: This method is useful for date or time fields,
     * but not date fields
     */
    getDisplayValueInternal(): string;
    getDisplayValueLang(style: string): string;
    getDisplayValueLang(style: string, language: string): string;
    /**
     * Returns the month part of a date with no timezone conversion
     */
    getMonthNoTZ(): number;
    /**
     * Returns the year part of a date with no timezone conversion
     */
    getYearNoTZ(): number;
    /**
     * Sets a date value using the current user's display format and time zone
     */
    setDisplayValue(asDisplayed: string): void;
    setDisplayValue(value: string, format: string): void;
    /**
     * Gets the date in the current user's display format and time zone
     */
    setDisplayValueLang(asDisplayed: string, style: string): void;
    setDisplayValueLang(asDisplayed: string, style: string, language: string): void;
    /**
     * Sets the date of the GlideDate object
     */
    setValue(o: any): void;
    /**
     * Sets the date and time
     */
    setValue(number: number): void;
}
