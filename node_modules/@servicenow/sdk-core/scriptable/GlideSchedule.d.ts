import { GlideDateTime } from './GlideDateTime';
import { GlideDuration } from './GlideDuration';
/**
 * The scoped GlideSchedule API provides methods for performing operations on GlideSchedule objects, such as adding new
 * schedule segments to a schedule, determining if a datetime is within the schedule...
 */
export declare class GlideSchedule {
    /**
     * Adds a new schedule segment to the current schedule
     */
    add(startDate: GlideDateTime, offset: GlideDuration): GlideDateTime;
    /**
     * Determines the elapsed time in the schedule between two date time values using the timezone of the schedule or,
     * if that is not specified, the timezone of the session
     */
    duration(startDate: GlideDateTime, endDate: GlideDateTime): GlideDuration;
    /**
     * Gets the current schedule name
     */
    getName(): string;
    /**
     * Determines if the current schedule is valid. A schedule is valid if it has at least one schedule span
     */
    isValid(): boolean;
    /**
     * Loads a schedule with the schedule information. If a timezone is not specified or is nil, the current session
     * timezone is used for the schedule
     */
    load(sysID: string): void;
    /**
     * Sets the timezone for the current schedule
     */
    setTimeZone(tz: string): void;
    constructor();
}
