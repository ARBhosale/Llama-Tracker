import { GlideMemoryRecord } from './GlideMemoryRecord';
import { GlideRecord } from './GlideRecord';
import { GlideVector } from './GlideVector';
/**
 * The Scoped GlideUser API provides access to information about the current user and current user roles. Using the Scoped GlideUser API avoids the need to use the slower GlideRecord queries to get user...
 */
export declare class GlideUser {
    authenticate(user: string, password: string): boolean;
    authenticateMutualAuthToken(): string;
    authenticateOAuthAccessToken(token: string): string;
    authenticateUser(user: string, password: string): string;
    exists(): boolean;
    getAllGroups(): Array<string>;
    getAvatar(): string;
    getBusinessNumber(): string;
    /**
     * Gets the Company ID of the current user
     */
    getCompanyID(): string;
    getCompanyRecord(): GlideRecord;
    getCountry(): string;
    getCurrentUser(): GlideUser;
    getDateFormat(): string;
    getDateFormatEx(style: string): string;
    getDateTimeFormat(): string;
    getDepartmentID(): string;
    /**
     * Gets the display name of the current user
     */
    getDisplayName(): string;
    getDomainDisplayValue(): string;
    getDomainID(): string;
    getEmail(): string;
    getFirstName(): string;
    getFullName(): string;
    /**
     * Gets the sys_id of current user
     */
    getID(): string;
    getInitials(): string;
    getLanguage(): string;
    getLastName(): string;
    getLocation(): string;
    getManagedGroups(): Array<string>;
    getManagerID(): string;
    getManagerName(): string;
    getMobileNumber(): string;
    getMyExplicitGroups(): Array<string>;
    getMyExplicitGroups(u: string): Array<string>;
    getMyGroups(): Array<string>;
    getMyGroups(user: string): Array<string>;
    getMyGroupsExcludeAdmin(): Array<string>;
    /**
     * Gets the user id, or login name, of the current user
     */
    getName(): string;
    /**
     * Gets the specified user preference value for the current user
     */
    getPreference(name: string): string;
    getRecord(): GlideMemoryRecord;
    getRoles(): GlideVector;
    getSysId(name: string, value: string): string;
    getSysIdByEmail(email: string): string;
    getSysTimeZone(): string;
    getTZ(): string;
    getTimeFormat(): string;
    getTitle(): string;
    getUser(user: string): GlideUser;
    getUserByEmail(email: string): GlideUser;
    getUserByID(id: string): GlideUser;
    getUserRoles(): GlideVector;
    getUserType(): string;
    /**
     * Determines if the current user has the specified role
     */
    hasRole(o: any): boolean;
    hasRoles(): boolean;
    isACRUser(): boolean;
    isDefault(): boolean;
    isExplicitMemberOf(group: any): boolean;
    isLockedOut(): boolean;
    isLockedOut(userName: string): boolean;
    /**
     * Determines if the current user is a member of the specified group
     */
    isMemberOf(group: any): boolean;
    isOpenIDConnect(): boolean;
    isReadOnlyUser(): boolean;
    isTimeLimitedCredential(): boolean;
    isWebSvcAccessOnly(userName: string): boolean;
    isXML(): boolean;
    resolveNameFromLoginName(name: any): string;
    resolveNameFromLoginName(name: string): string;
    resolveNameFromSysID(sysID: string): string;
    resolveSysId(value: string): string;
    /**
     * * Saves a user preference value to the database
     */
    savePreference(name: string, value: string): void;
    savePreferences(): void;
    setDateFormat(df: string): void;
    setDomainID(id: string): void;
    setPreference(name: string, value: string): void;
    setPreferencesLoaded(b: boolean): void;
    setTimeFormat(tf: string): void;
    constructor();
}
