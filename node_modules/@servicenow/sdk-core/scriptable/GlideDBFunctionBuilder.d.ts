/**
 * The Scoped GlideDBFunctionBuilder provides a builder API for creating platform function definition
 */
export declare class GlideDBFunctionBuilder {
    /**
     * Start an addition function
     */
    add(): GlideDBFunctionBuilder;
    /**
     * Return the completed function definition
     */
    build(): string;
    case(): GlideDBFunctionBuilder;
    /**
     * Start a function that will return the first non-null value in a list of values
     */
    coalesce(): GlideDBFunctionBuilder;
    /**
     * Start a concatenation function
     */
    concat(): GlideDBFunctionBuilder;
    /**
     * Add a constant parameter to the current function
     */
    constant(constant: string): GlideDBFunctionBuilder;
    /**
     * Start a function that return the duration between 2 dates
     */
    datediff(): GlideDBFunctionBuilder;
    /**
     * Start a function that returns the day of the week of a given date
     */
    dayofweek(): GlideDBFunctionBuilder;
    /**
     * Start a division function
     */
    divide(): GlideDBFunctionBuilder;
    /**
     * End the current function
     */
    endfunc(): GlideDBFunctionBuilder;
    /**
     * Add a field parameter to the current function
     */
    field(field: string): GlideDBFunctionBuilder;
    greatest(): GlideDBFunctionBuilder;
    jsonValue(): GlideDBFunctionBuilder;
    least(): GlideDBFunctionBuilder;
    /**
     * Start a length function
     */
    length(): GlideDBFunctionBuilder;
    /**
     * Start a multiplication function
     */
    multiply(): GlideDBFunctionBuilder;
    /**
     * Start a function that returns the current timestamp in the UTC timezone. This function should be used as a
     * parameter to the datediff function to calculate a duration between the current datetime and...
     */
    now(): GlideDBFunctionBuilder;
    /**
     * Start a function that will return the first occurrence of a substring within a string. Takes optional search
     * start position as third arg.
     */
    position(): GlideDBFunctionBuilder;
    /**
     * Start a function that will return a substring when given a string and an integer position. Optionally a third
     * length parameter can be included to limit the length of the resulting substring.
     */
    substring(): GlideDBFunctionBuilder;
    /**
     * Start a subtraction function
     */
    subtract(): GlideDBFunctionBuilder;
    constructor();
}
