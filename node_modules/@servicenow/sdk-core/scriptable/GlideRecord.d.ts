import { GlideQueryCondition } from './GlideQueryCondition';
import { GlideElementDescriptor } from './GlideElementDescriptor';
import { GlideElement } from './GlideElement';
/**
 * Scoped GlideRecord is used for database operations instead of writing SQL queries. Provides data access APIs to
 * retrieve, update, and delete records from a table
 */
export declare class GlideRecord {
    _next(): boolean;
    _operation(): string;
    _query(field: any, value: any): void;
    /**
     * Adds a filter to return active records
     */
    addActiveQuery(): GlideQueryCondition;
    addDomainQuery(o: any): void;
    /**
     * Adds an encoded query to the other queries that may have been set
     */
    addEncodedQuery(query: string): void;
    /**
     * Retrieve the specified platform function in addition of the field values
     */
    addFunction(func: string): void;
    addInactiveQuery(): GlideQueryCondition;
    /**
     * Adds a filter to return records based on a relationship in a related table
     */
    addJoinQuery(joinTable: string, primaryField: any, joinTableField: any): GlideQueryCondition;
    /**
     * Adds a filter to return records where the specified field is not null
     */
    addNotNullQuery(fieldName: string): GlideQueryCondition;
    /**
     * Adds a filter to return records where the specified field is null
     */
    addNullQuery(fieldName: string): GlideQueryCondition;
    /**
     * Adds a filter to return records by specifying a field and value. You can use an optional 'operator' as a second
     * parameter
     */
    addQuery(name: string, operator: any, value: any): GlideQueryCondition;
    addValue(field: string, value: number): void;
    appendOrQuery(condition: any, name: string, operator: any, value: any): void;
    applyEncodedQuery(queryString: string): void;
    applyRowSecurity(): void;
    applyTemplate(template: string): void;
    attachGlideListener(className: string, insert: boolean, update: boolean, del: boolean, fields: string, foreign: any, foreign2: any, details: string): void;
    autoSysFields(b: boolean): void;
    /**
     * Determines if the Access Control Rules which include the user's roles permit inserting new records in this table
     */
    canCreate(): boolean;
    /**
     * Determines if the Access Control Rules which include the user's roles permit deleting records in this table
     */
    canDelete(): boolean;
    /**
     * Determines if the Access Control Rules which include the user's roles permit reading records in this table
     */
    canRead(): boolean;
    /**
     * Determines if the Access Control Rules which include the user's roles permit editing records in this table
     */
    canWrite(): boolean;
    changes(): boolean;
    /**
     * Sets a range of rows to be returned by subsequent queries. If forceCount is true, getRowCount() method will
     * return all possible records
     */
    chooseWindow(f: number, l: number, forceCount: boolean): void;
    close(): void;
    constructor(tableName: string);
    createElement(): boolean;
    createIndex(): boolean;
    /**
     * Deletes records that satisfy current query condition
     */
    deleteMultiple(): void;
    /**
     * Deletes the current record
     */
    deleteRecord(): boolean;
    dropIndex(): boolean;
    enableSessionLanguageJoin(): void;
    evaluateAsDefault(fieldName: string): string;
    find(columnName: string, value: string): boolean;
    findForeignKey(collection: string): string;
    get(id: string): void;
    /**
     * Defines a GlideRecord based on the specified expression of name = value
     */
    get(name: any, value: any): boolean;
    /**
     * Gets the attributes on the field in question from the dictionary
     */
    getAttribute(attribute: string): string;
    getBooleanAttribute(attribute: string): boolean;
    /**
     * Gets the optional category value of the query
     */
    getCategory(): string;
    getClassDisplayValue(): string;
    /**
     * Retrieves the name of the display field
     */
    getDisplayName(): string;
    /**
     * Retrieves the display value for the current record
     */
    getDisplayValue(name: string): string;
    getED(): GlideElementDescriptor;
    /**
     * Retrieves the GlideElement for a specified field
     */
    getElement(columnName: string): GlideElement;
    getElements(): Array<any>;
    /**
     * Retrieves the query condition of the current result set as an encoded query string
     */
    getEncodedQuery(): string;
    getEngineParameter(name: string): string;
    getEscapedDisplayValue(): string;
    getFields(): Array<any>;
    /**
     * The label of the field as a String
     */
    getLabel(): string;
    /**
     * Retrieves the last error message
     */
    getLastErrorMessage(): string;
    /**
     * Retrieves a link to the current record
     */
    getLink(noStack: boolean): string;
    getLocation(): number;
    getPlural(): string;
    /**
     * Retrieves the class name for the current record
     */
    getRecordClassName(): string;
    getRelatedLists(): Record<any, any>;
    getRelatedRecords(foreignKey: string, collectionID: string): void;
    getRelatedTables(): Record<string, string>;
    /**
     * Retrieves the number of rows in the GlideRecord
     */
    getRowCount(): number;
    getRowNumber(): number;
    getSetRowCount(): number;
    /**
     * Retrieves the table name associated with this GlideRecord
     */
    getTableName(): string;
    getTableScope(): string;
    getTableScopeId(): string;
    getTableScopeName(): string;
    /**
     * Gets the primary key of the record, which is usually the sys_id unless otherwise specified
     */
    getUniqueValue(): string;
    /**
     * Retrieves the underlying value of a field
     */
    getValue(name: string): string;
    hasAttachments(): boolean;
    /**
     * Determines if there are any more records in the GlideRecord
     */
    hasNext(): boolean;
    hasRightsTo(operation: string): boolean;
    incrementViewCount(): void;
    /**
     * Creates an empty record suitable for population before an insert
     */
    initialize(): void;
    /**
     * Insert a new record using the field values that have been set for the current record
     */
    insert(): string;
    insertLazy(): string;
    insertOrUpdate(keyField: string): string;
    insertWithReferences(): string;
    instanceOf(className: string): boolean;
    /**
     * Determines whether the current database action is to be aborted. Available in Fuji patch 3
     */
    isActionAborted(): boolean;
    isEncodedQueryValid(query: string): boolean;
    isForeignTable(): boolean;
    isInGlobalScope(): boolean;
    isInSelectedScope(): boolean;
    isInStoreScope(): boolean;
    isMetadata(): boolean;
    /**
     * Checks if the current record is a new record that has not yet been inserted into the database
     */
    isNewRecord(): boolean;
    isReadonly(): boolean;
    /**
     * Determines whether the table exists or not
     */
    isValid(): boolean;
    isValidEncodedQuery(query: string): boolean;
    /**
     * Determines if the given field is defined in the current table
     */
    isValidField(columnName: string): boolean;
    isValidMetadataRecord(): boolean;
    /**
     * Determines if current record is a valid record
     */
    isValidRecord(): boolean;
    isView(): boolean;
    isWorkflow(): boolean;
    largeResultExpected(): void;
    makeReadonly(): void;
    moreEncodedQuery(query: string): void;
    newGlideRecordNamed(tableName: string): GlideRecord;
    /**
     * Creates a new GlideRecord, sets the default values for the fields, and assigns a unique ID to the record
     */
    newRecord(): void;
    /**
     * Moves to the next record in the GlideRecord
     */
    next(): boolean;
    nextRecord(): boolean;
    notifyUser(): void;
    onePassQuery(): void;
    /**
     * Retrieves the current operation being performed, such as insert, update, or delete
     */
    operation(): string;
    /**
     * Specifies an orderBy column
     */
    orderBy(name: string): void;
    /**
     * Specifies a descending orderBy
     */
    orderByDesc(name: string): void;
    popCurrent(): void;
    putCurrent(): void;
    putOptimizers(o: any): void;
    /**
     * Runs the query against the table based on the specified filters by addQuery and addEncodedQuery
     */
    query(field: any, value: any): void;
    queryNoDomain(): void;
    restoreLocation(): void;
    saveLocation(): void;
    scheduleScript(name: string): void;
    /**
     * Sets a flag to indicate if the next database action (insert, update, delete) is to be aborted
     */
    setAbortAction(b: boolean): void;
    /**
     * Sets the value of category for the query
     */
    setCategory(category: string): void;
    setDisplayValue(name: string, value: any): void;
    setEngineParameter(name: string, value: string): void;
    setForceUpdate(e: boolean): void;
    /**
     * Sets the maximum number of records in the GlideRecord to be fetched in the next query
     */
    setLimit(limit: number): void;
    setLocation(rowNumber: number): void;
    /**
     * Sets sys_id value for the current record
     */
    setNewGuid(): string;
    setNewGuidValue(guid: string): void;
    setNoCount(): void;
    setQueryReferences(queryReferences: boolean): void;
    setSystem(isSystem: boolean): void;
    setUseEngines(e: boolean): void;
    /**
     * Sets the value for the specified field.
     */
    setValue(name: string, value: any): void;
    /**
     * Enables and disables the running of business rules and script engines. When disabled, inserts and updates are not
     * audited
     */
    setWorkflow(e: boolean): void;
    targetExtension(tableName: string): void;
    /**
     * Updates the current GlideRecord with any changes that have been made
     */
    update(reason: any): string;
    updateElement(): boolean;
    updateLazy(): boolean;
    /**
     * Updates each GlideRecord in the list with any changes that have been made
     */
    updateMultiple(): void;
    updateNoDomain(reason: any): string;
    updateWithReferences(reason: any): string;
}
