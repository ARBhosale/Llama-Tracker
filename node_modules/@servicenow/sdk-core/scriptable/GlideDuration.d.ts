import { GlideTime } from './GlideTime';
import { GlideDateTime } from './GlideDateTime';
/**
 * The scoped GlideDuration class provides methods for working with spans of time or durations. GlideDuration objects
 * store the duration as a date and time from January 1, 1970, 00:00:00. As a result, ...
 */
export declare class GlideDuration extends GlideTime {
    /**
     * Adds a given duration to the current duration
     */
    add(value: GlideDuration): GlideDuration;
    /**
     * Adds a GlideTime object to the current GlideDateTime object
     */
    add(gd: GlideTime): void;
    add(value: number): void;
    constructor();
    constructor(template: GlideDuration);
    constructor(asDisplayed: string);
    constructor(ms: number);
    /**
     * Gets the number of days
     */
    getDayPart(): number;
    /**
     * Gets the display value of the duration in number of days, hours, and minutes
     */
    getDisplayValue(): string;
    /**
     * Gets the duration value in d HH:mm:ss format
     */
    getDurationValue(): string;
    /**
     * Gets the rounded number of days. If the time part is more than 12 hours, the return value is rounded up.
     * Otherwise, it is rounded down
     */
    getRoundedDayPart(): number;
    isShowTimerAlert(): boolean;
    /**
     * Sets the display value
     */
    setDisplayValue(asDisplayed: string): void;
    setDisplayValue(value: string, format: string): void;
    /**
     * Sets the internal value of the GlideDuration object. Internally, GlideDuration is stored as DateTime
     */
    setValue(o: any): void;
    /**
     * Sets the date and time
     */
    setValue(number: number): void;
    subtract(value: GlideDuration): GlideDuration;
    /**
     * Gets the duration difference between two GlideDateTime values. Pass a single paramter which specifies
     * milliseconds to subtract from the current GlideDateTime object
     */
    subtract(gd: GlideTime): void;
    subtract(value: number): void;
    subtract(value: number): void;
    subtract(start: GlideDateTime, end: GlideDateTime): GlideDuration;
}
