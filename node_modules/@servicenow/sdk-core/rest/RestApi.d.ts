import { Record } from '../db';
import { Entity } from '../entity';
import { z } from 'zod';
import { sys_security_acl } from '../tables';
import { RESTAPIRequest, RESTAPIResponse } from '.';
export declare const VersionSchema: z.ZodObject<{
    version: z.ZodNumber;
    active: z.ZodDefault<z.ZodBoolean>;
    deprecated: z.ZodDefault<z.ZodBoolean>;
    short_description: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    active: boolean;
    version: number;
    short_description: string;
    deprecated: boolean;
}, {
    version: number;
    active?: boolean | undefined;
    deprecated?: boolean | undefined;
    short_description?: string | undefined;
}>;
export declare const RouteSchema: z.ZodObject<{
    name: z.ZodDefault<z.ZodString>;
    script: z.ZodAny;
    method: z.ZodDefault<z.ZodEnum<["GET", "POST", "PUT", "PATCH", "DELETE"]>>;
    path: z.ZodDefault<z.ZodString>;
    active: z.ZodDefault<z.ZodBoolean>;
    consumes: z.ZodDefault<z.ZodString>;
    produces: z.ZodDefault<z.ZodString>;
    authorization: z.ZodDefault<z.ZodBoolean>;
    authentication: z.ZodDefault<z.ZodBoolean>;
    internalRole: z.ZodDefault<z.ZodBoolean>;
    short_description: z.ZodDefault<z.ZodString>;
    request_example: z.ZodDefault<z.ZodString>;
    policy: z.ZodDefault<z.ZodEnum<["", "read", "protected"]>>;
    parameters: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        required: boolean;
    }, {
        name: string;
        required?: boolean | undefined;
    }>, "many">>;
    headers: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        required: z.ZodDefault<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        required: boolean;
    }, {
        name: string;
        required?: boolean | undefined;
    }>, "many">>;
    version: z.ZodOptional<z.ZodNumber>;
    enforce_acl: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
}, "strip", z.ZodTypeAny, {
    active: boolean;
    name: string;
    path: string;
    short_description: string;
    consumes: string;
    enforce_acl: any[];
    produces: string;
    request_example: string;
    method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
    authorization: boolean;
    authentication: boolean;
    internalRole: boolean;
    policy: "" | "read" | "protected";
    parameters: {
        name: string;
        required: boolean;
    }[];
    headers: {
        name: string;
        required: boolean;
    }[];
    script?: any;
    version?: number | undefined;
}, {
    name?: string | undefined;
    script?: any;
    method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | undefined;
    path?: string | undefined;
    active?: boolean | undefined;
    consumes?: string | undefined;
    produces?: string | undefined;
    authorization?: boolean | undefined;
    authentication?: boolean | undefined;
    internalRole?: boolean | undefined;
    short_description?: string | undefined;
    request_example?: string | undefined;
    policy?: "" | "read" | "protected" | undefined;
    parameters?: {
        name: string;
        required?: boolean | undefined;
    }[] | undefined;
    headers?: {
        name: string;
        required?: boolean | undefined;
    }[] | undefined;
    version?: number | undefined;
    enforce_acl?: any[] | undefined;
}>;
export type RestAttributes = z.infer<typeof RestAttributeSchema>;
export declare const RestAttributeSchema: z.ZodObject<{
    name: z.ZodString;
    required: z.ZodDefault<z.ZodBoolean>;
    example_value: z.ZodDefault<z.ZodString>;
    short_description: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    name: string;
    short_description: string;
    required: boolean;
    example_value: string;
}, {
    name: string;
    required?: boolean | undefined;
    example_value?: string | undefined;
    short_description?: string | undefined;
}>;
export declare const RestApiSchema: z.ZodObject<{
    name: z.ZodString;
    active: z.ZodDefault<z.ZodBoolean>;
    consumes: z.ZodDefault<z.ZodString>;
    produces: z.ZodDefault<z.ZodString>;
    default_version: z.ZodOptional<z.ZodNumber>;
    service_id: z.ZodString;
    short_description: z.ZodDefault<z.ZodString>;
    doc_link: z.ZodDefault<z.ZodString>;
    routes: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodDefault<z.ZodString>;
        script: z.ZodAny;
        method: z.ZodDefault<z.ZodEnum<["GET", "POST", "PUT", "PATCH", "DELETE"]>>;
        path: z.ZodDefault<z.ZodString>;
        active: z.ZodDefault<z.ZodBoolean>;
        consumes: z.ZodDefault<z.ZodString>;
        produces: z.ZodDefault<z.ZodString>;
        authorization: z.ZodDefault<z.ZodBoolean>;
        authentication: z.ZodDefault<z.ZodBoolean>;
        internalRole: z.ZodDefault<z.ZodBoolean>;
        short_description: z.ZodDefault<z.ZodString>;
        request_example: z.ZodDefault<z.ZodString>;
        policy: z.ZodDefault<z.ZodEnum<["", "read", "protected"]>>;
        parameters: z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            required: boolean;
        }, {
            name: string;
            required?: boolean | undefined;
        }>, "many">>;
        headers: z.ZodDefault<z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            required: z.ZodDefault<z.ZodBoolean>;
        }, "strip", z.ZodTypeAny, {
            name: string;
            required: boolean;
        }, {
            name: string;
            required?: boolean | undefined;
        }>, "many">>;
        version: z.ZodOptional<z.ZodNumber>;
        enforce_acl: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
    }, "strip", z.ZodTypeAny, {
        active: boolean;
        name: string;
        path: string;
        short_description: string;
        consumes: string;
        enforce_acl: any[];
        produces: string;
        request_example: string;
        method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
        authorization: boolean;
        authentication: boolean;
        internalRole: boolean;
        policy: "" | "read" | "protected";
        parameters: {
            name: string;
            required: boolean;
        }[];
        headers: {
            name: string;
            required: boolean;
        }[];
        script?: any;
        version?: number | undefined;
    }, {
        name?: string | undefined;
        script?: any;
        method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | undefined;
        path?: string | undefined;
        active?: boolean | undefined;
        consumes?: string | undefined;
        produces?: string | undefined;
        authorization?: boolean | undefined;
        authentication?: boolean | undefined;
        internalRole?: boolean | undefined;
        short_description?: string | undefined;
        request_example?: string | undefined;
        policy?: "" | "read" | "protected" | undefined;
        parameters?: {
            name: string;
            required?: boolean | undefined;
        }[] | undefined;
        headers?: {
            name: string;
            required?: boolean | undefined;
        }[] | undefined;
        version?: number | undefined;
        enforce_acl?: any[] | undefined;
    }>, "many">>;
    policy: z.ZodDefault<z.ZodEnum<["", "read", "protected"]>>;
    parameters: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        required: z.ZodDefault<z.ZodBoolean>;
        example_value: z.ZodDefault<z.ZodString>;
        short_description: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        short_description: string;
        required: boolean;
        example_value: string;
    }, {
        name: string;
        required?: boolean | undefined;
        example_value?: string | undefined;
        short_description?: string | undefined;
    }>, "many">>;
    headers: z.ZodDefault<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        required: z.ZodDefault<z.ZodBoolean>;
        example_value: z.ZodDefault<z.ZodString>;
        short_description: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        short_description: string;
        required: boolean;
        example_value: string;
    }, {
        name: string;
        required?: boolean | undefined;
        example_value?: string | undefined;
        short_description?: string | undefined;
    }>, "many">>;
    versions: z.ZodDefault<z.ZodArray<z.ZodObject<{
        version: z.ZodNumber;
        active: z.ZodDefault<z.ZodBoolean>;
        deprecated: z.ZodDefault<z.ZodBoolean>;
        short_description: z.ZodDefault<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        active: boolean;
        version: number;
        short_description: string;
        deprecated: boolean;
    }, {
        version: number;
        active?: boolean | undefined;
        deprecated?: boolean | undefined;
        short_description?: string | undefined;
    }>, "many">>;
    enforce_acl: z.ZodDefault<z.ZodArray<z.ZodAny, "many">>;
}, "strip", z.ZodTypeAny, {
    active: boolean;
    name: string;
    short_description: string;
    consumes: string;
    doc_link: string;
    enforce_acl: any[];
    produces: string;
    service_id: string;
    routes: {
        active: boolean;
        name: string;
        path: string;
        short_description: string;
        consumes: string;
        enforce_acl: any[];
        produces: string;
        request_example: string;
        method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
        authorization: boolean;
        authentication: boolean;
        internalRole: boolean;
        policy: "" | "read" | "protected";
        parameters: {
            name: string;
            required: boolean;
        }[];
        headers: {
            name: string;
            required: boolean;
        }[];
        script?: any;
        version?: number | undefined;
    }[];
    policy: "" | "read" | "protected";
    parameters: {
        name: string;
        short_description: string;
        required: boolean;
        example_value: string;
    }[];
    headers: {
        name: string;
        short_description: string;
        required: boolean;
        example_value: string;
    }[];
    versions: {
        active: boolean;
        version: number;
        short_description: string;
        deprecated: boolean;
    }[];
    default_version?: number | undefined;
}, {
    name: string;
    service_id: string;
    active?: boolean | undefined;
    consumes?: string | undefined;
    produces?: string | undefined;
    default_version?: number | undefined;
    short_description?: string | undefined;
    doc_link?: string | undefined;
    routes?: {
        name?: string | undefined;
        script?: any;
        method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | undefined;
        path?: string | undefined;
        active?: boolean | undefined;
        consumes?: string | undefined;
        produces?: string | undefined;
        authorization?: boolean | undefined;
        authentication?: boolean | undefined;
        internalRole?: boolean | undefined;
        short_description?: string | undefined;
        request_example?: string | undefined;
        policy?: "" | "read" | "protected" | undefined;
        parameters?: {
            name: string;
            required?: boolean | undefined;
        }[] | undefined;
        headers?: {
            name: string;
            required?: boolean | undefined;
        }[] | undefined;
        version?: number | undefined;
        enforce_acl?: any[] | undefined;
    }[] | undefined;
    policy?: "" | "read" | "protected" | undefined;
    parameters?: {
        name: string;
        required?: boolean | undefined;
        example_value?: string | undefined;
        short_description?: string | undefined;
    }[] | undefined;
    headers?: {
        name: string;
        required?: boolean | undefined;
        example_value?: string | undefined;
        short_description?: string | undefined;
    }[] | undefined;
    versions?: {
        version: number;
        active?: boolean | undefined;
        deprecated?: boolean | undefined;
        short_description?: string | undefined;
    }[] | undefined;
    enforce_acl?: any[] | undefined;
}>;
type Routes<T extends string, Z extends string, P extends Parameters<T>, H extends Headers<Z>> = {
    name?: string;
    script: ((request: RESTAPIRequest, response: RESTAPIResponse) => void) | string;
    method?: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';
    path?: string;
    active?: boolean;
    consumes?: string;
    produces?: string;
    authorization?: boolean;
    authentication?: boolean;
    internalRole?: boolean;
    enforce_acl?: (string | Record<sys_security_acl>)[];
    short_description?: string;
    request_example?: string;
    policy?: '' | 'read' | 'protected';
    parameters?: {
        name: P['name'];
        required?: boolean;
    }[];
    headers?: {
        name: H['name'];
        required?: boolean;
    }[];
};
type Parameters<T extends string> = {
    name: T;
    required?: boolean;
    example_value?: string;
    short_description?: string;
};
type Headers<Z extends string> = {
    name: Z;
    required?: boolean;
    example_value?: string;
    short_description?: string;
};
type Version<I extends number> = {
    version: I;
    active?: boolean;
    deprecated?: boolean;
    is_default?: boolean;
    short_description?: string;
};
export type RestApi<T extends string, Z extends string, I extends number, P extends Parameters<T>, H extends Headers<Z>, V extends Version<I>> = {
    name: string;
    active?: boolean;
    consumes?: string;
    produces?: string;
    default_version?: V['version'];
    enforce_acl?: (string | Record<sys_security_acl>)[];
    service_id: string;
    short_description?: string;
    policy?: '' | 'read' | 'protected';
    doc_link?: string;
    parameters?: Parameters<T>[];
    headers?: Headers<Z>[];
} & ({
    routes?: (Routes<T, Z, P, H> & {
        version: V['version'];
    })[];
    versions: [V, ...V[]];
} | {
    routes?: Routes<T, Z, P, H>[];
    versions?: never;
});
export declare function RestApi<T extends string, Z extends string, I extends number, P extends Parameters<T>, H extends Headers<Z>, V extends Version<I>>(api: RestApi<T, Z, I, P, H, V>): {
    active: boolean;
    name: string;
    short_description: string;
    consumes: string;
    doc_link: string;
    enforce_acl: any[];
    produces: string;
    service_id: string;
    routes: {
        active: boolean;
        name: string;
        path: string;
        short_description: string;
        consumes: string;
        enforce_acl: any[];
        produces: string;
        request_example: string;
        method: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
        authorization: boolean;
        authentication: boolean;
        internalRole: boolean;
        policy: "" | "read" | "protected";
        parameters: {
            name: string;
            required: boolean;
        }[];
        headers: {
            name: string;
            required: boolean;
        }[];
        script?: any;
        version?: number | undefined;
    }[];
    policy: "" | "read" | "protected";
    parameters: {
        name: string;
        short_description: string;
        required: boolean;
        example_value: string;
    }[];
    headers: {
        name: string;
        short_description: string;
        required: boolean;
        example_value: string;
    }[];
    versions: {
        active: boolean;
        version: number;
        short_description: string;
        deprecated: boolean;
    }[];
    default_version?: number | undefined;
} & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_ws_definition";
        readonly extends: {
            readonly name: "sys_metadata";
            readonly schema: {
                readonly sys_class_name: import("../db").Typed<string, {
                    readonly label: "Class";
                    readonly default: "javascript:current.getTableName();";
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_name: import("../db").Typed<string, {
                    readonly maxLength: 255;
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_package: import("../db").Typed<string | Record<{
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                            readonly label: "Subscription requirement";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "None";
                                    readonly sequence: 1;
                                };
                                readonly log: {
                                    readonly label: "Monitor";
                                    readonly sequence: 2;
                                };
                                readonly enforce: {
                                    readonly label: "Required";
                                    readonly sequence: 3;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly ide_created: import("../db").Typed<string, {
                            readonly label: "IDE Created";
                            readonly maxLength: 10;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly package_json: import("../db").Typed<string, {
                            readonly label: "Package JSON";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                    readonly label: "Protection policy";
                    readonly choices: {
                        readonly read: "Read-only";
                        readonly protected: "Protected";
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_scope: import("../db").Typed<string | Record<{
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                            readonly choices: {
                                readonly traditional: "Compatibility Mode";
                                readonly helsinki_es5: "ES5 Standards Mode";
                                readonly es_latest: "ECMAScript 2021 (ES12)";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                            readonly choices: {
                                readonly permissive: "Tracking";
                                readonly enforcing: "Enforcing";
                            };
                            readonly dropdown: "dropdown with none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                                readonly choices: {
                                    readonly traditional: "Compatibility Mode";
                                    readonly helsinki_es5: "ES5 Standards Mode";
                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                readonly choices: {
                                    readonly permissive: "Tracking";
                                    readonly enforcing: "Enforcing";
                                };
                                readonly dropdown: "dropdown with none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_update_name: import("../db").Typed<string, {
                    readonly label: "Update name";
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
            };
        };
        readonly schema: {
            readonly name: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly active: import("../db").Typed<boolean, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly base_uri: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly consumes: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly consumes_customized: import("../db").Typed<boolean, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly default_version: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly doc_link: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly enforce_acl: import("../db").Typed<Record<{
                readonly name: "sys_security_acl";
                readonly extends: {
                    readonly name: "sys_metadata";
                    readonly schema: {
                        readonly sys_class_name: import("../db").Typed<string, {
                            readonly label: "Class";
                            readonly default: "javascript:current.getTableName();";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly sys_name: import("../db").Typed<string, {
                            readonly maxLength: 255;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly sys_package: import("../db").Typed<string | Record<{
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly sys_policy: import("../db").Typed<"read" | "protected", {
                            readonly label: "Protection policy";
                            readonly choices: {
                                readonly read: "Read-only";
                                readonly protected: "Protected";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly sys_scope: import("../db").Typed<string | Record<{
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                    readonly choices: {
                                        readonly traditional: "Compatibility Mode";
                                        readonly helsinki_es5: "ES5 Standards Mode";
                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                    readonly choices: {
                                        readonly permissive: "Tracking";
                                        readonly enforcing: "Enforcing";
                                    };
                                    readonly dropdown: "dropdown with none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                        readonly choices: {
                                            readonly traditional: "Compatibility Mode";
                                            readonly helsinki_es5: "ES5 Standards Mode";
                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                        readonly choices: {
                                            readonly permissive: "Tracking";
                                            readonly enforcing: "Enforcing";
                                        };
                                        readonly dropdown: "dropdown with none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly sys_update_name: import("../db").Typed<string, {
                            readonly label: "Update name";
                            readonly maxLength: 250;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                };
                readonly schema: {
                    readonly name: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly active: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly advanced: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly script: import("../db").Typed<import("../db").ScriptModule<Function>, {}> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly admin_overrides: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly type: import("../db").Typed<string | Record<{
                        readonly name: "sys_security_type";
                        readonly extends: {
                            readonly name: "sys_metadata";
                            readonly schema: {
                                readonly sys_class_name: import("../db").Typed<string, {
                                    readonly label: "Class";
                                    readonly default: "javascript:current.getTableName();";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_name: import("../db").Typed<string, {
                                    readonly maxLength: 255;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_package: import("../db").Typed<string | Record<{
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                    readonly label: "Protection policy";
                                    readonly choices: {
                                        readonly read: "Read-only";
                                        readonly protected: "Protected";
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_scope: import("../db").Typed<string | Record<{
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                            readonly choices: {
                                                readonly traditional: "Compatibility Mode";
                                                readonly helsinki_es5: "ES5 Standards Mode";
                                                readonly es_latest: "ECMAScript 2021 (ES12)";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                            readonly choices: {
                                                readonly permissive: "Tracking";
                                                readonly enforcing: "Enforcing";
                                            };
                                            readonly dropdown: "dropdown with none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                                readonly choices: {
                                                    readonly traditional: "Compatibility Mode";
                                                    readonly helsinki_es5: "ES5 Standards Mode";
                                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                                };
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                readonly choices: {
                                                    readonly permissive: "Tracking";
                                                    readonly enforcing: "Enforcing";
                                                };
                                                readonly dropdown: "dropdown with none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_update_name: import("../db").Typed<string, {
                                    readonly label: "Update name";
                                    readonly maxLength: 250;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                        readonly schema: {
                            readonly description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly mandatory: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    }>, {
                        readonly mandatory: true;
                        readonly referenceTable: {
                            readonly name: "sys_security_type";
                            readonly extends: {
                                readonly name: "sys_metadata";
                                readonly schema: {
                                    readonly sys_class_name: import("../db").Typed<string, {
                                        readonly label: "Class";
                                        readonly default: "javascript:current.getTableName();";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_name: import("../db").Typed<string, {
                                        readonly maxLength: 255;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_package: import("../db").Typed<string | Record<{
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                        readonly label: "Protection policy";
                                        readonly choices: {
                                            readonly read: "Read-only";
                                            readonly protected: "Protected";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_scope: import("../db").Typed<string | Record<{
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                                readonly choices: {
                                                    readonly traditional: "Compatibility Mode";
                                                    readonly helsinki_es5: "ES5 Standards Mode";
                                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                                };
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                readonly choices: {
                                                    readonly permissive: "Tracking";
                                                    readonly enforcing: "Enforcing";
                                                };
                                                readonly dropdown: "dropdown with none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                    readonly choices: {
                                                        readonly traditional: "Compatibility Mode";
                                                        readonly helsinki_es5: "ES5 Standards Mode";
                                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                                    };
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                    readonly choices: {
                                                        readonly permissive: "Tracking";
                                                        readonly enforcing: "Enforcing";
                                                    };
                                                    readonly dropdown: "dropdown with none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_update_name: import("../db").Typed<string, {
                                        readonly label: "Update name";
                                        readonly maxLength: 250;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly mandatory: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly condition: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly operation: import("../db").Typed<string | Record<{
                        readonly name: "sys_security_operation";
                        readonly extends: {
                            readonly name: "sys_metadata";
                            readonly schema: {
                                readonly sys_class_name: import("../db").Typed<string, {
                                    readonly label: "Class";
                                    readonly default: "javascript:current.getTableName();";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_name: import("../db").Typed<string, {
                                    readonly maxLength: 255;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_package: import("../db").Typed<string | Record<{
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                    readonly label: "Protection policy";
                                    readonly choices: {
                                        readonly read: "Read-only";
                                        readonly protected: "Protected";
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_scope: import("../db").Typed<string | Record<{
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                            readonly choices: {
                                                readonly traditional: "Compatibility Mode";
                                                readonly helsinki_es5: "ES5 Standards Mode";
                                                readonly es_latest: "ECMAScript 2021 (ES12)";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                            readonly choices: {
                                                readonly permissive: "Tracking";
                                                readonly enforcing: "Enforcing";
                                            };
                                            readonly dropdown: "dropdown with none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                                readonly choices: {
                                                    readonly traditional: "Compatibility Mode";
                                                    readonly helsinki_es5: "ES5 Standards Mode";
                                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                                };
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                readonly choices: {
                                                    readonly permissive: "Tracking";
                                                    readonly enforcing: "Enforcing";
                                                };
                                                readonly dropdown: "dropdown with none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_update_name: import("../db").Typed<string, {
                                    readonly label: "Update name";
                                    readonly maxLength: 250;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                        readonly schema: {
                            readonly name: import("../db").Typed<string, {
                                readonly mandatory: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly order: import("../db").Typed<number, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    }>, {
                        readonly mandatory: true;
                        readonly referenceTable: {
                            readonly name: "sys_security_operation";
                            readonly extends: {
                                readonly name: "sys_metadata";
                                readonly schema: {
                                    readonly sys_class_name: import("../db").Typed<string, {
                                        readonly label: "Class";
                                        readonly default: "javascript:current.getTableName();";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_name: import("../db").Typed<string, {
                                        readonly maxLength: 255;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_package: import("../db").Typed<string | Record<{
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                        readonly label: "Protection policy";
                                        readonly choices: {
                                            readonly read: "Read-only";
                                            readonly protected: "Protected";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_scope: import("../db").Typed<string | Record<{
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                                readonly choices: {
                                                    readonly traditional: "Compatibility Mode";
                                                    readonly helsinki_es5: "ES5 Standards Mode";
                                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                                };
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                readonly choices: {
                                                    readonly permissive: "Tracking";
                                                    readonly enforcing: "Enforcing";
                                                };
                                                readonly dropdown: "dropdown with none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                    readonly choices: {
                                                        readonly traditional: "Compatibility Mode";
                                                        readonly helsinki_es5: "ES5 Standards Mode";
                                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                                    };
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                    readonly choices: {
                                                        readonly permissive: "Tracking";
                                                        readonly enforcing: "Enforcing";
                                                    };
                                                    readonly dropdown: "dropdown with none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_update_name: import("../db").Typed<string, {
                                        readonly label: "Update name";
                                        readonly maxLength: 250;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly name: import("../db").Typed<string, {
                                    readonly mandatory: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly order: import("../db").Typed<number, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly security_attribute: import("../db").Typed<string | Record<{
                        readonly name: "sys_security_attribute";
                        readonly extends: {
                            readonly name: "sys_metadata";
                            readonly schema: {
                                readonly sys_class_name: import("../db").Typed<string, {
                                    readonly label: "Class";
                                    readonly default: "javascript:current.getTableName();";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_name: import("../db").Typed<string, {
                                    readonly maxLength: 255;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_package: import("../db").Typed<string | Record<{
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                    readonly label: "Protection policy";
                                    readonly choices: {
                                        readonly read: "Read-only";
                                        readonly protected: "Protected";
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_scope: import("../db").Typed<string | Record<{
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                            readonly choices: {
                                                readonly traditional: "Compatibility Mode";
                                                readonly helsinki_es5: "ES5 Standards Mode";
                                                readonly es_latest: "ECMAScript 2021 (ES12)";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                            readonly choices: {
                                                readonly permissive: "Tracking";
                                                readonly enforcing: "Enforcing";
                                            };
                                            readonly dropdown: "dropdown with none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                                readonly choices: {
                                                    readonly traditional: "Compatibility Mode";
                                                    readonly helsinki_es5: "ES5 Standards Mode";
                                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                                };
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                readonly choices: {
                                                    readonly permissive: "Tracking";
                                                    readonly enforcing: "Enforcing";
                                                };
                                                readonly dropdown: "dropdown with none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly sys_update_name: import("../db").Typed<string, {
                                    readonly label: "Update name";
                                    readonly maxLength: 250;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly condition: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly is_dynamic: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly is_localized: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly is_system: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly label: import("../db").Typed<string, {
                                readonly mandatory: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly lookup_table: import("../db").Typed<import("../db").Table, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly lookup_table_column: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    }>, {
                        readonly mandatory: false;
                        readonly referenceTable: {
                            readonly name: "sys_security_attribute";
                            readonly extends: {
                                readonly name: "sys_metadata";
                                readonly schema: {
                                    readonly sys_class_name: import("../db").Typed<string, {
                                        readonly label: "Class";
                                        readonly default: "javascript:current.getTableName();";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_name: import("../db").Typed<string, {
                                        readonly maxLength: 255;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_package: import("../db").Typed<string | Record<{
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                        readonly label: "Protection policy";
                                        readonly choices: {
                                            readonly read: "Read-only";
                                            readonly protected: "Protected";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_scope: import("../db").Typed<string | Record<{
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                                readonly choices: {
                                                    readonly traditional: "Compatibility Mode";
                                                    readonly helsinki_es5: "ES5 Standards Mode";
                                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                                };
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                readonly choices: {
                                                    readonly permissive: "Tracking";
                                                    readonly enforcing: "Enforcing";
                                                };
                                                readonly dropdown: "dropdown with none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                    readonly choices: {
                                                        readonly traditional: "Compatibility Mode";
                                                        readonly helsinki_es5: "ES5 Standards Mode";
                                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                                    };
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                    readonly choices: {
                                                        readonly permissive: "Tracking";
                                                        readonly enforcing: "Enforcing";
                                                    };
                                                    readonly dropdown: "dropdown with none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_update_name: import("../db").Typed<string, {
                                        readonly label: "Update name";
                                        readonly maxLength: 250;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly condition: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly is_dynamic: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly is_localized: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly is_system: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly label: import("../db").Typed<string, {
                                    readonly mandatory: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly lookup_table: import("../db").Typed<import("../db").Table, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly lookup_table_column: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                    readonly local_or_existing: import("../db").Typed<string | number, {
                        readonly default: "Local";
                    }> & {
                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                    };
                };
            }>[], {
                readonly referenceTable: {
                    readonly name: "sys_security_acl";
                    readonly extends: {
                        readonly name: "sys_metadata";
                        readonly schema: {
                            readonly sys_class_name: import("../db").Typed<string, {
                                readonly label: "Class";
                                readonly default: "javascript:current.getTableName();";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly sys_name: import("../db").Typed<string, {
                                readonly maxLength: 255;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly sys_package: import("../db").Typed<string | Record<{
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                        readonly label: "Subscription requirement";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "None";
                                                readonly sequence: 1;
                                            };
                                            readonly log: {
                                                readonly label: "Monitor";
                                                readonly sequence: 2;
                                            };
                                            readonly enforce: {
                                                readonly label: "Required";
                                                readonly sequence: 3;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly ide_created: import("../db").Typed<string, {
                                        readonly label: "IDE Created";
                                        readonly maxLength: 10;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly package_json: import("../db").Typed<string, {
                                        readonly label: "Package JSON";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                readonly label: "Protection policy";
                                readonly choices: {
                                    readonly read: "Read-only";
                                    readonly protected: "Protected";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly sys_scope: import("../db").Typed<string | Record<{
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                            readonly label: "Subscription requirement";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "None";
                                                    readonly sequence: 1;
                                                };
                                                readonly log: {
                                                    readonly label: "Monitor";
                                                    readonly sequence: 2;
                                                };
                                                readonly enforce: {
                                                    readonly label: "Required";
                                                    readonly sequence: 3;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly ide_created: import("../db").Typed<string, {
                                            readonly label: "IDE Created";
                                            readonly maxLength: 10;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly package_json: import("../db").Typed<string, {
                                            readonly label: "Package JSON";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                        readonly choices: {
                                            readonly traditional: "Compatibility Mode";
                                            readonly helsinki_es5: "ES5 Standards Mode";
                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                        readonly choices: {
                                            readonly permissive: "Tracking";
                                            readonly enforcing: "Enforcing";
                                        };
                                        readonly dropdown: "dropdown with none";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                            readonly choices: {
                                                readonly traditional: "Compatibility Mode";
                                                readonly helsinki_es5: "ES5 Standards Mode";
                                                readonly es_latest: "ECMAScript 2021 (ES12)";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                            readonly choices: {
                                                readonly permissive: "Tracking";
                                                readonly enforcing: "Enforcing";
                                            };
                                            readonly dropdown: "dropdown with none";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly sys_update_name: import("../db").Typed<string, {
                                readonly label: "Update name";
                                readonly maxLength: 250;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly name: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly advanced: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly script: import("../db").Typed<import("../db").ScriptModule<Function>, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly admin_overrides: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly type: import("../db").Typed<string | Record<{
                            readonly name: "sys_security_type";
                            readonly extends: {
                                readonly name: "sys_metadata";
                                readonly schema: {
                                    readonly sys_class_name: import("../db").Typed<string, {
                                        readonly label: "Class";
                                        readonly default: "javascript:current.getTableName();";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_name: import("../db").Typed<string, {
                                        readonly maxLength: 255;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_package: import("../db").Typed<string | Record<{
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                        readonly label: "Protection policy";
                                        readonly choices: {
                                            readonly read: "Read-only";
                                            readonly protected: "Protected";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_scope: import("../db").Typed<string | Record<{
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                                readonly choices: {
                                                    readonly traditional: "Compatibility Mode";
                                                    readonly helsinki_es5: "ES5 Standards Mode";
                                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                                };
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                readonly choices: {
                                                    readonly permissive: "Tracking";
                                                    readonly enforcing: "Enforcing";
                                                };
                                                readonly dropdown: "dropdown with none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                    readonly choices: {
                                                        readonly traditional: "Compatibility Mode";
                                                        readonly helsinki_es5: "ES5 Standards Mode";
                                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                                    };
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                    readonly choices: {
                                                        readonly permissive: "Tracking";
                                                        readonly enforcing: "Enforcing";
                                                    };
                                                    readonly dropdown: "dropdown with none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_update_name: import("../db").Typed<string, {
                                        readonly label: "Update name";
                                        readonly maxLength: 250;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly mandatory: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        }>, {
                            readonly mandatory: true;
                            readonly referenceTable: {
                                readonly name: "sys_security_type";
                                readonly extends: {
                                    readonly name: "sys_metadata";
                                    readonly schema: {
                                        readonly sys_class_name: import("../db").Typed<string, {
                                            readonly label: "Class";
                                            readonly default: "javascript:current.getTableName();";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_name: import("../db").Typed<string, {
                                            readonly maxLength: 255;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_package: import("../db").Typed<string | Record<{
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        }>, {
                                            readonly referenceTable: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                            readonly label: "Protection policy";
                                            readonly choices: {
                                                readonly read: "Read-only";
                                                readonly protected: "Protected";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_scope: import("../db").Typed<string | Record<{
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                    readonly choices: {
                                                        readonly traditional: "Compatibility Mode";
                                                        readonly helsinki_es5: "ES5 Standards Mode";
                                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                                    };
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                    readonly choices: {
                                                        readonly permissive: "Tracking";
                                                        readonly enforcing: "Enforcing";
                                                    };
                                                    readonly dropdown: "dropdown with none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        }>, {
                                            readonly referenceTable: {
                                                readonly name: "sys_scope";
                                                readonly extends: {
                                                    readonly name: "sys_package";
                                                    readonly schema: {
                                                        readonly active: import("../db").Typed<boolean, {
                                                            readonly default: true;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                            readonly label: "Subscription requirement";
                                                            readonly choices: {
                                                                readonly none: {
                                                                    readonly label: "None";
                                                                    readonly sequence: 1;
                                                                };
                                                                readonly log: {
                                                                    readonly label: "Monitor";
                                                                    readonly sequence: 2;
                                                                };
                                                                readonly enforce: {
                                                                    readonly label: "Required";
                                                                    readonly sequence: 3;
                                                                };
                                                            };
                                                            readonly default: "none";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly ide_created: import("../db").Typed<string, {
                                                            readonly label: "IDE Created";
                                                            readonly maxLength: 10;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly license_category: import("../db").Typed<string, {
                                                            readonly label: "Subscription Category";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                            readonly label: "Subscription Model";
                                                            readonly choices: {
                                                                readonly none: {
                                                                    readonly label: "Not applicable";
                                                                    readonly sequence: 1;
                                                                };
                                                                readonly fulfiller: {
                                                                    readonly label: "Fulfiller/Requester";
                                                                    readonly sequence: 2;
                                                                };
                                                                readonly producer: {
                                                                    readonly label: "Producer";
                                                                    readonly sequence: 3;
                                                                };
                                                                readonly capacity: {
                                                                    readonly label: "Capacity";
                                                                    readonly sequence: 4;
                                                                };
                                                                readonly mixed: {
                                                                    readonly label: "Mixed";
                                                                    readonly sequence: 5;
                                                                };
                                                                readonly app_use: {
                                                                    readonly label: "Application in use";
                                                                    readonly sequence: 6;
                                                                };
                                                            };
                                                            readonly default: "none";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly name: import("../db").Typed<string, {
                                                            readonly maxLength: 100;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly package_json: import("../db").Typed<string, {
                                                            readonly label: "Package JSON";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly source: import("../db").Typed<string, {
                                                            readonly label: "ID";
                                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly trackable: import("../db").Typed<boolean, {
                                                            readonly default: false;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                    };
                                                };
                                                readonly schema: {
                                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                        readonly label: "Can Edit Application in Studio";
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                        readonly label: "JavaScript Mode";
                                                        readonly default: "es_latest";
                                                        readonly choices: {
                                                            readonly traditional: "Compatibility Mode";
                                                            readonly helsinki_es5: "ES5 Standards Mode";
                                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                                        };
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly logo: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly private: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                        readonly choices: {
                                                            readonly permissive: "Tracking";
                                                            readonly enforcing: "Enforcing";
                                                        };
                                                        readonly dropdown: "dropdown with none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly scope: import("../db").Typed<string, {
                                                        readonly maxLength: 18;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                                        readonly label: "Application administration";
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly short_description: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly template: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly vendor: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_update_name: import("../db").Typed<string, {
                                            readonly label: "Update name";
                                            readonly maxLength: 250;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly mandatory: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly condition: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly operation: import("../db").Typed<string | Record<{
                            readonly name: "sys_security_operation";
                            readonly extends: {
                                readonly name: "sys_metadata";
                                readonly schema: {
                                    readonly sys_class_name: import("../db").Typed<string, {
                                        readonly label: "Class";
                                        readonly default: "javascript:current.getTableName();";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_name: import("../db").Typed<string, {
                                        readonly maxLength: 255;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_package: import("../db").Typed<string | Record<{
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                        readonly label: "Protection policy";
                                        readonly choices: {
                                            readonly read: "Read-only";
                                            readonly protected: "Protected";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_scope: import("../db").Typed<string | Record<{
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                                readonly choices: {
                                                    readonly traditional: "Compatibility Mode";
                                                    readonly helsinki_es5: "ES5 Standards Mode";
                                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                                };
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                readonly choices: {
                                                    readonly permissive: "Tracking";
                                                    readonly enforcing: "Enforcing";
                                                };
                                                readonly dropdown: "dropdown with none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                    readonly choices: {
                                                        readonly traditional: "Compatibility Mode";
                                                        readonly helsinki_es5: "ES5 Standards Mode";
                                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                                    };
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                    readonly choices: {
                                                        readonly permissive: "Tracking";
                                                        readonly enforcing: "Enforcing";
                                                    };
                                                    readonly dropdown: "dropdown with none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_update_name: import("../db").Typed<string, {
                                        readonly label: "Update name";
                                        readonly maxLength: 250;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly name: import("../db").Typed<string, {
                                    readonly mandatory: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly order: import("../db").Typed<number, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        }>, {
                            readonly mandatory: true;
                            readonly referenceTable: {
                                readonly name: "sys_security_operation";
                                readonly extends: {
                                    readonly name: "sys_metadata";
                                    readonly schema: {
                                        readonly sys_class_name: import("../db").Typed<string, {
                                            readonly label: "Class";
                                            readonly default: "javascript:current.getTableName();";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_name: import("../db").Typed<string, {
                                            readonly maxLength: 255;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_package: import("../db").Typed<string | Record<{
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        }>, {
                                            readonly referenceTable: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                            readonly label: "Protection policy";
                                            readonly choices: {
                                                readonly read: "Read-only";
                                                readonly protected: "Protected";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_scope: import("../db").Typed<string | Record<{
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                    readonly choices: {
                                                        readonly traditional: "Compatibility Mode";
                                                        readonly helsinki_es5: "ES5 Standards Mode";
                                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                                    };
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                    readonly choices: {
                                                        readonly permissive: "Tracking";
                                                        readonly enforcing: "Enforcing";
                                                    };
                                                    readonly dropdown: "dropdown with none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        }>, {
                                            readonly referenceTable: {
                                                readonly name: "sys_scope";
                                                readonly extends: {
                                                    readonly name: "sys_package";
                                                    readonly schema: {
                                                        readonly active: import("../db").Typed<boolean, {
                                                            readonly default: true;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                            readonly label: "Subscription requirement";
                                                            readonly choices: {
                                                                readonly none: {
                                                                    readonly label: "None";
                                                                    readonly sequence: 1;
                                                                };
                                                                readonly log: {
                                                                    readonly label: "Monitor";
                                                                    readonly sequence: 2;
                                                                };
                                                                readonly enforce: {
                                                                    readonly label: "Required";
                                                                    readonly sequence: 3;
                                                                };
                                                            };
                                                            readonly default: "none";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly ide_created: import("../db").Typed<string, {
                                                            readonly label: "IDE Created";
                                                            readonly maxLength: 10;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly license_category: import("../db").Typed<string, {
                                                            readonly label: "Subscription Category";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                            readonly label: "Subscription Model";
                                                            readonly choices: {
                                                                readonly none: {
                                                                    readonly label: "Not applicable";
                                                                    readonly sequence: 1;
                                                                };
                                                                readonly fulfiller: {
                                                                    readonly label: "Fulfiller/Requester";
                                                                    readonly sequence: 2;
                                                                };
                                                                readonly producer: {
                                                                    readonly label: "Producer";
                                                                    readonly sequence: 3;
                                                                };
                                                                readonly capacity: {
                                                                    readonly label: "Capacity";
                                                                    readonly sequence: 4;
                                                                };
                                                                readonly mixed: {
                                                                    readonly label: "Mixed";
                                                                    readonly sequence: 5;
                                                                };
                                                                readonly app_use: {
                                                                    readonly label: "Application in use";
                                                                    readonly sequence: 6;
                                                                };
                                                            };
                                                            readonly default: "none";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly name: import("../db").Typed<string, {
                                                            readonly maxLength: 100;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly package_json: import("../db").Typed<string, {
                                                            readonly label: "Package JSON";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly source: import("../db").Typed<string, {
                                                            readonly label: "ID";
                                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly trackable: import("../db").Typed<boolean, {
                                                            readonly default: false;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                    };
                                                };
                                                readonly schema: {
                                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                        readonly label: "Can Edit Application in Studio";
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                        readonly label: "JavaScript Mode";
                                                        readonly default: "es_latest";
                                                        readonly choices: {
                                                            readonly traditional: "Compatibility Mode";
                                                            readonly helsinki_es5: "ES5 Standards Mode";
                                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                                        };
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly logo: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly private: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                        readonly choices: {
                                                            readonly permissive: "Tracking";
                                                            readonly enforcing: "Enforcing";
                                                        };
                                                        readonly dropdown: "dropdown with none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly scope: import("../db").Typed<string, {
                                                        readonly maxLength: 18;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                                        readonly label: "Application administration";
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly short_description: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly template: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly vendor: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_update_name: import("../db").Typed<string, {
                                            readonly label: "Update name";
                                            readonly maxLength: 250;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly name: import("../db").Typed<string, {
                                        readonly mandatory: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly order: import("../db").Typed<number, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly security_attribute: import("../db").Typed<string | Record<{
                            readonly name: "sys_security_attribute";
                            readonly extends: {
                                readonly name: "sys_metadata";
                                readonly schema: {
                                    readonly sys_class_name: import("../db").Typed<string, {
                                        readonly label: "Class";
                                        readonly default: "javascript:current.getTableName();";
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_name: import("../db").Typed<string, {
                                        readonly maxLength: 255;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_package: import("../db").Typed<string | Record<{
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                readonly label: "Subscription requirement";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "None";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly log: {
                                                        readonly label: "Monitor";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly enforce: {
                                                        readonly label: "Required";
                                                        readonly sequence: 3;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly ide_created: import("../db").Typed<string, {
                                                readonly label: "IDE Created";
                                                readonly maxLength: 10;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly package_json: import("../db").Typed<string, {
                                                readonly label: "Package JSON";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                        readonly label: "Protection policy";
                                        readonly choices: {
                                            readonly read: "Read-only";
                                            readonly protected: "Protected";
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_scope: import("../db").Typed<string | Record<{
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                                readonly choices: {
                                                    readonly traditional: "Compatibility Mode";
                                                    readonly helsinki_es5: "ES5 Standards Mode";
                                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                                };
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                readonly choices: {
                                                    readonly permissive: "Tracking";
                                                    readonly enforcing: "Enforcing";
                                                };
                                                readonly dropdown: "dropdown with none";
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                            };
                                        };
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                    readonly choices: {
                                                        readonly traditional: "Compatibility Mode";
                                                        readonly helsinki_es5: "ES5 Standards Mode";
                                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                                    };
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                    readonly choices: {
                                                        readonly permissive: "Tracking";
                                                        readonly enforcing: "Enforcing";
                                                    };
                                                    readonly dropdown: "dropdown with none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        };
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly sys_update_name: import("../db").Typed<string, {
                                        readonly label: "Update name";
                                        readonly maxLength: 250;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly condition: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly is_dynamic: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly is_localized: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly is_system: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly label: import("../db").Typed<string, {
                                    readonly mandatory: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly lookup_table: import("../db").Typed<import("../db").Table, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly lookup_table_column: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        }>, {
                            readonly mandatory: false;
                            readonly referenceTable: {
                                readonly name: "sys_security_attribute";
                                readonly extends: {
                                    readonly name: "sys_metadata";
                                    readonly schema: {
                                        readonly sys_class_name: import("../db").Typed<string, {
                                            readonly label: "Class";
                                            readonly default: "javascript:current.getTableName();";
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_name: import("../db").Typed<string, {
                                            readonly maxLength: 255;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_package: import("../db").Typed<string | Record<{
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                    readonly label: "Subscription requirement";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "None";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly log: {
                                                            readonly label: "Monitor";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly enforce: {
                                                            readonly label: "Required";
                                                            readonly sequence: 3;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly ide_created: import("../db").Typed<string, {
                                                    readonly label: "IDE Created";
                                                    readonly maxLength: 10;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly package_json: import("../db").Typed<string, {
                                                    readonly label: "Package JSON";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        }>, {
                                            readonly referenceTable: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                            readonly label: "Protection policy";
                                            readonly choices: {
                                                readonly read: "Read-only";
                                                readonly protected: "Protected";
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_scope: import("../db").Typed<string | Record<{
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                        readonly label: "Subscription requirement";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "None";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly log: {
                                                                readonly label: "Monitor";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly enforce: {
                                                                readonly label: "Required";
                                                                readonly sequence: 3;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly ide_created: import("../db").Typed<string, {
                                                        readonly label: "IDE Created";
                                                        readonly maxLength: 10;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly package_json: import("../db").Typed<string, {
                                                        readonly label: "Package JSON";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                    readonly choices: {
                                                        readonly traditional: "Compatibility Mode";
                                                        readonly helsinki_es5: "ES5 Standards Mode";
                                                        readonly es_latest: "ECMAScript 2021 (ES12)";
                                                    };
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                    readonly choices: {
                                                        readonly permissive: "Tracking";
                                                        readonly enforcing: "Enforcing";
                                                    };
                                                    readonly dropdown: "dropdown with none";
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                };
                                            };
                                        }>, {
                                            readonly referenceTable: {
                                                readonly name: "sys_scope";
                                                readonly extends: {
                                                    readonly name: "sys_package";
                                                    readonly schema: {
                                                        readonly active: import("../db").Typed<boolean, {
                                                            readonly default: true;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                                            readonly label: "Subscription requirement";
                                                            readonly choices: {
                                                                readonly none: {
                                                                    readonly label: "None";
                                                                    readonly sequence: 1;
                                                                };
                                                                readonly log: {
                                                                    readonly label: "Monitor";
                                                                    readonly sequence: 2;
                                                                };
                                                                readonly enforce: {
                                                                    readonly label: "Required";
                                                                    readonly sequence: 3;
                                                                };
                                                            };
                                                            readonly default: "none";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly ide_created: import("../db").Typed<string, {
                                                            readonly label: "IDE Created";
                                                            readonly maxLength: 10;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly license_category: import("../db").Typed<string, {
                                                            readonly label: "Subscription Category";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                            readonly label: "Subscription Model";
                                                            readonly choices: {
                                                                readonly none: {
                                                                    readonly label: "Not applicable";
                                                                    readonly sequence: 1;
                                                                };
                                                                readonly fulfiller: {
                                                                    readonly label: "Fulfiller/Requester";
                                                                    readonly sequence: 2;
                                                                };
                                                                readonly producer: {
                                                                    readonly label: "Producer";
                                                                    readonly sequence: 3;
                                                                };
                                                                readonly capacity: {
                                                                    readonly label: "Capacity";
                                                                    readonly sequence: 4;
                                                                };
                                                                readonly mixed: {
                                                                    readonly label: "Mixed";
                                                                    readonly sequence: 5;
                                                                };
                                                                readonly app_use: {
                                                                    readonly label: "Application in use";
                                                                    readonly sequence: 6;
                                                                };
                                                            };
                                                            readonly default: "none";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly name: import("../db").Typed<string, {
                                                            readonly maxLength: 100;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly package_json: import("../db").Typed<string, {
                                                            readonly label: "Package JSON";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly source: import("../db").Typed<string, {
                                                            readonly label: "ID";
                                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly trackable: import("../db").Typed<boolean, {
                                                            readonly default: false;
                                                        }> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                        };
                                                    };
                                                };
                                                readonly schema: {
                                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                        readonly label: "Can Edit Application in Studio";
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                                        readonly label: "JavaScript Mode";
                                                        readonly default: "es_latest";
                                                        readonly choices: {
                                                            readonly traditional: "Compatibility Mode";
                                                            readonly helsinki_es5: "ES5 Standards Mode";
                                                            readonly es_latest: "ECMAScript 2021 (ES12)";
                                                        };
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly logo: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly private: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                                        readonly choices: {
                                                            readonly permissive: "Tracking";
                                                            readonly enforcing: "Enforcing";
                                                        };
                                                        readonly dropdown: "dropdown with none";
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly scope: import("../db").Typed<string, {
                                                        readonly maxLength: 18;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                                        readonly label: "Application administration";
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly short_description: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly template: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly vendor: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                                    };
                                                };
                                            };
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                        readonly sys_update_name: import("../db").Typed<string, {
                                            readonly label: "Update name";
                                            readonly maxLength: 250;
                                        }> & {
                                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                        };
                                    };
                                };
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly condition: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly is_dynamic: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly is_localized: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly is_system: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly label: import("../db").Typed<string, {
                                        readonly mandatory: true;
                                    }> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly lookup_table: import("../db").Typed<import("../db").Table, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                    readonly lookup_table_column: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                    };
                                };
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly local_or_existing: import("../db").Typed<string | number, {
                            readonly default: "Local";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                };
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly is_versioned: import("../db").Typed<boolean, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly namespace: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly produces: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly produces_customized: import("../db").Typed<boolean, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly service_id: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly short_description: import("../db").Typed<string, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
        };
    }>, import("../db").Table>;
};
export {};
