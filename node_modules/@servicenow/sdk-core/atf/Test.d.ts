import { Entity } from '../entity';
import { Data, Record, Table } from '../db';
import { sys_ux_page_registry } from '../tables';
export interface Step<T extends {
    [name: string]: any;
}> {
    outputs: T;
}
export type FormUIType = {
    ['Standard UI']: 'standard_ui';
    ['Service Operations Workspace']: Record<sys_ux_page_registry>;
    ['Asset Workspace']: Record<sys_ux_page_registry>;
    ['CMDB Workspace']: Record<sys_ux_page_registry>;
};
export declare const FormUI: FormUIType;
export type AssertType = {
    ['None']: '';
    ['Form submitted to server']: 'form_submitted_to_server';
    ['Form submission cancelled in browser']: 'form_submission_canceled_in_browser';
};
export declare const Assert: AssertType;
/**
 * This is the type used by the Test config function in user face fluent code, a parallel but different version is used in the plugin code. Both derive from the ATFType so they stay in sync
 */
export declare const Comparison: {
    is: string;
    "is not": string;
    "is one of": string;
    "is not one of": string;
    "is empty": string;
    "is not empty": string;
    "less than": string;
    "greater than": string;
    "less than or is": string;
    "greater than or is": string;
    "is anything": string;
    "is same": string;
    "is different": string;
};
export type ComparisonType = typeof Comparison;
export interface ATFType {
    openNewForm<T extends Table>(inputs: {
        table: T;
        view: string;
        formUI: keyof FormUIType;
    }): any;
    openExistingRecord<T extends Table>(inputs: {
        formUI: keyof FormUIType;
        view: string;
        recordId: string;
        table: T;
        selectedTabIndex: number;
    }): any;
    setFieldValues<T extends Table>(inputs: {
        table: T;
        fieldValues: T extends Table ? Partial<Data<T>> : T;
        formUI: keyof FormUIType;
    }): any;
    submitForm(inputs: {
        assertType: keyof AssertType;
        formUI: keyof FormUIType;
    }): {
        outputs: {
            thing: {
                thing2: {
                    id: string;
                };
            };
        };
    };
    fieldValueValidation<T extends Table>(inputs: {
        table: T;
        conditions: T extends Table ? Partial<{
            [K in keyof Data<T>]: {
                comparison: keyof ComparisonType;
                value: Data<T>[K];
            };
        }> | string : T;
        formUI: keyof FormUIType;
    }): any;
}
export declare function Test(testName: string, configurationFunction: (ATF: ATFType) => any): {
    readonly testName: string;
    readonly configurationFunction: (ATF: ATFType) => any;
} & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_atf_test";
        readonly extends: {
            readonly name: "sys_metadata";
            readonly schema: {
                readonly sys_class_name: import("../db").Typed<string, {
                    readonly label: "Class";
                    readonly default: "javascript:current.getTableName();";
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_name: import("../db").Typed<string, {
                    readonly maxLength: 255;
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_package: import("../db").Typed<string | Record<{
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                            readonly label: "Subscription requirement";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "None";
                                    readonly sequence: 1;
                                };
                                readonly log: {
                                    readonly label: "Monitor";
                                    readonly sequence: 2;
                                };
                                readonly enforce: {
                                    readonly label: "Required";
                                    readonly sequence: 3;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly ide_created: import("../db").Typed<string, {
                            readonly label: "IDE Created";
                            readonly maxLength: 10;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly package_json: import("../db").Typed<string, {
                            readonly label: "Package JSON";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                    readonly label: "Protection policy";
                    readonly choices: {
                        readonly read: "Read-only";
                        readonly protected: "Protected";
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_scope: import("../db").Typed<string | Record<{
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                            readonly choices: {
                                readonly traditional: "Compatibility Mode";
                                readonly helsinki_es5: "ES5 Standards Mode";
                                readonly es_latest: "ECMAScript 2021 (ES12)";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                            readonly choices: {
                                readonly permissive: "Tracking";
                                readonly enforcing: "Enforcing";
                            };
                            readonly dropdown: "dropdown with none";
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<Table>, Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<Table>, Table>;
                                };
                            };
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                                readonly choices: {
                                    readonly traditional: "Compatibility Mode";
                                    readonly helsinki_es5: "ES5 Standards Mode";
                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                readonly choices: {
                                    readonly permissive: "Tracking";
                                    readonly enforcing: "Enforcing";
                                };
                                readonly dropdown: "dropdown with none";
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<Table>, Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_update_name: import("../db").Typed<string, {
                    readonly label: "Update name";
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
                readonly sys_id: import("../db").Typed<string, {
                    readonly maxLength: 32;
                }> & {
                    readonly asRecord: () => Entity<Record<Table>, Table>;
                };
            };
        };
        readonly schema: {
            readonly name: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly active: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly fail_on_server_error: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
            readonly description: import("../db").Typed<string, {
                readonly maxLength: 4000;
            }> & {
                readonly asRecord: () => Entity<Record<Table>, Table>;
            };
        };
    }>, Table>;
};
