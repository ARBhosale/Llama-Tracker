import z from 'zod';
import { ReferenceColumn } from '.';
import type { Column } from './Column';
export declare const TableSchema: z.ZodObject<{
    name: z.ZodString;
    schema: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>>;
    extends: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    schema: Record<string, Record<string, any>>;
    extends?: {
        name: string;
    } | undefined;
}, {
    name: string;
    schema?: Record<string, Record<string, any>> | undefined;
    extends?: {
        name: string;
    } | undefined;
}>;
export declare const TableSchemaFull: z.ZodEffects<z.ZodObject<{
    name: z.ZodString;
    schema: z.ZodDefault<z.ZodRecord<z.ZodString, z.ZodRecord<z.ZodString, z.ZodAny>>>;
    extends: z.ZodOptional<z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>>;
    label: z.ZodOptional<z.ZodString>;
    display: z.ZodOptional<z.ZodString>;
    extensible: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    live_feed: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    auto_number: z.ZodOptional<z.ZodObject<{
        prefix: z.ZodOptional<z.ZodDefault<z.ZodString>>;
        number: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
        number_of_digits: z.ZodOptional<z.ZodDefault<z.ZodNumber>>;
    }, "strip", z.ZodTypeAny, {
        prefix?: string | undefined;
        number?: number | undefined;
        number_of_digits?: number | undefined;
    }, {
        prefix?: string | undefined;
        number?: number | undefined;
        number_of_digits?: number | undefined;
    }>>;
    create_access_controls: z.ZodOptional<z.ZodBoolean>;
    user_role: z.ZodOptional<z.ZodAny>;
    accessable_from: z.ZodDefault<z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"All App Scopes">, z.ZodLiteral<"This App Scope">]>>>;
    caller_access: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<"Caller Restricted">, z.ZodLiteral<"Caller Tracking">, z.ZodLiteral<"None">]>>;
    actions: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodLiteral<"read">, z.ZodLiteral<"update">, z.ZodLiteral<"delete">, z.ZodLiteral<"create">]>, "many">>;
    allow_web_service_access: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    allow_new_fields: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    allow_ui_actions: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    allow_client_scripts: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    audit: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    read_only: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    text_index: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    attributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
    index: z.ZodOptional<z.ZodArray<z.ZodObject<{
        name: z.ZodString;
        unique: z.ZodBoolean;
        element: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
        unique: boolean;
        element: string;
    }, {
        name: string;
        unique: boolean;
        element: string;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    read_only: boolean;
    name: string;
    schema: Record<string, Record<string, any>>;
    extensible: boolean;
    live_feed: boolean;
    accessable_from: "All App Scopes" | "This App Scope";
    allow_web_service_access: boolean;
    allow_new_fields: boolean;
    allow_ui_actions: boolean;
    allow_client_scripts: boolean;
    audit: boolean;
    text_index: boolean;
    extends?: {
        name: string;
    } | undefined;
    label?: string | undefined;
    display?: string | undefined;
    auto_number?: {
        prefix?: string | undefined;
        number?: number | undefined;
        number_of_digits?: number | undefined;
    } | undefined;
    create_access_controls?: boolean | undefined;
    user_role?: any;
    caller_access?: "Caller Restricted" | "Caller Tracking" | "None" | undefined;
    actions?: ("read" | "update" | "delete" | "create")[] | undefined;
    attributes?: Record<string, string | number | boolean> | undefined;
    index?: {
        name: string;
        unique: boolean;
        element: string;
    }[] | undefined;
}, {
    name: string;
    schema?: Record<string, Record<string, any>> | undefined;
    extends?: {
        name: string;
    } | undefined;
    label?: string | undefined;
    display?: string | undefined;
    extensible?: boolean | undefined;
    live_feed?: boolean | undefined;
    auto_number?: {
        prefix?: string | undefined;
        number?: number | undefined;
        number_of_digits?: number | undefined;
    } | undefined;
    create_access_controls?: boolean | undefined;
    user_role?: any;
    accessable_from?: "All App Scopes" | "This App Scope" | undefined;
    caller_access?: "Caller Restricted" | "Caller Tracking" | "None" | undefined;
    actions?: ("read" | "update" | "delete" | "create")[] | undefined;
    allow_web_service_access?: boolean | undefined;
    allow_new_fields?: boolean | undefined;
    allow_ui_actions?: boolean | undefined;
    allow_client_scripts?: boolean | undefined;
    audit?: boolean | undefined;
    read_only?: boolean | undefined;
    text_index?: boolean | undefined;
    attributes?: Record<string, string | number | boolean> | undefined;
    index?: {
        name: string;
        unique: boolean;
        element: string;
    }[] | undefined;
}>, {
    read_only: boolean;
    name: string;
    schema: Record<string, Record<string, any>>;
    extensible: boolean;
    live_feed: boolean;
    accessable_from: "All App Scopes" | "This App Scope";
    allow_web_service_access: boolean;
    allow_new_fields: boolean;
    allow_ui_actions: boolean;
    allow_client_scripts: boolean;
    audit: boolean;
    text_index: boolean;
    extends?: {
        name: string;
    } | undefined;
    label?: string | undefined;
    display?: string | undefined;
    auto_number?: {
        prefix?: string | undefined;
        number?: number | undefined;
        number_of_digits?: number | undefined;
    } | undefined;
    create_access_controls?: boolean | undefined;
    user_role?: any;
    caller_access?: "Caller Restricted" | "Caller Tracking" | "None" | undefined;
    actions?: ("read" | "update" | "delete" | "create")[] | undefined;
    attributes?: Record<string, string | number | boolean> | undefined;
    index?: {
        name: string;
        unique: boolean;
        element: string;
    }[] | undefined;
}, {
    name: string;
    schema?: Record<string, Record<string, any>> | undefined;
    extends?: {
        name: string;
    } | undefined;
    label?: string | undefined;
    display?: string | undefined;
    extensible?: boolean | undefined;
    live_feed?: boolean | undefined;
    auto_number?: {
        prefix?: string | undefined;
        number?: number | undefined;
        number_of_digits?: number | undefined;
    } | undefined;
    create_access_controls?: boolean | undefined;
    user_role?: any;
    accessable_from?: "All App Scopes" | "This App Scope" | undefined;
    caller_access?: "Caller Restricted" | "Caller Tracking" | "None" | undefined;
    actions?: ("read" | "update" | "delete" | "create")[] | undefined;
    allow_web_service_access?: boolean | undefined;
    allow_new_fields?: boolean | undefined;
    allow_ui_actions?: boolean | undefined;
    allow_client_scripts?: boolean | undefined;
    audit?: boolean | undefined;
    read_only?: boolean | undefined;
    text_index?: boolean | undefined;
    attributes?: Record<string, string | number | boolean> | undefined;
    index?: {
        name: string;
        unique: boolean;
        element: string;
    }[] | undefined;
}>;
type IndexType<K> = {
    name: string;
    unique: boolean;
    element: K;
};
export type indexType = {
    name: string;
    unique: boolean;
    element: string;
};
export type ParsableTableSchema<I extends Record<string, Column>> = z.input<typeof TableSchemaFull> & {
    schema?: I;
    index?: IndexType<keyof I>[];
    display?: keyof I;
    extends?: Table;
};
export type FullSchema<T extends Table> = (T['schema'] extends object ? T['schema'] : object) & (T['extends'] extends object ? FullSchema<T['extends']> : object);
export type Table = {
    name: string;
    schema?: Record<string, Column>;
    extends?: Table;
};
export declare function Table<const I extends Record<string, Column>, const T extends ParsableTableSchema<I>>(table: T & ParsableTableSchema<I>): T;
export type TableSchemaDotWalk<T extends Table, Key extends keyof T['schema'] = keyof T['schema']> = Key extends string ? T['schema'][Key] extends Required<Pick<ReferenceColumn, 'referenceTable'>> ? Key | `${Key}.${TableSchemaDotWalk<T['schema'][Key]['referenceTable']>}` : Key : never;
export {};
