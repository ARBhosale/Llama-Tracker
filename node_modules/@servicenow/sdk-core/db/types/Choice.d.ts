import { Entity } from '../../entity';
import { GlideRecord } from '../../script/GlideRecord';
import { Typed, Column } from '../Column';
import { Table } from '../Table';
export type Choices<T extends string | number = string | number> = Record<T, ChoiceValue> | T[];
type ChoiceValue = string | ChoiceConfig;
export type ChoiceConfig = {
    label: string;
    sequence?: number;
    dependent_value?: number;
    hint?: string;
    inactive?: boolean;
    inactive_on_update?: boolean;
    language?: string;
};
export type ChoiceType<TChoices extends Choices> = TChoices extends Array<unknown> ? TChoices[number] : keyof TChoices;
export type ChoiceColumn<TChoices extends Choices = Choices, Type extends ChoiceType<TChoices> = ChoiceType<TChoices>, Default extends Type = Type, ReferenceSchema extends Table = Table, DynamicDefaults = ''> = Column<Type, Default> & {
    choices?: TChoices;
    dropdown?: 'none' | 'dropdown with none' | 'suggestion' | 'dropdown without none';
    dynamic_value_definitions?: dynamic_value_definitions<ReferenceSchema, DynamicDefaults>;
};
export declare function ChoiceColumn<const TChoices extends Choices, const Type extends ChoiceType<TChoices>, const Default extends Type, const P extends ChoiceColumn<TChoices, Type, Default, ReferenceSchema, DynamicDefaults>, const ReferenceSchema extends Table, DynamicDefaults>(properties: P & ChoiceColumn<TChoices, Type, Default, ReferenceSchema, DynamicDefaults>): Typed<Type, P> & {
    readonly asRecord: () => Entity<import("..").Record<Table>, Table>;
};
export type dynamic_value_definitions<ReferenceSchema extends Table, DynamicDefaults> = {
    type: 'dependent_field';
    column_name: string;
} | {
    type: 'choices_from_other_table';
    table: ReferenceSchema;
    field: string;
} | {
    type: 'calculated_value';
    calculated_value: ((current: GlideRecord) => string) | string;
} | {
    type: 'dynamic_default';
    dynamic_default: DynamicDefaults;
};
export {};
