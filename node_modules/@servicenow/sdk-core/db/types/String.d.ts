import { Entity } from '../../entity';
import { StringWithSuggestions } from '../../util/Filter';
import type { Typed } from '../Column';
import { Table } from '../Table';
import type { ChoiceColumn, ChoiceType, Choices } from './Choice';
export type StringColumn<TChoices extends Choices<string> = Choices<string>, Type extends ChoiceType<TChoices> = ChoiceType<TChoices>, Default extends Type = Type, ReferenceSchema extends Table = Table> = ChoiceColumn<TChoices, Type, Default, ReferenceSchema, StringDynamicDefaults> & {
    maxLength?: number;
};
export declare function StringColumn<const TChoices extends Choices<string>, const Type extends ChoiceType<TChoices>, const Default extends Type, const P extends StringColumn<TChoices, Type, Default, ReferenceSchema>, const ReferenceSchema extends Table = Table>(properties: P & StringColumn<TChoices, Type, Default, ReferenceSchema>): Typed<Type, P> & {
    readonly asRecord: () => Entity<import("..").Record<Table>, Table>;
};
export type StringDynamicDefaults = StringWithSuggestions<'Current Name' | 'Next ECC Sequence Number' | 'Get Module View' | 'Get Label Display Value' | 'Get CMDB Item Category' | 'Parent Record Matcher Table' | 'Next Cache Flush Number' | 'Get Next Number' | 'Next Workflow Log Order Number' | 'Subject' | 'Get Mobile Module View' | 'Parent Record Model Table' | 'Get Label Table Display Value' | 'Parent Record Source Table' | 'Get Next Padded Number' | 'My First Name' | 'My Last Name' | 'My Job Title'>;
