import { Entity } from '../../entity';
import type { Typed } from '../Column';
import type { ChoiceColumn, ChoiceType, Choices } from './Choice';
type IntegerColumn<TChoices extends Choices<number> = Choices<number>, Type extends ChoiceType<TChoices> = ChoiceType<TChoices>, Default extends Type = Type> = ChoiceColumn<TChoices, Type, Default> & {
    min?: number;
    max?: number;
};
export declare function IntegerColumn<const TChoices extends Choices<number>, const Type extends ChoiceType<TChoices>, const Default extends Type, const P extends IntegerColumn<TChoices, Type, Default>>(properties: P & IntegerColumn<TChoices, Type, Default>): Typed<Type, P> & {
    readonly asRecord: () => Entity<import("..").Record<import("..").Table>, import("..").Table>;
};
export {};
