export declare const type = "__type__";
export type TypeOf<C> = C extends Typed<infer T> ? T : unknown;
export type Typed<Type, T = object> = {
    [K in keyof (T & {
        readonly [type]?: Type;
    })]: (T & {
        readonly [type]?: Type;
    })[K];
};
export type Column<Type = unknown, Default extends Type = Type> = Typed<Type, {
    default?: Default;
    label?: string;
    mandatory?: boolean;
    readonly?: boolean;
}>;
export declare function Column<const Type, const Default extends Type, const P extends Column<Type, Default>>(properties: P & Column<Type, Default>): Typed<Type, P>;
