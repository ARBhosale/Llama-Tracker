import { Table, type FullSchema } from './Table';
import { type FilterIn } from '../util';
import type { TypeOf } from './Column';
import { Entity } from '../entity';
type MandatoryColumns<S extends FullSchema<Table>> = Required<FilterIn<S, {
    mandatory: true;
}>>;
type DataTypes<S extends FullSchema<Table>> = {
    [C in keyof (Partial<S> & MandatoryColumns<S>)]: C extends keyof S ? TypeOf<S[C]> : never;
};
export type Data<T extends Table> = DataTypes<FullSchema<T>>;
export type Record<T extends Table = Table> = {
    table: T;
    id: string | number;
    data: Data<T>;
};
export declare function Record<const T extends Table, const R extends Record<T>>(record: R & Record<T>): R & {
    readonly asRecord: () => Entity<R, Record>;
};
export {};
