import type { Column, Typed } from '../Column';
import type { Record } from '../Record';
import type { Table } from '../Table';
type ListColumn<RefTable extends Table = Table, Type extends Record<RefTable>[] = Record<RefTable>[], Default extends Type = Type> = Column<Type, Default> & {
    referenceTable?: RefTable;
};
export declare function ListColumn<const RefTable extends Table, const Type extends Record<RefTable>[], const Default extends Type, const P extends ListColumn<RefTable, Type, Default>>(properties: P & ListColumn<RefTable, Type, Default>): Typed<Type, P> & {
    readonly asRecord: () => never;
};
export {};
