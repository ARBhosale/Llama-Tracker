import type { Typed } from '../Column';
import type { ChoiceColumn, ChoiceType, Choices } from './Choice';
export type StringColumn<TChoices extends Choices<string> = Choices<string>, Type extends ChoiceType<TChoices> = ChoiceType<TChoices>, Default extends Type = Type> = ChoiceColumn<TChoices, Type, Default> & {
    maxLength?: number;
};
export declare function StringColumn<const TChoices extends Choices<string>, const Type extends ChoiceType<TChoices>, const Default extends Type, const P extends StringColumn<TChoices, Type, Default>>(properties: P & StringColumn<TChoices, Type, Default>): Typed<Type, P> & {
    readonly asRecord: () => never;
};
