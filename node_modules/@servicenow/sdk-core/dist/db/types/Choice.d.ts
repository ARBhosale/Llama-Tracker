import { Typed, Column } from '../Column';
export type Choices<T extends string | number = string | number> = Record<T, ChoiceValue> | T[];
type ChoiceValue = string | ChoiceConfig;
type ChoiceConfig = {
    label: string;
    sequence?: number;
    dependent_value?: number;
    hint?: string;
    inactive?: boolean;
    inactive_on_update?: boolean;
    language?: string;
};
export type ChoiceType<TChoices extends Choices> = TChoices extends Array<unknown> ? TChoices[number] : keyof TChoices;
export type ChoiceColumn<TChoices extends Choices = Choices, Type extends ChoiceType<TChoices> = ChoiceType<TChoices>, Default extends Type = Type> = Column<Type, Default> & {
    choices?: TChoices;
    dropdown?: 'none' | 'dropdown with none' | 'suggestion' | 'dropdown without none';
};
export declare function ChoiceColumn<const TChoices extends Choices, const Type extends ChoiceType<TChoices>, const Default extends Type, const P extends ChoiceColumn<TChoices, Type, Default>>(properties: P & ChoiceColumn<TChoices, Type, Default>): Typed<Type, P>;
export {};
