import { z } from 'zod';
import { Record } from '../db';
import { Entity } from '../entity';
export declare const PropertySchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"integer">, z.ZodLiteral<"boolean">, z.ZodLiteral<"choicelist">, z.ZodLiteral<"color">, z.ZodLiteral<"date_format">, z.ZodLiteral<"image">, z.ZodLiteral<"password">, z.ZodLiteral<"password2">, z.ZodLiteral<"short_string">, z.ZodLiteral<"time_format">, z.ZodLiteral<"timezone">, z.ZodLiteral<"uploaded_image">]>;
    value: z.ZodDefault<z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>>;
    description: z.ZodDefault<z.ZodString>;
    ignoreCache: z.ZodDefault<z.ZodBoolean>;
    isPrivate: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
    value: string | number | boolean;
    description: string;
    ignoreCache: boolean;
    isPrivate: boolean;
}, {
    name: string;
    type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
    value?: string | number | boolean | undefined;
    description?: string | undefined;
    ignoreCache?: boolean | undefined;
    isPrivate?: boolean | undefined;
}>;
export type Property = z.output<typeof PropertySchema>;
export type PropertyConfig = z.input<typeof PropertySchema>;
export declare function Property(config: PropertyConfig): {
    name: string;
    type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
    value: string | number | boolean;
    description: string;
    ignoreCache: boolean;
    isPrivate: boolean;
} & {
    readonly asRecord: () => Entity<{
        readonly table: {
            readonly name: "sys_properties";
            readonly extends: {
                readonly name: "sys_metadata";
                readonly schema: {
                    readonly sys_class_name: import("../db").Typed<string, {
                        readonly label: "Class";
                        readonly default: "javascript:current.getTableName();";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_name: import("../db").Typed<string, {
                        readonly maxLength: 255;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_package: import("../db").Typed<string | Record<{
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                        readonly label: "Protection policy";
                        readonly choices: {
                            readonly read: "Read-only";
                            readonly protected: "Protected";
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_scope: import("../db").Typed<string | Record<{
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly js_level: import("../db").Typed<string, {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly enforce_license: import("../db").Typed<string, {
                                        readonly label: "Subscription requirement";
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly js_level: import("../db").Typed<string, {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_update_name: import("../db").Typed<string, {
                        readonly label: "Update name";
                        readonly maxLength: 250;
                    }> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            };
            readonly schema: {
                readonly name: import("../db").Typed<string, {
                    readonly mandatory: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly type: import("../db").Typed<"string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image", {
                    readonly mandatory: true;
                    readonly choices: ("string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image")[];
                }> & {
                    readonly asRecord: () => never;
                };
                readonly value: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly description: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly is_private: import("../db").Typed<boolean, {}> & {
                    readonly asRecord: () => never;
                };
                readonly ignore_cache: import("../db").Typed<boolean, {}> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        };
        readonly id: string;
        readonly data: {
            readonly value: string;
            readonly is_private: boolean;
            readonly ignore_cache: boolean;
            readonly name: string;
            readonly type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
            readonly description: string;
        };
    } & {
        readonly asRecord: () => Entity<{
            readonly table: {
                readonly name: "sys_properties";
                readonly extends: {
                    readonly name: "sys_metadata";
                    readonly schema: {
                        readonly sys_class_name: import("../db").Typed<string, {
                            readonly label: "Class";
                            readonly default: "javascript:current.getTableName();";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_name: import("../db").Typed<string, {
                            readonly maxLength: 255;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_package: import("../db").Typed<string | Record<{
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly enforce_license: import("../db").Typed<string, {
                                        readonly label: "Subscription requirement";
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_policy: import("../db").Typed<"read" | "protected", {
                            readonly label: "Protection policy";
                            readonly choices: {
                                readonly read: "Read-only";
                                readonly protected: "Protected";
                            };
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_scope: import("../db").Typed<string | Record<{
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly enforce_license: import("../db").Typed<string, {
                                        readonly label: "Subscription requirement";
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly js_level: import("../db").Typed<string, {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly enforce_license: import("../db").Typed<string, {
                                            readonly label: "Subscription requirement";
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                    };
                                } & {
                                    readonly asRecord: () => never;
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly js_level: import("../db").Typed<string, {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_update_name: import("../db").Typed<string, {
                            readonly label: "Update name";
                            readonly maxLength: 250;
                        }> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                };
                readonly schema: {
                    readonly name: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly type: import("../db").Typed<"string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image", {
                        readonly mandatory: true;
                        readonly choices: ("string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image")[];
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly value: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly is_private: import("../db").Typed<boolean, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly ignore_cache: import("../db").Typed<boolean, {}> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            };
            readonly id: string;
            readonly data: {
                readonly value: string;
                readonly is_private: boolean;
                readonly ignore_cache: boolean;
                readonly name: string;
                readonly type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
                readonly description: string;
            };
        }, Record>;
    }, Record>;
};
