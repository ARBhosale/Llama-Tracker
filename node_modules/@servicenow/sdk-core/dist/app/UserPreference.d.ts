import { z } from 'zod';
import { Record } from '../db';
import { Entity } from '../entity';
export declare const UserPreferenceSchema: z.ZodObject<{
    name: z.ZodString;
    type: z.ZodUnion<[z.ZodLiteral<"string">, z.ZodLiteral<"integer">, z.ZodLiteral<"boolean">, z.ZodLiteral<"choicelist">, z.ZodLiteral<"color">, z.ZodLiteral<"date_format">, z.ZodLiteral<"image">, z.ZodLiteral<"password">, z.ZodLiteral<"password2">, z.ZodLiteral<"short_string">, z.ZodLiteral<"time_format">, z.ZodLiteral<"timezone">, z.ZodLiteral<"uploaded_image">]>;
    value: z.ZodUnion<[z.ZodString, z.ZodNumber, z.ZodBoolean]>;
    description: z.ZodDefault<z.ZodString>;
    system: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
    value: string | number | boolean;
    description: string;
    system: boolean;
}, {
    name: string;
    type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
    value: string | number | boolean;
    description?: string | undefined;
    system?: boolean | undefined;
}>;
export type UserPreference = z.output<typeof UserPreferenceSchema>;
export type UserPreferenceConfig = z.input<typeof UserPreferenceSchema>;
export declare function UserPreference(config: UserPreferenceConfig): {
    name: string;
    type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
    value: string | number | boolean;
    description: string;
    system: boolean;
} & {
    readonly asRecord: () => Entity<{
        readonly table: {
            readonly name: "sys_user_preference";
            readonly schema: {
                readonly name: import("../db").Typed<string, {
                    readonly mandatory: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly type: import("../db").Typed<"string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image", {
                    readonly mandatory: true;
                    readonly choices: ("string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image")[];
                }> & {
                    readonly asRecord: () => never;
                };
                readonly value: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly description: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly system: import("../db").Typed<boolean, {}> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        };
        readonly id: string;
        readonly data: {
            readonly value: string;
            readonly name: string;
            readonly type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
            readonly description: string;
            readonly system: boolean;
        };
    } & {
        readonly asRecord: () => Entity<{
            readonly table: {
                readonly name: "sys_user_preference";
                readonly schema: {
                    readonly name: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly type: import("../db").Typed<"string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image", {
                        readonly mandatory: true;
                        readonly choices: ("string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image")[];
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly value: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly system: import("../db").Typed<boolean, {}> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            };
            readonly id: string;
            readonly data: {
                readonly value: string;
                readonly name: string;
                readonly type: "string" | "boolean" | "image" | "integer" | "choicelist" | "color" | "date_format" | "password" | "password2" | "short_string" | "time_format" | "timezone" | "uploaded_image";
                readonly description: string;
                readonly system: boolean;
            };
        }, Record>;
    }, Record>;
};
