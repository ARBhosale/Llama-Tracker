import { Table } from '../db';
export type sys_script = typeof sys_script;
export declare const sys_script: {
    readonly name: "sys_script";
    readonly extends: {
        readonly name: "sys_metadata";
        readonly schema: {
            readonly sys_class_name: import("../db").Typed<string, {
                readonly label: "Class";
                readonly default: "javascript:current.getTableName();";
            }> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly sys_name: import("../db").Typed<string, {
                readonly maxLength: 255;
            }> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly sys_package: import("../db").Typed<string | import("../db").Record<{
                readonly name: "sys_package";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly enforce_license: import("../db").Typed<string, {
                        readonly label: "Subscription requirement";
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly licensable: import("../db").Typed<boolean, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly license_category: import("../db").Typed<string, {
                        readonly label: "Subscription Category";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                        readonly label: "Subscription Model";
                        readonly choices: {
                            readonly none: {
                                readonly label: "Not applicable";
                                readonly sequence: 1;
                            };
                            readonly fulfiller: {
                                readonly label: "Fulfiller/Requester";
                                readonly sequence: 2;
                            };
                            readonly producer: {
                                readonly label: "Producer";
                                readonly sequence: 3;
                            };
                            readonly capacity: {
                                readonly label: "Capacity";
                                readonly sequence: 4;
                            };
                            readonly mixed: {
                                readonly label: "Mixed";
                                readonly sequence: 5;
                            };
                            readonly app_use: {
                                readonly label: "Application in use";
                                readonly sequence: 6;
                            };
                        };
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly maxLength: 100;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly source: import("../db").Typed<string, {
                        readonly label: "ID";
                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly trackable: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                };
            } & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly enforce_license: import("../db").Typed<string, {
                            readonly label: "Subscription requirement";
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                    };
                } & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
            }> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly sys_policy: import("../db").Typed<"read" | "protected", {
                readonly label: "Protection policy";
                readonly choices: {
                    readonly read: "Read-only";
                    readonly protected: "Protected";
                };
            }> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly sys_scope: import("../db").Typed<string | import("../db").Record<{
                readonly name: "sys_scope";
                readonly extends: {
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly enforce_license: import("../db").Typed<string, {
                            readonly label: "Subscription requirement";
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                    };
                } & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
                readonly schema: {
                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                        readonly label: "Can Edit Application in Studio";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly js_level: import("../db").Typed<string, {
                        readonly label: "JavaScript Mode";
                        readonly default: "es_latest";
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly logo: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly private: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly restrict_table_access: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly scope: import("../db").Typed<string, {
                        readonly maxLength: 18;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly scoped_administration: import("../db").Typed<boolean, {
                        readonly label: "Application administration";
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly short_description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly template: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly vendor: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                };
            } & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                            };
                        };
                    } & {
                        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly js_level: import("../db").Typed<string, {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                        };
                    };
                } & {
                    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
                };
            }> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
            readonly sys_update_name: import("../db").Typed<string, {
                readonly label: "Update name";
                readonly maxLength: 250;
            }> & {
                readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
            };
        };
    } & {
        readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
    };
    readonly schema: {
        readonly name: import("../db").Typed<string, {
            readonly mandatory: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly order: import("../db").Typed<number, {
            readonly default: 100;
            readonly mandatory: false;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly collection: import("../db").Typed<Table, {
            readonly mandatory: true;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly active: import("../db").Typed<boolean, {
            readonly readonly: true;
            readonly default: true;
            readonly mandatory: false;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly when: import("../db").Typed<"async" | "before" | "after", {
            readonly choices: {
                readonly before: "before";
                readonly after: "after";
                readonly async: "async";
            };
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly action_insert: import("../db").Typed<boolean, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly action_update: import("../db").Typed<boolean, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly action_delete: import("../db").Typed<boolean, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly action_query: import("../db").Typed<boolean, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly script: import("../db").Typed<import("../db").ScriptModule<Function>, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly add_message: import("../db").Typed<boolean, {}> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly message: import("../db").Typed<string, {
            readonly default: "";
            readonly mandatory: false;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
        readonly role_conditions: import("../db").Typed<string, {
            readonly mandatory: false;
        }> & {
            readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
        };
    };
} & {
    readonly asRecord: () => import("../entity").Entity<import("../db").Record<Table>, Table>;
};
