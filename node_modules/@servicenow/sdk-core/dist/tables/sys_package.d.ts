export type sys_package = typeof sys_package;
export declare const sys_package: {
    readonly name: "sys_package";
    readonly schema: {
        readonly active: import("../db").Typed<boolean, {
            readonly default: true;
        }> & {
            readonly asRecord: () => never;
        };
        readonly enforce_license: import("../db").Typed<string, {
            readonly label: "Subscription requirement";
            readonly default: "none";
        }> & {
            readonly asRecord: () => never;
        };
        readonly licensable: import("../db").Typed<boolean, {}> & {
            readonly asRecord: () => never;
        };
        readonly license_category: import("../db").Typed<string, {
            readonly label: "Subscription Category";
        }> & {
            readonly asRecord: () => never;
        };
        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
            readonly label: "Subscription Model";
            readonly choices: {
                readonly none: {
                    readonly label: "Not applicable";
                    readonly sequence: 1;
                };
                readonly fulfiller: {
                    readonly label: "Fulfiller/Requester";
                    readonly sequence: 2;
                };
                readonly producer: {
                    readonly label: "Producer";
                    readonly sequence: 3;
                };
                readonly capacity: {
                    readonly label: "Capacity";
                    readonly sequence: 4;
                };
                readonly mixed: {
                    readonly label: "Mixed";
                    readonly sequence: 5;
                };
                readonly app_use: {
                    readonly label: "Application in use";
                    readonly sequence: 6;
                };
            };
            readonly default: "none";
        }> & {
            readonly asRecord: () => never;
        };
        readonly name: import("../db").Typed<string, {
            readonly maxLength: 100;
        }> & {
            readonly asRecord: () => never;
        };
        readonly source: import("../db").Typed<string, {
            readonly label: "ID";
            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
        }> & {
            readonly asRecord: () => never;
        };
        readonly trackable: import("../db").Typed<boolean, {
            readonly default: false;
        }> & {
            readonly asRecord: () => never;
        };
        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
            readonly asRecord: () => never;
        };
    };
} & {
    readonly asRecord: () => never;
};
