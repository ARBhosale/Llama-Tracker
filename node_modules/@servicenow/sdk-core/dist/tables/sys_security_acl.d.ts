import { Table, Record, ScriptModule, Data } from '../db';
import { GlideRecord } from '../script/GlideRecord';
import { sys_user_role } from './sys_user_role';
export type sys_security_acl = typeof sys_security_acl;
export declare const sys_security_acl: {
    readonly name: "sys_security_acl";
    readonly extends: {
        readonly name: "sys_metadata";
        readonly schema: {
            readonly sys_class_name: import("../db").Typed<string, {
                readonly label: "Class";
                readonly default: "javascript:current.getTableName();";
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_name: import("../db").Typed<string, {
                readonly maxLength: 255;
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_package: import("../db").Typed<string | Record<{
                readonly name: "sys_package";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly enforce_license: import("../db").Typed<string, {
                        readonly label: "Subscription requirement";
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly licensable: import("../db").Typed<boolean, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly license_category: import("../db").Typed<string, {
                        readonly label: "Subscription Category";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                        readonly label: "Subscription Model";
                        readonly choices: {
                            readonly none: {
                                readonly label: "Not applicable";
                                readonly sequence: 1;
                            };
                            readonly fulfiller: {
                                readonly label: "Fulfiller/Requester";
                                readonly sequence: 2;
                            };
                            readonly producer: {
                                readonly label: "Producer";
                                readonly sequence: 3;
                            };
                            readonly capacity: {
                                readonly label: "Capacity";
                                readonly sequence: 4;
                            };
                            readonly mixed: {
                                readonly label: "Mixed";
                                readonly sequence: 5;
                            };
                            readonly app_use: {
                                readonly label: "Application in use";
                                readonly sequence: 6;
                            };
                        };
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly maxLength: 100;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly source: import("../db").Typed<string, {
                        readonly label: "ID";
                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly trackable: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly enforce_license: import("../db").Typed<string, {
                            readonly label: "Subscription requirement";
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                };
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_policy: import("../db").Typed<"read" | "protected", {
                readonly label: "Protection policy";
                readonly choices: {
                    readonly read: "Read-only";
                    readonly protected: "Protected";
                };
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_scope: import("../db").Typed<string | Record<{
                readonly name: "sys_scope";
                readonly extends: {
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly enforce_license: import("../db").Typed<string, {
                            readonly label: "Subscription requirement";
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                };
                readonly schema: {
                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                        readonly label: "Can Edit Application in Studio";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly js_level: import("../db").Typed<string, {
                        readonly label: "JavaScript Mode";
                        readonly default: "es_latest";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly logo: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly private: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly restrict_table_access: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly scope: import("../db").Typed<string, {
                        readonly maxLength: 18;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly scoped_administration: import("../db").Typed<boolean, {
                        readonly label: "Application administration";
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly short_description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly template: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly vendor: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly js_level: import("../db").Typed<string, {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                };
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_update_name: import("../db").Typed<string, {
                readonly label: "Update name";
                readonly maxLength: 250;
            }> & {
                readonly asRecord: () => never;
            };
        };
    } & {
        readonly asRecord: () => never;
    };
    readonly schema: {
        readonly name: import("../db").Typed<string, {}> & {
            readonly asRecord: () => never;
        };
        readonly active: import("../db").Typed<boolean, {
            readonly default: true;
        }> & {
            readonly asRecord: () => never;
        };
        readonly script: import("../db").Typed<ScriptModule<(current: any) => boolean>, {
            readonly mandatory: false;
            readonly signature: (current: any) => boolean;
        }> & {
            readonly asRecord: () => never;
        };
        readonly admin_overrides: import("../db").Typed<boolean, {
            readonly default: true;
        }> & {
            readonly asRecord: () => never;
        };
        readonly type: import("../db").Typed<"client_callable_flow_object" | "client_callable_script_include" | "GraphQL" | "pd_action" | "processor" | "record" | "REST_Endpoint" | "ui_page" | "ux_data_broker" | "ux_page" | "ux_route", {
            readonly mandatory: true;
            readonly choices: {
                readonly client_callable_flow_object: "client_callable_flow_object";
                readonly client_callable_script_include: "client_callable_script_include";
                readonly GraphQL: "GraphQL";
                readonly pd_action: "pd_action";
                readonly processor: "processor";
                readonly record: "record";
                readonly REST_Endpoint: "REST_Endpoint";
                readonly ui_page: "ui_page";
                readonly ux_data_broker: "ux_data_broker";
                readonly ux_page: "ux_page";
                readonly ux_route: "ux_route";
            };
        }> & {
            readonly asRecord: () => never;
        };
        readonly condition: import("../db").Typed<string, {}> & {
            readonly asRecord: () => never;
        };
        readonly operation: import("../db").Typed<"read" | "delete" | "execute" | "create" | "write" | "edit_task_relations" | "edit_ci_relations" | "save_as_template" | "add_to_list" | "report_on" | "list_edit" | "report_view" | "personalize_choices", {
            readonly mandatory: true;
            readonly choices: {
                readonly execute: "execute";
                readonly create: "create";
                readonly read: "read";
                readonly write: "write";
                readonly delete: "delete";
                readonly edit_task_relations: "edit_task_relations";
                readonly edit_ci_relations: "edit_ci_relations";
                readonly save_as_template: "save_as_template";
                readonly add_to_list: "add_to_list";
                readonly report_on: "report_on";
                readonly list_edit: "list_edit";
                readonly report_view: "report_view";
                readonly personalize_choices: "personalize_choices";
            };
        }> & {
            readonly asRecord: () => never;
        };
    };
} & {
    readonly asRecord: () => never;
};
export declare function Acl<const T extends Table, const P>(properties: P & {
    id: string | number;
    data: Data<typeof sys_security_acl> & {
        table?: T;
        script?: ScriptModule<(current: GlideRecord<T>) => boolean>;
        roles?: Record<sys_user_role>[];
    };
}): {
    readonly table: {
        readonly name: "sys_security_acl";
        readonly extends: {
            readonly name: "sys_metadata";
            readonly schema: {
                readonly sys_class_name: import("../db").Typed<string, {
                    readonly label: "Class";
                    readonly default: "javascript:current.getTableName();";
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_name: import("../db").Typed<string, {
                    readonly maxLength: 255;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_package: import("../db").Typed<string | Record<{
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly enforce_license: import("../db").Typed<string, {
                            readonly label: "Subscription requirement";
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                    readonly label: "Protection policy";
                    readonly choices: {
                        readonly read: "Read-only";
                        readonly protected: "Protected";
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_scope: import("../db").Typed<string | Record<{
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly js_level: import("../db").Typed<string, {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly js_level: import("../db").Typed<string, {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_update_name: import("../db").Typed<string, {
                    readonly label: "Update name";
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        };
        readonly schema: {
            readonly name: import("../db").Typed<string, {}> & {
                readonly asRecord: () => never;
            };
            readonly active: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => never;
            };
            readonly script: import("../db").Typed<ScriptModule<(current: any) => boolean>, {
                readonly mandatory: false;
                readonly signature: (current: any) => boolean;
            }> & {
                readonly asRecord: () => never;
            };
            readonly admin_overrides: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => never;
            };
            readonly type: import("../db").Typed<"client_callable_flow_object" | "client_callable_script_include" | "GraphQL" | "pd_action" | "processor" | "record" | "REST_Endpoint" | "ui_page" | "ux_data_broker" | "ux_page" | "ux_route", {
                readonly mandatory: true;
                readonly choices: {
                    readonly client_callable_flow_object: "client_callable_flow_object";
                    readonly client_callable_script_include: "client_callable_script_include";
                    readonly GraphQL: "GraphQL";
                    readonly pd_action: "pd_action";
                    readonly processor: "processor";
                    readonly record: "record";
                    readonly REST_Endpoint: "REST_Endpoint";
                    readonly ui_page: "ui_page";
                    readonly ux_data_broker: "ux_data_broker";
                    readonly ux_page: "ux_page";
                    readonly ux_route: "ux_route";
                };
            }> & {
                readonly asRecord: () => never;
            };
            readonly condition: import("../db").Typed<string, {}> & {
                readonly asRecord: () => never;
            };
            readonly operation: import("../db").Typed<"read" | "delete" | "execute" | "create" | "write" | "edit_task_relations" | "edit_ci_relations" | "save_as_template" | "add_to_list" | "report_on" | "list_edit" | "report_view" | "personalize_choices", {
                readonly mandatory: true;
                readonly choices: {
                    readonly execute: "execute";
                    readonly create: "create";
                    readonly read: "read";
                    readonly write: "write";
                    readonly delete: "delete";
                    readonly edit_task_relations: "edit_task_relations";
                    readonly edit_ci_relations: "edit_ci_relations";
                    readonly save_as_template: "save_as_template";
                    readonly add_to_list: "add_to_list";
                    readonly report_on: "report_on";
                    readonly list_edit: "list_edit";
                    readonly report_view: "report_view";
                    readonly personalize_choices: "personalize_choices";
                };
            }> & {
                readonly asRecord: () => never;
            };
        };
    } & {
        readonly asRecord: () => never;
    };
} & P & {
    id: string | number;
    data: Data<{
        readonly name: "sys_security_acl";
        readonly extends: {
            readonly name: "sys_metadata";
            readonly schema: {
                readonly sys_class_name: import("../db").Typed<string, {
                    readonly label: "Class";
                    readonly default: "javascript:current.getTableName();";
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_name: import("../db").Typed<string, {
                    readonly maxLength: 255;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_package: import("../db").Typed<string | Record<{
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly enforce_license: import("../db").Typed<string, {
                            readonly label: "Subscription requirement";
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                    readonly label: "Protection policy";
                    readonly choices: {
                        readonly read: "Read-only";
                        readonly protected: "Protected";
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_scope: import("../db").Typed<string | Record<{
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly js_level: import("../db").Typed<string, {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly js_level: import("../db").Typed<string, {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sys_update_name: import("../db").Typed<string, {
                    readonly label: "Update name";
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        };
        readonly schema: {
            readonly name: import("../db").Typed<string, {}> & {
                readonly asRecord: () => never;
            };
            readonly active: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => never;
            };
            readonly script: import("../db").Typed<ScriptModule<(current: any) => boolean>, {
                readonly mandatory: false;
                readonly signature: (current: any) => boolean;
            }> & {
                readonly asRecord: () => never;
            };
            readonly admin_overrides: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => never;
            };
            readonly type: import("../db").Typed<"client_callable_flow_object" | "client_callable_script_include" | "GraphQL" | "pd_action" | "processor" | "record" | "REST_Endpoint" | "ui_page" | "ux_data_broker" | "ux_page" | "ux_route", {
                readonly mandatory: true;
                readonly choices: {
                    readonly client_callable_flow_object: "client_callable_flow_object";
                    readonly client_callable_script_include: "client_callable_script_include";
                    readonly GraphQL: "GraphQL";
                    readonly pd_action: "pd_action";
                    readonly processor: "processor";
                    readonly record: "record";
                    readonly REST_Endpoint: "REST_Endpoint";
                    readonly ui_page: "ui_page";
                    readonly ux_data_broker: "ux_data_broker";
                    readonly ux_page: "ux_page";
                    readonly ux_route: "ux_route";
                };
            }> & {
                readonly asRecord: () => never;
            };
            readonly condition: import("../db").Typed<string, {}> & {
                readonly asRecord: () => never;
            };
            readonly operation: import("../db").Typed<"read" | "delete" | "execute" | "create" | "write" | "edit_task_relations" | "edit_ci_relations" | "save_as_template" | "add_to_list" | "report_on" | "list_edit" | "report_view" | "personalize_choices", {
                readonly mandatory: true;
                readonly choices: {
                    readonly execute: "execute";
                    readonly create: "create";
                    readonly read: "read";
                    readonly write: "write";
                    readonly delete: "delete";
                    readonly edit_task_relations: "edit_task_relations";
                    readonly edit_ci_relations: "edit_ci_relations";
                    readonly save_as_template: "save_as_template";
                    readonly add_to_list: "add_to_list";
                    readonly report_on: "report_on";
                    readonly list_edit: "list_edit";
                    readonly report_view: "report_view";
                    readonly personalize_choices: "personalize_choices";
                };
            }> & {
                readonly asRecord: () => never;
            };
        };
    } & {
        readonly asRecord: () => never;
    }> & {
        table?: T;
        script?: ScriptModule<(current: GlideRecord<T>) => boolean>;
        roles?: Record<sys_user_role>[];
    };
} & {
    readonly asRecord: () => import("../entity").Entity<{
        readonly table: {
            readonly name: "sys_security_acl";
            readonly extends: {
                readonly name: "sys_metadata";
                readonly schema: {
                    readonly sys_class_name: import("../db").Typed<string, {
                        readonly label: "Class";
                        readonly default: "javascript:current.getTableName();";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_name: import("../db").Typed<string, {
                        readonly maxLength: 255;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_package: import("../db").Typed<string | Record<{
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                        readonly label: "Protection policy";
                        readonly choices: {
                            readonly read: "Read-only";
                            readonly protected: "Protected";
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_scope: import("../db").Typed<string | Record<{
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly js_level: import("../db").Typed<string, {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly enforce_license: import("../db").Typed<string, {
                                        readonly label: "Subscription requirement";
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly js_level: import("../db").Typed<string, {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_update_name: import("../db").Typed<string, {
                        readonly label: "Update name";
                        readonly maxLength: 250;
                    }> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            };
            readonly schema: {
                readonly name: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly active: import("../db").Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly script: import("../db").Typed<ScriptModule<(current: any) => boolean>, {
                    readonly mandatory: false;
                    readonly signature: (current: any) => boolean;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly admin_overrides: import("../db").Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly type: import("../db").Typed<"client_callable_flow_object" | "client_callable_script_include" | "GraphQL" | "pd_action" | "processor" | "record" | "REST_Endpoint" | "ui_page" | "ux_data_broker" | "ux_page" | "ux_route", {
                    readonly mandatory: true;
                    readonly choices: {
                        readonly client_callable_flow_object: "client_callable_flow_object";
                        readonly client_callable_script_include: "client_callable_script_include";
                        readonly GraphQL: "GraphQL";
                        readonly pd_action: "pd_action";
                        readonly processor: "processor";
                        readonly record: "record";
                        readonly REST_Endpoint: "REST_Endpoint";
                        readonly ui_page: "ui_page";
                        readonly ux_data_broker: "ux_data_broker";
                        readonly ux_page: "ux_page";
                        readonly ux_route: "ux_route";
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly condition: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly operation: import("../db").Typed<"read" | "delete" | "execute" | "create" | "write" | "edit_task_relations" | "edit_ci_relations" | "save_as_template" | "add_to_list" | "report_on" | "list_edit" | "report_view" | "personalize_choices", {
                    readonly mandatory: true;
                    readonly choices: {
                        readonly execute: "execute";
                        readonly create: "create";
                        readonly read: "read";
                        readonly write: "write";
                        readonly delete: "delete";
                        readonly edit_task_relations: "edit_task_relations";
                        readonly edit_ci_relations: "edit_ci_relations";
                        readonly save_as_template: "save_as_template";
                        readonly add_to_list: "add_to_list";
                        readonly report_on: "report_on";
                        readonly list_edit: "list_edit";
                        readonly report_view: "report_view";
                        readonly personalize_choices: "personalize_choices";
                    };
                }> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        };
    } & P & {
        id: string | number;
        data: Data<{
            readonly name: "sys_security_acl";
            readonly extends: {
                readonly name: "sys_metadata";
                readonly schema: {
                    readonly sys_class_name: import("../db").Typed<string, {
                        readonly label: "Class";
                        readonly default: "javascript:current.getTableName();";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_name: import("../db").Typed<string, {
                        readonly maxLength: 255;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_package: import("../db").Typed<string | Record<{
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                        readonly label: "Protection policy";
                        readonly choices: {
                            readonly read: "Read-only";
                            readonly protected: "Protected";
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_scope: import("../db").Typed<string | Record<{
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly js_level: import("../db").Typed<string, {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly enforce_license: import("../db").Typed<string, {
                                        readonly label: "Subscription requirement";
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly js_level: import("../db").Typed<string, {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_update_name: import("../db").Typed<string, {
                        readonly label: "Update name";
                        readonly maxLength: 250;
                    }> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            };
            readonly schema: {
                readonly name: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly active: import("../db").Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly script: import("../db").Typed<ScriptModule<(current: any) => boolean>, {
                    readonly mandatory: false;
                    readonly signature: (current: any) => boolean;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly admin_overrides: import("../db").Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly type: import("../db").Typed<"client_callable_flow_object" | "client_callable_script_include" | "GraphQL" | "pd_action" | "processor" | "record" | "REST_Endpoint" | "ui_page" | "ux_data_broker" | "ux_page" | "ux_route", {
                    readonly mandatory: true;
                    readonly choices: {
                        readonly client_callable_flow_object: "client_callable_flow_object";
                        readonly client_callable_script_include: "client_callable_script_include";
                        readonly GraphQL: "GraphQL";
                        readonly pd_action: "pd_action";
                        readonly processor: "processor";
                        readonly record: "record";
                        readonly REST_Endpoint: "REST_Endpoint";
                        readonly ui_page: "ui_page";
                        readonly ux_data_broker: "ux_data_broker";
                        readonly ux_page: "ux_page";
                        readonly ux_route: "ux_route";
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly condition: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly operation: import("../db").Typed<"read" | "delete" | "execute" | "create" | "write" | "edit_task_relations" | "edit_ci_relations" | "save_as_template" | "add_to_list" | "report_on" | "list_edit" | "report_view" | "personalize_choices", {
                    readonly mandatory: true;
                    readonly choices: {
                        readonly execute: "execute";
                        readonly create: "create";
                        readonly read: "read";
                        readonly write: "write";
                        readonly delete: "delete";
                        readonly edit_task_relations: "edit_task_relations";
                        readonly edit_ci_relations: "edit_ci_relations";
                        readonly save_as_template: "save_as_template";
                        readonly add_to_list: "add_to_list";
                        readonly report_on: "report_on";
                        readonly list_edit: "list_edit";
                        readonly report_view: "report_view";
                        readonly personalize_choices: "personalize_choices";
                    };
                }> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        }> & {
            table?: T;
            script?: ScriptModule<(current: GlideRecord<T>) => boolean>;
            roles?: Record<sys_user_role>[];
        };
    }, Record>;
};
