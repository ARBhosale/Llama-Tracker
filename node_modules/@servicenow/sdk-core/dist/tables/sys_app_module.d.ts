import { Table } from '../db';
export type sys_app_module = typeof sys_app_module;
export declare const sys_app_module: {
    readonly name: "sys_app_module";
    readonly extends: {
        readonly name: "sys_metadata";
        readonly schema: {
            readonly sys_class_name: import("../db").Typed<string, {
                readonly label: "Class";
                readonly default: "javascript:current.getTableName();";
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_name: import("../db").Typed<string, {
                readonly maxLength: 255;
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_package: import("../db").Typed<string | import("../db").Record<{
                readonly name: "sys_package";
                readonly schema: {
                    readonly active: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly enforce_license: import("../db").Typed<string, {
                        readonly label: "Subscription requirement";
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly licensable: import("../db").Typed<boolean, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly license_category: import("../db").Typed<string, {
                        readonly label: "Subscription Category";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                        readonly label: "Subscription Model";
                        readonly choices: {
                            readonly none: {
                                readonly label: "Not applicable";
                                readonly sequence: 1;
                            };
                            readonly fulfiller: {
                                readonly label: "Fulfiller/Requester";
                                readonly sequence: 2;
                            };
                            readonly producer: {
                                readonly label: "Producer";
                                readonly sequence: 3;
                            };
                            readonly capacity: {
                                readonly label: "Capacity";
                                readonly sequence: 4;
                            };
                            readonly mixed: {
                                readonly label: "Mixed";
                                readonly sequence: 5;
                            };
                            readonly app_use: {
                                readonly label: "Application in use";
                                readonly sequence: 6;
                            };
                        };
                        readonly default: "none";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly maxLength: 100;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly source: import("../db").Typed<string, {
                        readonly label: "ID";
                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly trackable: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly enforce_license: import("../db").Typed<string, {
                            readonly label: "Subscription requirement";
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                };
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_policy: import("../db").Typed<"read" | "protected", {
                readonly label: "Protection policy";
                readonly choices: {
                    readonly read: "Read-only";
                    readonly protected: "Protected";
                };
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_scope: import("../db").Typed<string | import("../db").Record<{
                readonly name: "sys_scope";
                readonly extends: {
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly enforce_license: import("../db").Typed<string, {
                            readonly label: "Subscription requirement";
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                };
                readonly schema: {
                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                        readonly label: "Can Edit Application in Studio";
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly js_level: import("../db").Typed<string, {
                        readonly label: "JavaScript Mode";
                        readonly default: "es_latest";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly logo: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly private: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly restrict_table_access: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly scope: import("../db").Typed<string, {
                        readonly maxLength: 18;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly scoped_administration: import("../db").Typed<boolean, {
                        readonly label: "Application administration";
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly short_description: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly template: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly vendor: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            }>, {
                readonly referenceTable: {
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly js_level: import("../db").Typed<string, {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                };
            }> & {
                readonly asRecord: () => never;
            };
            readonly sys_update_name: import("../db").Typed<string, {
                readonly label: "Update name";
                readonly maxLength: 250;
            }> & {
                readonly asRecord: () => never;
            };
        };
    } & {
        readonly asRecord: () => never;
    };
    readonly schema: {
        readonly active: import("../db").Typed<boolean, {
            readonly default: true;
        }> & {
            readonly asRecord: () => never;
        };
        readonly application: import("../db").Typed<string | import("../db").Record<{
            readonly name: "sys_app_application";
            readonly extends: {
                readonly name: "sys_metadata";
                readonly schema: {
                    readonly sys_class_name: import("../db").Typed<string, {
                        readonly label: "Class";
                        readonly default: "javascript:current.getTableName();";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_name: import("../db").Typed<string, {
                        readonly maxLength: 255;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_package: import("../db").Typed<string | import("../db").Record<{
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly enforce_license: import("../db").Typed<string, {
                                readonly label: "Subscription requirement";
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                        readonly label: "Protection policy";
                        readonly choices: {
                            readonly read: "Read-only";
                            readonly protected: "Protected";
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_scope: import("../db").Typed<string | import("../db").Record<{
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly js_level: import("../db").Typed<string, {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly enforce_license: import("../db").Typed<string, {
                                        readonly label: "Subscription requirement";
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly js_level: import("../db").Typed<string, {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sys_update_name: import("../db").Typed<string, {
                        readonly label: "Update name";
                        readonly maxLength: 250;
                    }> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            };
            readonly schema: {
                readonly name: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly title: import("../db").Typed<string, {
                    readonly mandatory: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly active: import("../db").Typed<boolean, {
                    readonly default: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly view_name: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly roles: import("../db").Typed<import("../db").Record<{
                    readonly name: "sys_user_role";
                    readonly schema: {
                        readonly name: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                }>, {}> & {
                    readonly asRecord: () => never;
                };
                readonly order: import("../db").Typed<number, {}> & {
                    readonly asRecord: () => never;
                };
                readonly hint: import("../db").Typed<string, {
                    readonly maxLength: 255;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly category: import("../db").Typed<string | import("../db").Record<{
                    readonly name: "sys_app_category";
                    readonly extends: {
                        readonly name: "sys_metadata";
                        readonly schema: {
                            readonly sys_class_name: import("../db").Typed<string, {
                                readonly label: "Class";
                                readonly default: "javascript:current.getTableName();";
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly sys_name: import("../db").Typed<string, {
                                readonly maxLength: 255;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly sys_package: import("../db").Typed<string | import("../db").Record<{
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly enforce_license: import("../db").Typed<string, {
                                        readonly label: "Subscription requirement";
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly enforce_license: import("../db").Typed<string, {
                                            readonly label: "Subscription requirement";
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                    };
                                } & {
                                    readonly asRecord: () => never;
                                };
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                readonly label: "Protection policy";
                                readonly choices: {
                                    readonly read: "Read-only";
                                    readonly protected: "Protected";
                                };
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly sys_scope: import("../db").Typed<string | import("../db").Record<{
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly enforce_license: import("../db").Typed<string, {
                                            readonly label: "Subscription requirement";
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                    };
                                } & {
                                    readonly asRecord: () => never;
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly js_level: import("../db").Typed<string, {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            }>, {
                                readonly referenceTable: {
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly enforce_license: import("../db").Typed<string, {
                                                readonly label: "Subscription requirement";
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                        };
                                    } & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly js_level: import("../db").Typed<string, {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                    };
                                } & {
                                    readonly asRecord: () => never;
                                };
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly sys_update_name: import("../db").Typed<string, {
                                readonly label: "Update name";
                                readonly maxLength: 250;
                            }> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                    readonly schema: {
                        readonly name: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly default_order: import("../db").Typed<number, {}> & {
                            readonly asRecord: () => never;
                        };
                        readonly style: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_app_category";
                        readonly extends: {
                            readonly name: "sys_metadata";
                            readonly schema: {
                                readonly sys_class_name: import("../db").Typed<string, {
                                    readonly label: "Class";
                                    readonly default: "javascript:current.getTableName();";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_name: import("../db").Typed<string, {
                                    readonly maxLength: 255;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_package: import("../db").Typed<string | import("../db").Record<{
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly enforce_license: import("../db").Typed<string, {
                                            readonly label: "Subscription requirement";
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                    };
                                } & {
                                    readonly asRecord: () => never;
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly enforce_license: import("../db").Typed<string, {
                                                readonly label: "Subscription requirement";
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                        };
                                    } & {
                                        readonly asRecord: () => never;
                                    };
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                    readonly label: "Protection policy";
                                    readonly choices: {
                                        readonly read: "Read-only";
                                        readonly protected: "Protected";
                                    };
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_scope: import("../db").Typed<string | import("../db").Record<{
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly enforce_license: import("../db").Typed<string, {
                                                readonly label: "Subscription requirement";
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                        };
                                    } & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly js_level: import("../db").Typed<string, {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                    };
                                } & {
                                    readonly asRecord: () => never;
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly enforce_license: import("../db").Typed<string, {
                                                    readonly label: "Subscription requirement";
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                            };
                                        } & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly js_level: import("../db").Typed<string, {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                        };
                                    } & {
                                        readonly asRecord: () => never;
                                    };
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_update_name: import("../db").Typed<string, {
                                    readonly label: "Update name";
                                    readonly maxLength: 250;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                        readonly schema: {
                            readonly name: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly default_order: import("../db").Typed<number, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly style: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly device_type: import("../db").Typed<"any" | "browser" | "mobile", {
                    readonly choices: {
                        readonly any: "Any";
                        readonly browser: "Browser";
                        readonly mobile: "Mobile";
                    };
                    readonly default: "browser";
                }> & {
                    readonly asRecord: () => never;
                };
                readonly description: import("../db").Typed<string, {
                    readonly maxLength: 4000;
                }> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        }>, {
            readonly label: "Application menu";
            readonly referenceTable: {
                readonly name: "sys_app_application";
                readonly extends: {
                    readonly name: "sys_metadata";
                    readonly schema: {
                        readonly sys_class_name: import("../db").Typed<string, {
                            readonly label: "Class";
                            readonly default: "javascript:current.getTableName();";
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_name: import("../db").Typed<string, {
                            readonly maxLength: 255;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_package: import("../db").Typed<string | import("../db").Record<{
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly enforce_license: import("../db").Typed<string, {
                                    readonly label: "Subscription requirement";
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly enforce_license: import("../db").Typed<string, {
                                        readonly label: "Subscription requirement";
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_policy: import("../db").Typed<"read" | "protected", {
                            readonly label: "Protection policy";
                            readonly choices: {
                                readonly read: "Read-only";
                                readonly protected: "Protected";
                            };
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_scope: import("../db").Typed<string | import("../db").Record<{
                            readonly name: "sys_scope";
                            readonly extends: {
                                readonly name: "sys_package";
                                readonly schema: {
                                    readonly active: import("../db").Typed<boolean, {
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly enforce_license: import("../db").Typed<string, {
                                        readonly label: "Subscription requirement";
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_category: import("../db").Typed<string, {
                                        readonly label: "Subscription Category";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                        readonly label: "Subscription Model";
                                        readonly choices: {
                                            readonly none: {
                                                readonly label: "Not applicable";
                                                readonly sequence: 1;
                                            };
                                            readonly fulfiller: {
                                                readonly label: "Fulfiller/Requester";
                                                readonly sequence: 2;
                                            };
                                            readonly producer: {
                                                readonly label: "Producer";
                                                readonly sequence: 3;
                                            };
                                            readonly capacity: {
                                                readonly label: "Capacity";
                                                readonly sequence: 4;
                                            };
                                            readonly mixed: {
                                                readonly label: "Mixed";
                                                readonly sequence: 5;
                                            };
                                            readonly app_use: {
                                                readonly label: "Application in use";
                                                readonly sequence: 6;
                                            };
                                        };
                                        readonly default: "none";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly name: import("../db").Typed<string, {
                                        readonly maxLength: 100;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly source: import("../db").Typed<string, {
                                        readonly label: "ID";
                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly trackable: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                            readonly schema: {
                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                    readonly label: "Can Edit Application in Studio";
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly js_level: import("../db").Typed<string, {
                                    readonly label: "JavaScript Mode";
                                    readonly default: "es_latest";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly logo: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly private: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scope: import("../db").Typed<string, {
                                    readonly maxLength: 18;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly scoped_administration: import("../db").Typed<boolean, {
                                    readonly label: "Application administration";
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly short_description: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly template: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        }>, {
                            readonly referenceTable: {
                                readonly name: "sys_scope";
                                readonly extends: {
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly enforce_license: import("../db").Typed<string, {
                                            readonly label: "Subscription requirement";
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                    };
                                } & {
                                    readonly asRecord: () => never;
                                };
                                readonly schema: {
                                    readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                        readonly label: "Can Edit Application in Studio";
                                        readonly default: true;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly js_level: import("../db").Typed<string, {
                                        readonly label: "JavaScript Mode";
                                        readonly default: "es_latest";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly logo: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly private: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly restrict_table_access: import("../db").Typed<boolean, {
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly scope: import("../db").Typed<string, {
                                        readonly maxLength: 18;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly scoped_administration: import("../db").Typed<boolean, {
                                        readonly label: "Application administration";
                                        readonly default: false;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly short_description: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly template: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly vendor: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly sys_update_name: import("../db").Typed<string, {
                            readonly label: "Update name";
                            readonly maxLength: 250;
                        }> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                };
                readonly schema: {
                    readonly name: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly title: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly active: import("../db").Typed<boolean, {
                        readonly default: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly view_name: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly roles: import("../db").Typed<import("../db").Record<{
                        readonly name: "sys_user_role";
                        readonly schema: {
                            readonly name: import("../db").Typed<string, {
                                readonly mandatory: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly order: import("../db").Typed<number, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly hint: import("../db").Typed<string, {
                        readonly maxLength: 255;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly category: import("../db").Typed<string | import("../db").Record<{
                        readonly name: "sys_app_category";
                        readonly extends: {
                            readonly name: "sys_metadata";
                            readonly schema: {
                                readonly sys_class_name: import("../db").Typed<string, {
                                    readonly label: "Class";
                                    readonly default: "javascript:current.getTableName();";
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_name: import("../db").Typed<string, {
                                    readonly maxLength: 255;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_package: import("../db").Typed<string | import("../db").Record<{
                                    readonly name: "sys_package";
                                    readonly schema: {
                                        readonly active: import("../db").Typed<boolean, {
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly enforce_license: import("../db").Typed<string, {
                                            readonly label: "Subscription requirement";
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly licensable: import("../db").Typed<boolean, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_category: import("../db").Typed<string, {
                                            readonly label: "Subscription Category";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                            readonly label: "Subscription Model";
                                            readonly choices: {
                                                readonly none: {
                                                    readonly label: "Not applicable";
                                                    readonly sequence: 1;
                                                };
                                                readonly fulfiller: {
                                                    readonly label: "Fulfiller/Requester";
                                                    readonly sequence: 2;
                                                };
                                                readonly producer: {
                                                    readonly label: "Producer";
                                                    readonly sequence: 3;
                                                };
                                                readonly capacity: {
                                                    readonly label: "Capacity";
                                                    readonly sequence: 4;
                                                };
                                                readonly mixed: {
                                                    readonly label: "Mixed";
                                                    readonly sequence: 5;
                                                };
                                                readonly app_use: {
                                                    readonly label: "Application in use";
                                                    readonly sequence: 6;
                                                };
                                            };
                                            readonly default: "none";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly name: import("../db").Typed<string, {
                                            readonly maxLength: 100;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly source: import("../db").Typed<string, {
                                            readonly label: "ID";
                                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly trackable: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                    };
                                } & {
                                    readonly asRecord: () => never;
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly enforce_license: import("../db").Typed<string, {
                                                readonly label: "Subscription requirement";
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                        };
                                    } & {
                                        readonly asRecord: () => never;
                                    };
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                    readonly label: "Protection policy";
                                    readonly choices: {
                                        readonly read: "Read-only";
                                        readonly protected: "Protected";
                                    };
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_scope: import("../db").Typed<string | import("../db").Record<{
                                    readonly name: "sys_scope";
                                    readonly extends: {
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly enforce_license: import("../db").Typed<string, {
                                                readonly label: "Subscription requirement";
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                        };
                                    } & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly schema: {
                                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                            readonly label: "Can Edit Application in Studio";
                                            readonly default: true;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly js_level: import("../db").Typed<string, {
                                            readonly label: "JavaScript Mode";
                                            readonly default: "es_latest";
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly logo: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly private: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly restrict_table_access: import("../db").Typed<boolean, {
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly scope: import("../db").Typed<string, {
                                            readonly maxLength: 18;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly scoped_administration: import("../db").Typed<boolean, {
                                            readonly label: "Application administration";
                                            readonly default: false;
                                        }> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly short_description: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly template: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly vendor: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                            readonly asRecord: () => never;
                                        };
                                    };
                                } & {
                                    readonly asRecord: () => never;
                                }>, {
                                    readonly referenceTable: {
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly enforce_license: import("../db").Typed<string, {
                                                    readonly label: "Subscription requirement";
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                            };
                                        } & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly js_level: import("../db").Typed<string, {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                        };
                                    } & {
                                        readonly asRecord: () => never;
                                    };
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly sys_update_name: import("../db").Typed<string, {
                                    readonly label: "Update name";
                                    readonly maxLength: 250;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                        readonly schema: {
                            readonly name: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly default_order: import("../db").Typed<number, {}> & {
                                readonly asRecord: () => never;
                            };
                            readonly style: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_app_category";
                            readonly extends: {
                                readonly name: "sys_metadata";
                                readonly schema: {
                                    readonly sys_class_name: import("../db").Typed<string, {
                                        readonly label: "Class";
                                        readonly default: "javascript:current.getTableName();";
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly sys_name: import("../db").Typed<string, {
                                        readonly maxLength: 255;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly sys_package: import("../db").Typed<string | import("../db").Record<{
                                        readonly name: "sys_package";
                                        readonly schema: {
                                            readonly active: import("../db").Typed<boolean, {
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly enforce_license: import("../db").Typed<string, {
                                                readonly label: "Subscription requirement";
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_category: import("../db").Typed<string, {
                                                readonly label: "Subscription Category";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                readonly label: "Subscription Model";
                                                readonly choices: {
                                                    readonly none: {
                                                        readonly label: "Not applicable";
                                                        readonly sequence: 1;
                                                    };
                                                    readonly fulfiller: {
                                                        readonly label: "Fulfiller/Requester";
                                                        readonly sequence: 2;
                                                    };
                                                    readonly producer: {
                                                        readonly label: "Producer";
                                                        readonly sequence: 3;
                                                    };
                                                    readonly capacity: {
                                                        readonly label: "Capacity";
                                                        readonly sequence: 4;
                                                    };
                                                    readonly mixed: {
                                                        readonly label: "Mixed";
                                                        readonly sequence: 5;
                                                    };
                                                    readonly app_use: {
                                                        readonly label: "Application in use";
                                                        readonly sequence: 6;
                                                    };
                                                };
                                                readonly default: "none";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly name: import("../db").Typed<string, {
                                                readonly maxLength: 100;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly source: import("../db").Typed<string, {
                                                readonly label: "ID";
                                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly trackable: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                        };
                                    } & {
                                        readonly asRecord: () => never;
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly enforce_license: import("../db").Typed<string, {
                                                    readonly label: "Subscription requirement";
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                            };
                                        } & {
                                            readonly asRecord: () => never;
                                        };
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly sys_policy: import("../db").Typed<"read" | "protected", {
                                        readonly label: "Protection policy";
                                        readonly choices: {
                                            readonly read: "Read-only";
                                            readonly protected: "Protected";
                                        };
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly sys_scope: import("../db").Typed<string | import("../db").Record<{
                                        readonly name: "sys_scope";
                                        readonly extends: {
                                            readonly name: "sys_package";
                                            readonly schema: {
                                                readonly active: import("../db").Typed<boolean, {
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly enforce_license: import("../db").Typed<string, {
                                                    readonly label: "Subscription requirement";
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly license_category: import("../db").Typed<string, {
                                                    readonly label: "Subscription Category";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                    readonly label: "Subscription Model";
                                                    readonly choices: {
                                                        readonly none: {
                                                            readonly label: "Not applicable";
                                                            readonly sequence: 1;
                                                        };
                                                        readonly fulfiller: {
                                                            readonly label: "Fulfiller/Requester";
                                                            readonly sequence: 2;
                                                        };
                                                        readonly producer: {
                                                            readonly label: "Producer";
                                                            readonly sequence: 3;
                                                        };
                                                        readonly capacity: {
                                                            readonly label: "Capacity";
                                                            readonly sequence: 4;
                                                        };
                                                        readonly mixed: {
                                                            readonly label: "Mixed";
                                                            readonly sequence: 5;
                                                        };
                                                        readonly app_use: {
                                                            readonly label: "Application in use";
                                                            readonly sequence: 6;
                                                        };
                                                    };
                                                    readonly default: "none";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly name: import("../db").Typed<string, {
                                                    readonly maxLength: 100;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly source: import("../db").Typed<string, {
                                                    readonly label: "ID";
                                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly trackable: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                            };
                                        } & {
                                            readonly asRecord: () => never;
                                        };
                                        readonly schema: {
                                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                readonly label: "Can Edit Application in Studio";
                                                readonly default: true;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly js_level: import("../db").Typed<string, {
                                                readonly label: "JavaScript Mode";
                                                readonly default: "es_latest";
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly logo: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly private: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly scope: import("../db").Typed<string, {
                                                readonly maxLength: 18;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly scoped_administration: import("../db").Typed<boolean, {
                                                readonly label: "Application administration";
                                                readonly default: false;
                                            }> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly short_description: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly template: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly vendor: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                readonly asRecord: () => never;
                                            };
                                        };
                                    } & {
                                        readonly asRecord: () => never;
                                    }>, {
                                        readonly referenceTable: {
                                            readonly name: "sys_scope";
                                            readonly extends: {
                                                readonly name: "sys_package";
                                                readonly schema: {
                                                    readonly active: import("../db").Typed<boolean, {
                                                        readonly default: true;
                                                    }> & {
                                                        readonly asRecord: () => never;
                                                    };
                                                    readonly enforce_license: import("../db").Typed<string, {
                                                        readonly label: "Subscription requirement";
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => never;
                                                    };
                                                    readonly licensable: import("../db").Typed<boolean, {}> & {
                                                        readonly asRecord: () => never;
                                                    };
                                                    readonly license_category: import("../db").Typed<string, {
                                                        readonly label: "Subscription Category";
                                                    }> & {
                                                        readonly asRecord: () => never;
                                                    };
                                                    readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                                        readonly label: "Subscription Model";
                                                        readonly choices: {
                                                            readonly none: {
                                                                readonly label: "Not applicable";
                                                                readonly sequence: 1;
                                                            };
                                                            readonly fulfiller: {
                                                                readonly label: "Fulfiller/Requester";
                                                                readonly sequence: 2;
                                                            };
                                                            readonly producer: {
                                                                readonly label: "Producer";
                                                                readonly sequence: 3;
                                                            };
                                                            readonly capacity: {
                                                                readonly label: "Capacity";
                                                                readonly sequence: 4;
                                                            };
                                                            readonly mixed: {
                                                                readonly label: "Mixed";
                                                                readonly sequence: 5;
                                                            };
                                                            readonly app_use: {
                                                                readonly label: "Application in use";
                                                                readonly sequence: 6;
                                                            };
                                                        };
                                                        readonly default: "none";
                                                    }> & {
                                                        readonly asRecord: () => never;
                                                    };
                                                    readonly name: import("../db").Typed<string, {
                                                        readonly maxLength: 100;
                                                    }> & {
                                                        readonly asRecord: () => never;
                                                    };
                                                    readonly source: import("../db").Typed<string, {
                                                        readonly label: "ID";
                                                        readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                                    }> & {
                                                        readonly asRecord: () => never;
                                                    };
                                                    readonly trackable: import("../db").Typed<boolean, {
                                                        readonly default: false;
                                                    }> & {
                                                        readonly asRecord: () => never;
                                                    };
                                                    readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                                        readonly asRecord: () => never;
                                                    };
                                                };
                                            } & {
                                                readonly asRecord: () => never;
                                            };
                                            readonly schema: {
                                                readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                                    readonly label: "Can Edit Application in Studio";
                                                    readonly default: true;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly js_level: import("../db").Typed<string, {
                                                    readonly label: "JavaScript Mode";
                                                    readonly default: "es_latest";
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly logo: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly private: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly restrict_table_access: import("../db").Typed<boolean, {
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly runtime_access_tracking: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly scope: import("../db").Typed<string, {
                                                    readonly maxLength: 18;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly scoped_administration: import("../db").Typed<boolean, {
                                                    readonly label: "Application administration";
                                                    readonly default: false;
                                                }> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly short_description: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly template: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly vendor: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                                readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                                    readonly asRecord: () => never;
                                                };
                                            };
                                        } & {
                                            readonly asRecord: () => never;
                                        };
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                    readonly sys_update_name: import("../db").Typed<string, {
                                        readonly label: "Update name";
                                        readonly maxLength: 250;
                                    }> & {
                                        readonly asRecord: () => never;
                                    };
                                };
                            } & {
                                readonly asRecord: () => never;
                            };
                            readonly schema: {
                                readonly name: import("../db").Typed<string, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly default_order: import("../db").Typed<number, {}> & {
                                    readonly asRecord: () => never;
                                };
                                readonly style: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly device_type: import("../db").Typed<"any" | "browser" | "mobile", {
                        readonly choices: {
                            readonly any: "Any";
                            readonly browser: "Browser";
                            readonly mobile: "Mobile";
                        };
                        readonly default: "browser";
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly description: import("../db").Typed<string, {
                        readonly maxLength: 4000;
                    }> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            };
        }> & {
            readonly asRecord: () => never;
        };
        readonly device_type: import("../db").Typed<string, {}> & {
            readonly asRecord: () => never;
        };
        readonly filter: import("../db").Typed<string, {}> & {
            readonly asRecord: () => never;
        };
        readonly hint: import("../db").Typed<string, {
            readonly maxLength: 255;
        }> & {
            readonly asRecord: () => never;
        };
        readonly image: import("../db").Typed<string, {
            readonly label: "Image(UI11)";
            readonly maxLength: 100;
        }> & {
            readonly asRecord: () => never;
        };
        readonly link_type: import("../db").Typed<"NEW" | "DETAIL" | "LIST" | "SEARCH" | "REPORT" | "FILTER" | "SURVEY" | "DIRECT" | "SEPARATOR" | "HTML" | "SCRIPT" | "DOC_LINK" | "TIMELINE" | "ASSESSMENT" | "CONTENT_PAGE" | "MAP" | "HOMEPAGE", {
            readonly choices: {
                readonly NEW: "New Record";
                readonly DETAIL: "Single Record";
                readonly LIST: "List of Records";
                readonly SEARCH: "Search Screen";
                readonly REPORT: "Run a Report";
                readonly HOMEPAGE: {
                    readonly label: "Homepage";
                    readonly inactive: true;
                };
                readonly FILTER: "List Filter";
                readonly SURVEY: "Survey";
                readonly DIRECT: "URL (from Arguments:)";
                readonly SEPARATOR: "Separator";
                readonly HTML: "HTML (from Arguments:)";
                readonly SCRIPT: "Script (from Arguments:)";
                readonly DOC_LINK: "Documentation Link";
                readonly TIMELINE: "Timeline Page";
                readonly ASSESSMENT: "Assessment";
                readonly CONTENT_PAGE: "Content Page";
                readonly MAP: "Map Page";
            };
            readonly default: "LIST";
        }> & {
            readonly asRecord: () => never;
        };
        readonly mobile_title: import("../db").Typed<string, {
            readonly maxLength: 80;
        }> & {
            readonly asRecord: () => never;
        };
        readonly mobile_view_name: import("../db").Typed<string, {}> & {
            readonly asRecord: () => never;
        };
        readonly name: import("../db").Typed<Table, {
            readonly label: "Table";
        }> & {
            readonly asRecord: () => never;
        };
        readonly order: import("../db").Typed<number, {}> & {
            readonly asRecord: () => never;
        };
        readonly override_menu_roles: import("../db").Typed<boolean, {
            readonly label: "Override application menu roles";
            readonly default: false;
        }> & {
            readonly asRecord: () => never;
        };
        readonly query: import("../db").Typed<string, {
            readonly label: "Arguments";
            readonly maxLength: 3500;
        }> & {
            readonly asRecord: () => never;
        };
        readonly roles: import("../db").Typed<import("../db").Record<{
            readonly name: "sys_user_role";
            readonly schema: {
                readonly name: import("../db").Typed<string, {
                    readonly mandatory: true;
                }> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        }>, {}> & {
            readonly asRecord: () => never;
        };
        readonly title: import("../db").Typed<string, {
            readonly maxLength: 80;
        }> & {
            readonly asRecord: () => never;
        };
        readonly uncancelable: import("../db").Typed<boolean, {
            readonly label: "Uncancelable by Other Modules";
            readonly default: false;
        }> & {
            readonly asRecord: () => never;
        };
        readonly view_name: import("../db").Typed<string, {
            readonly default: "javascript:var viewDefault='';if(typeof parent != 'undefined')if(parent.device_type=='mobile') viewDefault='Mobile';viewDefault";
        }> & {
            readonly asRecord: () => never;
        };
        readonly window_name: import("../db").Typed<string, {}> & {
            readonly asRecord: () => never;
        };
    };
} & {
    readonly asRecord: () => never;
};
