import { Record } from '../db';
export type sys_ui_view = typeof sys_ui_view;
export declare const sys_ui_view: {
    readonly name: "sys_ui_view";
    readonly schema: {
        readonly title: import("../db").Typed<string, {
            readonly mandatory: true;
        }> & {
            readonly asRecord: () => never;
        };
        readonly name: import("../db").Typed<string, {
            readonly mandatory: true;
        }> & {
            readonly asRecord: () => never;
        };
        readonly hidden: import("../db").Typed<boolean, {
            readonly default: false;
        }> & {
            readonly asRecord: () => never;
        };
    };
} & {
    readonly asRecord: () => never;
};
export declare const default_view: {
    readonly table: {
        readonly name: "sys_ui_view";
        readonly schema: {
            readonly title: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => never;
            };
            readonly name: import("../db").Typed<string, {
                readonly mandatory: true;
            }> & {
                readonly asRecord: () => never;
            };
            readonly hidden: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => never;
            };
        };
    } & {
        readonly asRecord: () => never;
    };
    readonly id: "Default view";
    readonly data: {
        readonly title: "Default view";
        readonly name: "default_view";
    };
} & {
    readonly asRecord: () => import("../entity").Entity<{
        readonly table: {
            readonly name: "sys_ui_view";
            readonly schema: {
                readonly title: import("../db").Typed<string, {
                    readonly mandatory: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly name: import("../db").Typed<string, {
                    readonly mandatory: true;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly hidden: import("../db").Typed<boolean, {
                    readonly default: false;
                }> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        };
        readonly id: "Default view";
        readonly data: {
            readonly title: "Default view";
            readonly name: "default_view";
        };
    }, Record>;
};
