import { Record, Table } from '../db';
import { Entity } from '../entity';
import { sys_relationship, sys_ui_view } from '../tables';
export type ListElement<T extends Table> = {
    element: keyof T['schema'];
    max_value?: boolean;
    min_value?: boolean;
    average_value?: boolean;
    sum?: boolean;
    position?: number;
};
export type ListSchema<T extends Table> = {
    columns: Array<keyof T['schema'] | ListElement<T>>;
    view: string | Record<sys_ui_view>;
    relationship?: Record<sys_relationship>;
    parent?: string;
};
export type List<T extends Table = Table> = {
    table: T;
    list: ListSchema<T>;
};
export declare function List<const T extends Table>(config: List<T>): List<T> & {
    readonly asRecord: () => Entity<{
        readonly table: {
            readonly name: "sys_ui_list";
            readonly schema: {
                readonly element: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly name: import("../db").Typed<Table, {}> & {
                    readonly asRecord: () => never;
                };
                readonly parent: import("../db").Typed<string, {}> & {
                    readonly asRecord: () => never;
                };
                readonly relationship: import("../db").Typed<string | Record<{
                    readonly name: "sys_relationship";
                } & {
                    readonly asRecord: () => never;
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_relationship";
                    } & {
                        readonly asRecord: () => never;
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly view: import("../db").Typed<string | Record<{
                    readonly name: "sys_ui_view";
                    readonly schema: {
                        readonly title: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly hidden: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_ui_view";
                        readonly schema: {
                            readonly title: import("../db").Typed<string, {
                                readonly mandatory: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly mandatory: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly hidden: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly user: import("../db").Typed<string | Record<{
                    readonly name: "sys_user";
                } & {
                    readonly asRecord: () => never;
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_user";
                    } & {
                        readonly asRecord: () => never;
                    };
                }> & {
                    readonly asRecord: () => never;
                };
                readonly position: import("../db").Typed<number, {}> & {
                    readonly asRecord: () => never;
                };
                readonly average_value: import("../db").Typed<boolean, {
                    readonly default: false;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly max_value: import("../db").Typed<boolean, {
                    readonly default: false;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly min_value: import("../db").Typed<boolean, {
                    readonly default: false;
                }> & {
                    readonly asRecord: () => never;
                };
                readonly sum: import("../db").Typed<boolean, {
                    readonly default: false;
                }> & {
                    readonly asRecord: () => never;
                };
            };
        } & {
            readonly asRecord: () => never;
        };
        readonly id: string;
        readonly data: {
            readonly name: T;
            readonly view: string | Record<{
                readonly name: "sys_ui_view";
                readonly schema: {
                    readonly title: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly name: import("../db").Typed<string, {
                        readonly mandatory: true;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly hidden: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            }>;
        };
    } & {
        readonly asRecord: () => Entity<{
            readonly table: {
                readonly name: "sys_ui_list";
                readonly schema: {
                    readonly element: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly name: import("../db").Typed<Table, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly parent: import("../db").Typed<string, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly relationship: import("../db").Typed<string | Record<{
                        readonly name: "sys_relationship";
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_relationship";
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly view: import("../db").Typed<string | Record<{
                        readonly name: "sys_ui_view";
                        readonly schema: {
                            readonly title: import("../db").Typed<string, {
                                readonly mandatory: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly mandatory: true;
                            }> & {
                                readonly asRecord: () => never;
                            };
                            readonly hidden: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => never;
                            };
                        };
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_ui_view";
                            readonly schema: {
                                readonly title: import("../db").Typed<string, {
                                    readonly mandatory: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly mandatory: true;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                                readonly hidden: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => never;
                                };
                            };
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly user: import("../db").Typed<string | Record<{
                        readonly name: "sys_user";
                    } & {
                        readonly asRecord: () => never;
                    }>, {
                        readonly referenceTable: {
                            readonly name: "sys_user";
                        } & {
                            readonly asRecord: () => never;
                        };
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly position: import("../db").Typed<number, {}> & {
                        readonly asRecord: () => never;
                    };
                    readonly average_value: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly max_value: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly min_value: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                    readonly sum: import("../db").Typed<boolean, {
                        readonly default: false;
                    }> & {
                        readonly asRecord: () => never;
                    };
                };
            } & {
                readonly asRecord: () => never;
            };
            readonly id: string;
            readonly data: {
                readonly name: T;
                readonly view: string | Record<{
                    readonly name: "sys_ui_view";
                    readonly schema: {
                        readonly title: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly mandatory: true;
                        }> & {
                            readonly asRecord: () => never;
                        };
                        readonly hidden: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => never;
                        };
                    };
                } & {
                    readonly asRecord: () => never;
                }>;
            };
        }, Record>;
    }, Record>;
};
