import { TimeZone } from './TimeZone';
import { GlideUser } from './GlideUser';
import { EncryptionContext } from './EncryptionContext';
import { ChoiceList } from './ChoiceList';
import { HttpSession } from './HttpSession';
import { GlideRecord } from './GlideRecord';
import { ScopedKMFKaaProfile } from './ScopedKMFKaaProfile';
import { GlideStack } from './GlideStack';
import { CryptoModulePicker } from './CryptoModulePicker';
import { IPAddress } from './IPAddress';
import { Stack } from './Stack';
/**
 * GlideSession manages all of the information for a user session. You can retrieve this from gs.getSession()
 */
export declare class GlideSession {
    addErrorMessage(message: string): void;
    addInfoMessage(message: string): void;
    addTrivialMessage(message: string): void;
    checkActiveDBs(): void;
    clearClientData(name: string): void;
    clearProperty(key: string): void;
    clearWatchField(): void;
    constructor();
    disableQueryCategoryPool(poolName: string): void;
    disableSeparation(): void;
    disconnect(): void;
    disconnect(releaseMutexes: boolean): void;
    enableSeparation(): void;
    get(): GlideSession;
    getActivatedElevatedRoles(): string;
    getAvailableElevatedRoles(): string;
    getBooleanProperty(name: string): boolean;
    getBooleanProperty(key: string, bDefault: boolean): boolean;
    getBusinessRuleStack(): Stack;
    /**
     * Fetch the value in active session based on the name
     */
    getClientData(name: string): string;
    getClientDataMap(): ChoiceList;
    /**
     * Gets the client IP address
     */
    getClientIP(): IPAddress;
    getContextualMode(): string;
    getCryptoModulePicker(): CryptoModulePicker;
    getCryptoModulePickerForTableWithSingleModule(tableName: string): CryptoModulePicker;
    getCurrentDomainID(): string;
    getDateFormat(): string;
    getDateFormat(style: string): string;
    getDateTimeFormat(): string;
    getDateTimeFormat(dateStyle: string): string;
    getEncryptionContext(): EncryptionContext;
    getFullName(): string;
    getHttpSession(): HttpSession;
    getIntProperty(key: string): number;
    getIntProperty(key: string, iDefault: number): number;
    getKaaProfile(): ScopedKMFKaaProfile;
    /**
     * Language used by the user
     */
    getLanguage(): string;
    getLoginHome(direct: boolean): string;
    getNumberOfWaiters(): number;
    getProperty(key: string): any;
    getRoles(): string;
    getRoles(includeDefaultRoles: boolean): string;
    getRunEngines(): boolean;
    getSeparationValue(): string;
    getSessionID(): string;
    getSessionKey(): string;
    getStack(): GlideStack;
    getStack(stackName: string): GlideStack;
    getStackName(): string;
    getTimeFormat(): string;
    getTimeZone(): TimeZone;
    /**
     * Get the Time Zone name associated with the user
     */
    getTimeZoneName(): string;
    getTimeZoneShortName(): string;
    getUID(): string;
    getURI(): string;
    getUser(): GlideUser;
    getUserName(): string;
    getWatchField(): string;
    getWorkflow(): boolean;
    hasRole(appRoles: string): boolean;
    impersonate(userSysId: string): string;
    /**
     * Checks if the current session is interactive
     */
    isInteractive(): boolean;
    isLockedOut(): boolean;
    /**
     * Determines if the current user is currently logged in
     */
    isLoggedIn(): boolean;
    isOverridingQueryRoute(poolGR: GlideRecord): boolean;
    isQueryCategoryPoolDisabled(poolName: string): boolean;
    loadUserByID(userSysId: string): GlideUser;
    onlineImpersonate(userSysId: string): string;
    onlineUnimpersonate(): string;
    /**
     * Store a value in an active session
     */
    putClientData(name: string, value: string): void;
    putProperty(key: string, value: any): void;
    resetDisabledQueryCategoryPool(poolName: string): void;
    resetOverrideQueryCategoryPool(): void;
    resetURI(): string;
    setCacheFlush(onOrOff: boolean): boolean;
    setCacheIgnoreFlushTable(table: string): string;
    setContextualMode(mode: string): void;
    setDateFormat(dateFormat: string): void;
    setDomainID(domainID: string): void;
    setInteractive(b: boolean): void;
    setLanguage(language: string): void;
    setOverrideQueryCategoryPool(poolGR: GlideRecord): void;
    setRunEngines(onOrOff: boolean): boolean;
    setStrictQuery(b: boolean): boolean;
    setTimeFormat(timeFormat: string): void;
    setTimeZoneName(timezoneName: string): void;
    setURI(uri: string): void;
    setWatchField(id: string): void;
    setWorkflow(onOrOff: boolean): boolean;
}
