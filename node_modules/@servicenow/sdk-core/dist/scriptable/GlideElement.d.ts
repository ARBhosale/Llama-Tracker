import { SysStyleResult } from './SysStyleResult';
import { AGlideObject } from './AGlideObject';
import { GlideRecord } from './GlideRecord';
import { MappingLookupSourceDescriptor } from './MappingLookupSourceDescriptor';
import { GlideElementDescriptor } from './GlideElementDescriptor';
/**
 * The Scoped GlideElement API provides methods for dealing with fields and their values. Scoped GlideElement methods
 * are available for the fields of the current GlideRecord
 */
export declare class GlideElement {
    /**
     * Determines if the user's role permits creation of new records in this field
     */
    canCreate(): boolean;
    /**
     * Determines if the GlideRecord table can be read from
     */
    canRead(): boolean;
    /**
     * Determines if the GlideRecord table can be written to
     */
    canWrite(): boolean;
    /**
     * Determines if the current field has been modified
     */
    changes(): boolean;
    /**
     * Determines the previous value of the current field matched a certain object
     */
    changesFrom(o: any): boolean;
    changesFromNotEmpty(): boolean;
    /**
     * Determines if the new value of a field after a change matches a certain object
     */
    changesTo(o: any): boolean;
    changesToNotEmpty(): boolean;
    constructor();
    debug(msg: any): void;
    elementSupportsMapping(): boolean;
    explainLock(): string;
    /**
     * Gets the value of the attribute on the field in question from the dictionary as a string. If the attribute is a
     * boolean attribute, use getBooleanAttribute(String) to get the value as a boolean rathe...
     */
    getAttribute(attribute: string): string;
    getextendsName(): string;
    /**
     * Gets the value of the attribute on the field in question from the dictionary as a string. To get the value as a
     * string, use getAttribute(string)
     */
    getBooleanAttribute(attribute: string): boolean;
    getChoiceValue(): string;
    /**
     * Retrieves the choice list for a field
     */
    getChoices(dependent: string): Array<any>;
    getContextID(): string;
    getContextName(): string;
    getDebugCount(): number;
    /**
     * Gets the decrypted value
     */
    getDecryptedValue(): string;
    getDependent(): string;
    getDependentTable(): string;
    /**
     * Gets the formatted display value of the field
     */
    getDisplayValue(maxCharacters: number): string;
    getDisplayValueExt(maxCharacters: number, nullsub: string): string;
    /**
     * Gets the field's element descriptor
     */
    getED(): GlideElementDescriptor;
    getElementValue(name: string): string;
    getError(): string;
    getEscapedValue(): string;
    getFieldStyle(): string;
    getFullStyle(): SysStyleResult;
    getGlideObject(): AGlideObject;
    getGlideRecord(): GlideRecord;
    getHTMLValue(maxChars: number): string;
    getHTMLValueExt(maxCharacters: number, nullsub: string): string;
    getHint(): string;
    getInitialValue(): string;
    /**
     * Gets the object's label
     */
    getLabel(): string;
    getMappingConfig(): MappingLookupSourceDescriptor;
    getModifiedBy(): string;
    /**
     * Gets the name of the field
     */
    getName(): string;
    getReferenceKey(): string;
    getStyle(): string;
    /**
     * Gets the table name
     */
    getTableName(): string;
    getTextAreaDisplayValue(): string;
    getValue(): string;
    getValueMapping(): string;
    getXHTMLValue(): string;
    getXMLValue(): string;
    /**
     * Determines whether a field has a particular attribute
     */
    hasAttribute(attribute: string): boolean;
    hasMapping(): boolean;
    hasRightsTo(operation: string): boolean;
    hasValue(): boolean;
    isArray(): boolean;
    isDynamicCreate(): boolean;
    isNil(): boolean;
    isObject(): boolean;
    /**
     * Determines whether the field is null
     */
    nil(): boolean;
    /**
     * Sets the display value of the field
     */
    setDisplayValue(value: any): void;
    /**
     * Adds an error message. Can be retrieved using getError()
     */
    setError(error: string): void;
    setInitialValue(value: string): void;
    setJournalEntry(value: any, userName: string): void;
    /**
     * Sets the display value of the field
     */
    setValue(value: any): void;
    setValueMapping(mapping: string): void;
    size(): number;
    toString(): string;
}
