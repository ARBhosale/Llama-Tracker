import { ExtensionPoint } from './ExtensionPoint';
import { GlideRecord } from './GlideRecord';
import { Plugin } from './Plugin';
/**
 * Scoped API for PluginManager
 */
export declare class GlidePluginManager {
    canRollback(pluginName: string): boolean;
    getActivePlugin(pluginName: string): Plugin;
    getActivePlugins(): Record<string, Plugin>;
    getExtensionMap(): Record<string, Record<string, ExtensionPoint>>;
    getInstalledCorePlugins(): Record<string, Plugin>;
    getInstalledPlugin(pluginName: string): Plugin;
    getInstalledPlugins(): Record<string, Plugin>;
    getPluginPath(pluginName: string): string;
    getRollbackContextId(pluginName: string): string;
    getRollbackDenialReason(pluginName: string): string;
    getRollbackRunId(rollbackContextId: string): string;
    getUninstalledConditionalPlugins(pluginName: string): GlideRecord;
    init(haveDB: boolean): void;
    /**
     * Determine if a plugin is activated
     */
    isActive(plugin_id: string): boolean;
    isRegistered(pluginId: string): boolean;
    isSkipDependentUpdate(): boolean;
    isUpgradeSystemBusy(): boolean;
    isZboot(): boolean;
    loadAllDemo(): void;
    loadDemoData(pluginName: string): void;
    loadPluginData(pluginName: string): void;
    loadPluginData(pluginName: string, dir: string): void;
    registerOOBContent(): void;
    registerPlugin(pluginName: string): void;
    repairPlugin(pluginName: string): void;
    setSkipDependentUpdate(b: boolean): void;
    setSource(source: string): void;
    setZboot(b: boolean): void;
    startPluginFromCluster(pluginName: string): void;
    upgrade(): void;
    upgradeCount(): number;
    verifyFilenames(): void;
    constructor();
}
