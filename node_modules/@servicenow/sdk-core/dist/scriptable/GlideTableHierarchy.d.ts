/**
 * The Scoped GlideTableHierarchy API provides methods for handling information about table relationships
 */
export declare class GlideTableHierarchy {
    constructor(tableName: string);
    /**
     * Returns a list of all tables that extend the current table and includes the current table
     */
    getAllExtensions(): Array<string>;
    /**
     * Returns the parent class
     */
    getBase(): string;
    /**
     * Returns a list of all classes in the hierarchy of the given table
     */
    getHierarchy(): Array<string>;
    /**
     * Returns the table's name
     */
    getName(): string;
    /**
     * Returns the top level class in the hierarchy
     */
    getRoot(): string;
    /**
     * Returns a list of all tables that extend the current table
     */
    getTableExtensions(): Array<string>;
    /**
     * Returns a list of the table names in the hierarchy
     */
    getTables(): Array<string>;
    /**
     * Returns true of this class has been extended
     */
    hasExtensions(): boolean;
    /**
     * Returns true if this is a base class
     */
    isBaseClass(): boolean;
    /**
     * Returns true if this table is not in a hierarchy
     */
    isSoloClass(): boolean;
}
