import type { Table, Data } from '../db';
interface IGlideRecord<T extends Table = Table> {
    table: T;
    addQuery<F extends keyof Data<T>>(element: F, value: Data<T>[F]): void;
    query(): void;
    get(id: string): void;
    get<F extends keyof Data<T>>(element: F, value: Data<T>[F]): void;
    getValue<F extends keyof Data<T>>(element: F): Data<T>[F];
    isValid(): boolean;
    isValidRecord(): boolean;
    initialize(): void;
}
export type GlideRecord<T extends Table = Table> = IGlideRecord<T> & Data<T>;
export interface _GlideRecordConstructor {
    new <T extends Table = Table>(n: string): GlideRecord<T> & Data<T>;
}
export declare const GlideRecord: IGlideRecord & _GlideRecordConstructor;
export declare function newGlideRecord<T extends Table>(table: T): GlideRecord<T>;
export {};
