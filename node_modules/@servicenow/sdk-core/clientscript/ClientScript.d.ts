import { Record } from '../db';
import { z } from 'zod';
import { Entity } from '../entity';
import { sys_script_client } from '../tables';
declare const PartialClientScriptSchema: z.ZodObject<{
    table: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
    name: z.ZodString;
    active: z.ZodDefault<z.ZodBoolean>;
    applies_extended: z.ZodDefault<z.ZodBoolean>;
    ui_type: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"Desktop">, z.ZodLiteral<"Mobile/Service Portal">, z.ZodLiteral<"All">]>>;
    description: z.ZodDefault<z.ZodString>;
    messages: z.ZodDefault<z.ZodString>;
    isolate_script: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    active: boolean;
    name: string;
    table: {
        name: string;
    };
    description: string;
    applies_extended: boolean;
    ui_type: "Desktop" | "Mobile/Service Portal" | "All";
    messages: string;
    isolate_script: boolean;
}, {
    name: string;
    table: {
        name: string;
    };
    active?: boolean | undefined;
    applies_extended?: boolean | undefined;
    ui_type?: "Desktop" | "Mobile/Service Portal" | "All" | undefined;
    description?: string | undefined;
    messages?: string | undefined;
    isolate_script?: boolean | undefined;
}>;
export declare const ClientScriptSchema: z.ZodIntersection<z.ZodObject<{
    global: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<false>, z.ZodLiteral<true>]>>;
    view: z.ZodDefault<z.ZodString>;
    field: z.ZodDefault<z.ZodString>;
    script: z.ZodDefault<z.ZodAny>;
    type: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"onLoad">, z.ZodLiteral<"onSubmit">, z.ZodLiteral<"onCellEdit">, z.ZodLiteral<"onChange">, z.ZodLiteral<"--None--">]>>;
}, "strip", z.ZodTypeAny, {
    type: "--None--" | "onCellEdit" | "onChange" | "onLoad" | "onSubmit";
    global: boolean;
    view: string;
    field: string;
    script?: any;
}, {
    global?: boolean | undefined;
    view?: string | undefined;
    field?: string | undefined;
    script?: any;
    type?: "--None--" | "onCellEdit" | "onChange" | "onLoad" | "onSubmit" | undefined;
}>, z.ZodObject<{
    table: z.ZodObject<{
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        name: string;
    }, {
        name: string;
    }>;
    name: z.ZodString;
    active: z.ZodDefault<z.ZodBoolean>;
    applies_extended: z.ZodDefault<z.ZodBoolean>;
    ui_type: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<"Desktop">, z.ZodLiteral<"Mobile/Service Portal">, z.ZodLiteral<"All">]>>;
    description: z.ZodDefault<z.ZodString>;
    messages: z.ZodDefault<z.ZodString>;
    isolate_script: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    active: boolean;
    name: string;
    table: {
        name: string;
    };
    description: string;
    applies_extended: boolean;
    ui_type: "Desktop" | "Mobile/Service Portal" | "All";
    messages: string;
    isolate_script: boolean;
}, {
    name: string;
    table: {
        name: string;
    };
    active?: boolean | undefined;
    applies_extended?: boolean | undefined;
    ui_type?: "Desktop" | "Mobile/Service Portal" | "All" | undefined;
    description?: string | undefined;
    messages?: string | undefined;
    isolate_script?: boolean | undefined;
}>>;
type events_to_script_module = {
    onCellEdit: (sysIDs: string[], table: string, oldValues: string[], newValue: string, callback: (val: boolean) => any) => void;
    onChange: (control: any, oldValue: string, newValue: string, isLoading: boolean, isTemplate: boolean) => void;
    onLoad: () => void;
    onSubmit: () => void;
};
type field_type<E> = E extends Exclude<client_script_events, 'onSubmit' | 'onLoad' | '--None--'> ? string : never;
type client_script_events = keyof sys_script_client['schema']['type']['choices'];
type PartialClientScript = z.input<typeof PartialClientScriptSchema>;
export type ClientScript<E extends client_script_events = '--None--', G extends boolean = true> = PartialClientScript & {
    global?: G;
    view?: G extends false ? string : never;
    type?: E;
    script?: (E extends keyof events_to_script_module ? events_to_script_module[E] : string) | string;
    field?: field_type<E>;
};
export declare function ClientScript<E extends client_script_events, G extends boolean = true>(properties: ClientScript<E, G>): {
    type: "--None--" | "onCellEdit" | "onChange" | "onLoad" | "onSubmit";
    global: boolean;
    view: string;
    field: string;
    script?: any;
} & {
    active: boolean;
    name: string;
    table: {
        name: string;
    };
    description: string;
    applies_extended: boolean;
    ui_type: "Desktop" | "Mobile/Service Portal" | "All";
    messages: string;
    isolate_script: boolean;
} & {
    readonly asRecord: () => Entity<Record<{
        readonly name: "sys_script_client";
        readonly extends: {
            readonly name: "sys_metadata";
            readonly schema: {
                readonly sys_class_name: import("../db").Typed<string, {
                    readonly label: "Class";
                    readonly default: "javascript:current.getTableName();";
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_name: import("../db").Typed<string, {
                    readonly maxLength: 255;
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_package: import("../db").Typed<string | Record<{
                    readonly name: "sys_package";
                    readonly schema: {
                        readonly active: import("../db").Typed<boolean, {
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                            readonly label: "Subscription requirement";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "None";
                                    readonly sequence: 1;
                                };
                                readonly log: {
                                    readonly label: "Monitor";
                                    readonly sequence: 2;
                                };
                                readonly enforce: {
                                    readonly label: "Required";
                                    readonly sequence: 3;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly ide_created: import("../db").Typed<string, {
                            readonly label: "IDE Created";
                            readonly maxLength: 10;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly licensable: import("../db").Typed<boolean, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly license_category: import("../db").Typed<string, {
                            readonly label: "Subscription Category";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                            readonly label: "Subscription Model";
                            readonly choices: {
                                readonly none: {
                                    readonly label: "Not applicable";
                                    readonly sequence: 1;
                                };
                                readonly fulfiller: {
                                    readonly label: "Fulfiller/Requester";
                                    readonly sequence: 2;
                                };
                                readonly producer: {
                                    readonly label: "Producer";
                                    readonly sequence: 3;
                                };
                                readonly capacity: {
                                    readonly label: "Capacity";
                                    readonly sequence: 4;
                                };
                                readonly mixed: {
                                    readonly label: "Mixed";
                                    readonly sequence: 5;
                                };
                                readonly app_use: {
                                    readonly label: "Application in use";
                                    readonly sequence: 6;
                                };
                            };
                            readonly default: "none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly name: import("../db").Typed<string, {
                            readonly maxLength: 100;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly package_json: import("../db").Typed<string, {
                            readonly label: "Package JSON";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly source: import("../db").Typed<string, {
                            readonly label: "ID";
                            readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly trackable: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_policy: import("../db").Typed<"read" | "protected", {
                    readonly label: "Protection policy";
                    readonly choices: {
                        readonly read: "Read-only";
                        readonly protected: "Protected";
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_scope: import("../db").Typed<string | Record<{
                    readonly name: "sys_scope";
                    readonly extends: {
                        readonly name: "sys_package";
                        readonly schema: {
                            readonly active: import("../db").Typed<boolean, {
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                readonly label: "Subscription requirement";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "None";
                                        readonly sequence: 1;
                                    };
                                    readonly log: {
                                        readonly label: "Monitor";
                                        readonly sequence: 2;
                                    };
                                    readonly enforce: {
                                        readonly label: "Required";
                                        readonly sequence: 3;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly ide_created: import("../db").Typed<string, {
                                readonly label: "IDE Created";
                                readonly maxLength: 10;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly licensable: import("../db").Typed<boolean, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_category: import("../db").Typed<string, {
                                readonly label: "Subscription Category";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                readonly label: "Subscription Model";
                                readonly choices: {
                                    readonly none: {
                                        readonly label: "Not applicable";
                                        readonly sequence: 1;
                                    };
                                    readonly fulfiller: {
                                        readonly label: "Fulfiller/Requester";
                                        readonly sequence: 2;
                                    };
                                    readonly producer: {
                                        readonly label: "Producer";
                                        readonly sequence: 3;
                                    };
                                    readonly capacity: {
                                        readonly label: "Capacity";
                                        readonly sequence: 4;
                                    };
                                    readonly mixed: {
                                        readonly label: "Mixed";
                                        readonly sequence: 5;
                                    };
                                    readonly app_use: {
                                        readonly label: "Application in use";
                                        readonly sequence: 6;
                                    };
                                };
                                readonly default: "none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly name: import("../db").Typed<string, {
                                readonly maxLength: 100;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly package_json: import("../db").Typed<string, {
                                readonly label: "Package JSON";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly source: import("../db").Typed<string, {
                                readonly label: "ID";
                                readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly trackable: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                    readonly schema: {
                        readonly can_edit_in_studio: import("../db").Typed<boolean, {
                            readonly label: "Can Edit Application in Studio";
                            readonly default: true;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                            readonly label: "JavaScript Mode";
                            readonly default: "es_latest";
                            readonly choices: {
                                readonly traditional: "Compatibility Mode";
                                readonly helsinki_es5: "ES5 Standards Mode";
                                readonly es_latest: "ECMAScript 2021 (ES12)";
                            };
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly logo: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly private: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly restrict_table_access: import("../db").Typed<boolean, {
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                            readonly choices: {
                                readonly permissive: "Tracking";
                                readonly enforcing: "Enforcing";
                            };
                            readonly dropdown: "dropdown with none";
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly scope: import("../db").Typed<string, {
                            readonly maxLength: 18;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly scoped_administration: import("../db").Typed<boolean, {
                            readonly label: "Application administration";
                            readonly default: false;
                        }> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly short_description: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly template: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly vendor: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                        readonly vendor_prefix: import("../db").Typed<string, {}> & {
                            readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                        };
                    };
                }>, {
                    readonly referenceTable: {
                        readonly name: "sys_scope";
                        readonly extends: {
                            readonly name: "sys_package";
                            readonly schema: {
                                readonly active: import("../db").Typed<boolean, {
                                    readonly default: true;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly enforce_license: import("../db").Typed<"none" | "log" | "enforce", {
                                    readonly label: "Subscription requirement";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "None";
                                            readonly sequence: 1;
                                        };
                                        readonly log: {
                                            readonly label: "Monitor";
                                            readonly sequence: 2;
                                        };
                                        readonly enforce: {
                                            readonly label: "Required";
                                            readonly sequence: 3;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly ide_created: import("../db").Typed<string, {
                                    readonly label: "IDE Created";
                                    readonly maxLength: 10;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly licensable: import("../db").Typed<boolean, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_category: import("../db").Typed<string, {
                                    readonly label: "Subscription Category";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly license_model: import("../db").Typed<"none" | "fulfiller" | "producer" | "capacity" | "mixed" | "app_use", {
                                    readonly label: "Subscription Model";
                                    readonly choices: {
                                        readonly none: {
                                            readonly label: "Not applicable";
                                            readonly sequence: 1;
                                        };
                                        readonly fulfiller: {
                                            readonly label: "Fulfiller/Requester";
                                            readonly sequence: 2;
                                        };
                                        readonly producer: {
                                            readonly label: "Producer";
                                            readonly sequence: 3;
                                        };
                                        readonly capacity: {
                                            readonly label: "Capacity";
                                            readonly sequence: 4;
                                        };
                                        readonly mixed: {
                                            readonly label: "Mixed";
                                            readonly sequence: 5;
                                        };
                                        readonly app_use: {
                                            readonly label: "Application in use";
                                            readonly sequence: 6;
                                        };
                                    };
                                    readonly default: "none";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly name: import("../db").Typed<string, {
                                    readonly maxLength: 100;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly package_json: import("../db").Typed<string, {
                                    readonly label: "Package JSON";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly source: import("../db").Typed<string, {
                                    readonly label: "ID";
                                    readonly default: "javascript:_getID();\n\n    function _getID() {\n      var source = current.getValue('source');\n      var sys_id = current.getValue('sys_id');\n      var scope = current.getValue('scope');\n      return gs.nil(scope) || scope == 'global' ? source||sys_id : source||scope;\n    }";
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly trackable: import("../db").Typed<boolean, {
                                    readonly default: false;
                                }> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                                readonly version: import("../db").Typed<`${bigint}.${bigint}.${bigint}`, {}> & {
                                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                                };
                            };
                        };
                        readonly schema: {
                            readonly can_edit_in_studio: import("../db").Typed<boolean, {
                                readonly label: "Can Edit Application in Studio";
                                readonly default: true;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly js_level: import("../db").Typed<"es_latest" | "traditional" | "helsinki_es5", {
                                readonly label: "JavaScript Mode";
                                readonly default: "es_latest";
                                readonly choices: {
                                    readonly traditional: "Compatibility Mode";
                                    readonly helsinki_es5: "ES5 Standards Mode";
                                    readonly es_latest: "ECMAScript 2021 (ES12)";
                                };
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly logo: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly private: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly restrict_table_access: import("../db").Typed<boolean, {
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly runtime_access_tracking: import("../db").Typed<"permissive" | "enforcing", {
                                readonly choices: {
                                    readonly permissive: "Tracking";
                                    readonly enforcing: "Enforcing";
                                };
                                readonly dropdown: "dropdown with none";
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly scope: import("../db").Typed<string, {
                                readonly maxLength: 18;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly scoped_administration: import("../db").Typed<boolean, {
                                readonly label: "Application administration";
                                readonly default: false;
                            }> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly short_description: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly template: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly vendor: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                            readonly vendor_prefix: import("../db").Typed<string, {}> & {
                                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                            };
                        };
                    };
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
                readonly sys_update_name: import("../db").Typed<string, {
                    readonly label: "Update name";
                    readonly maxLength: 250;
                }> & {
                    readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
                };
            };
        };
        readonly schema: {
            readonly name: import("../db").Typed<string, {
                readonly maxLength: 40;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly table: import("../db").Typed<import("../db").Table, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly active: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly applies_extended: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly global: import("../db").Typed<boolean, {
                readonly default: true;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly ui_type: import("../db").Typed<"Desktop" | "Mobile/Service Portal" | "All", {
                readonly choices: {
                    readonly Desktop: "Desktop";
                    readonly 'Mobile/Service Portal': "Mobile/Service Portal";
                    readonly All: "All";
                };
                readonly default: "Desktop";
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly type: import("../db").Typed<"--None--" | "onCellEdit" | "onChange" | "onLoad" | "onSubmit", {
                readonly choices: {
                    readonly '--None--': "--None--";
                    readonly onCellEdit: "onCellEdit";
                    readonly onChange: "onChange";
                    readonly onLoad: "onLoad";
                    readonly onSubmit: "onSubmit";
                };
                readonly dropdown: "dropdown with none";
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly description: import("../db").Typed<string, {
                readonly maxLength: 4000;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly messages: import("../db").Typed<string, {
                readonly maxLength: 4000;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly script: import("../db").Typed<import("../db").ScriptModule<Function>, {}> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly isolate_script: import("../db").Typed<boolean, {
                readonly default: false;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly view: import("../db").Typed<string, {
                readonly maxLength: 40;
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
            readonly field: import("../db").Typed<string, {
                readonly dropdown: "dropdown with none";
            }> & {
                readonly asRecord: () => Entity<Record<import("../db").Table>, import("../db").Table>;
            };
        };
    }>, import("../db").Table>;
};
export {};
