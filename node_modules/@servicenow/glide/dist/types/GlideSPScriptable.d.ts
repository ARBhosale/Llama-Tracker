import { NativeArray } from '../imports/NativeArray';
import { SPScriptObject } from '../imports/SPScriptObject';
import { SPScriptArray } from '../imports/SPScriptArray';
import { GlideRecord } from '../imports/GlideRecord';
import { Scriptable } from '../imports/Scriptable';
export declare class GlideSPScriptable {
    canReadRecord(gr?: GlideRecord): boolean;
    canReadRecord(table?: string, id?: string): boolean;
    getCatalogItem(data?: Scriptable): Scriptable;
    getCatalogItem(itemID?: string): Scriptable;
    getCatalogItem(itemID?: string, isOrdering?: boolean): Scriptable;
    getCatalogItem(itemID?: string, isOrdering?: boolean, tableName?: string): Scriptable;
    getDisplayValue(name?: string): string;
    getField(gr?: GlideRecord, name?: string): Scriptable;
    getFields(gr?: GlideRecord, names?: string): Scriptable;
    getFieldsObject(gr?: GlideRecord, names?: string): Scriptable;
    getFilterBreadcrumbs(table?: string, query?: string, fixedQuery?: string): SPScriptArray;
    getForm(table?: string, sys_id?: string): Scriptable;
    getForm(table?: string, sys_id?: string, encodedQuery?: string): Scriptable;
    getForm(table?: string, sys_id?: string, encodedQuery?: string, view?: string): Scriptable;
    getForm(table?: string, sys_id?: string, encodedQuery?: string, view?: string, isPopup?: boolean): Scriptable;
    getForm(table?: string, sys_id?: string, encodedQuery?: string, view?: string, isPopup?: boolean, includeScripts?: boolean): Scriptable;
    getInstanceRecord(): GlideRecord;
    getKBCategoryArticleSummaries(category?: string, limit?: number, maxChars?: number): Scriptable;
    getKBCategoryArticles(category?: string, limit?: number): Scriptable;
    getKBCount(kbIDs?: string): number;
    getKBRecord(): GlideRecord;
    getKBSiblingCategories(catID?: string): GlideRecord;
    getKBTopCategoryID(catId?: string): string;
    getListColumns(tableName?: string): Scriptable;
    getListColumns(tableName?: string, view?: string): Scriptable;
    getMenuHREF(gr?: GlideRecord): Scriptable;
    getMenuItems(sys_id?: string): Scriptable;
    getParameter(name?: string): any;
    getPortalRecord(): GlideRecord;
    getRecord(): GlideRecord;
    getRecordDisplayValues(data?: Scriptable, from?: GlideRecord, names?: string): void;
    getRecordElements(from?: GlideRecord, names?: string): SPScriptObject;
    getRecordElements(data?: Scriptable, from?: GlideRecord, names?: string): void;
    getRecordValues(data?: Scriptable, from?: GlideRecord, names?: string): void;
    getRecordVariables(gr?: GlideRecord): string;
    getRecordVariables(gr?: GlideRecord, includeNilResponses?: boolean): string;
    getRecordVariablesArray(gr?: GlideRecord): Scriptable;
    getRecordVariablesArray(gr?: GlideRecord, includeNilResponses?: boolean): Scriptable;
    getRelatedList(tableName?: string, foreignKey?: string): NativeArray;
    getSCRecord(): GlideRecord;
    getStream(): Scriptable;
    getStream(table?: string, sys_id?: string): Scriptable;
    getStreamEntries(): string;
    getSubCategories(catId?: string): GlideRecord;
    getUserInitials(): string;
    getValue(name?: string): any;
    getValues(data?: Scriptable): void;
    getValues(data?: Scriptable, names?: string): void;
    getVariables(): string;
    getVariables(includeNilResponses?: boolean): string;
    getVariablesArray(): Scriptable;
    getVariablesArray(includeNilResponses?: boolean): Scriptable;
    getWidget(widgetID?: string): Scriptable;
    getWidget(widgetID?: string, widgetParams?: any): Scriptable;
    getWidgetFromInstance(instanceID?: string): Scriptable;
    getWidgetParameters(): Scriptable;
    getWidgetScope(instanceID?: string): Scriptable;
    log(message?: any): void;
    static logSearch(table?: string, terms?: string, count?: number): void;
    static logSearch(table?: string, terms?: string, count?: number, searchType?: string): void;
    static logSearch(table?: string, terms?: string, count?: number, searchType?: string, portal?: string, page?: string): void;
    static logStat(type?: string, table?: string, id?: string): void;
    static logStat(type?: string, table?: string, id?: string, text?: string): void;
    static logStat(type?: string, table?: string, id?: string, text?: string, portalId?: string): void;
    saveRecord(table?: string, sys_id?: string, model?: Scriptable): Scriptable;
    stripHTML(html?: string): Scriptable;
    constructor();
}
